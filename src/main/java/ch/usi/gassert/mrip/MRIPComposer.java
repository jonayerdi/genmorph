package ch.usi.gassert.mrip;

import ch.usi.gassert.data.tree.Tree;
import ch.usi.gassert.util.StringUtils;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.Writer;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Objects;

import static ch.usi.gassert.util.Assert.assertAlways;
import static ch.usi.gassert.util.Assert.assertProperty;

/**
 * Utility class to compose full MRs based on MRIP files generated by MRIPGenerator + output relations generated by GAssertMRs
 */
public class MRIPComposer {

    public static String readInputRelation(final String mripsFile, final String mrip) {
        try (final BufferedReader reader = new BufferedReader(new FileReader(mripsFile))) {
            final Iterator<String> lines = reader.lines().iterator();
            while (lines.hasNext()) {
                final String currentMripName = lines.next().trim();
                final String currentMrip = lines.next().trim();
                if (mrip.equals(currentMripName)) {
                    return currentMrip;
                }
            }
            throw new RuntimeException("MRIP \"" + mrip + "\" not found in " + mripsFile);
        } catch (Exception e) {
            throw new RuntimeException("Error reading MRIP \"" + mrip + "\" from " + mripsFile, e);
        }
    }

    public static String composeMR(final String inputRelation, final String outputRelation) {
        return StringUtils.parenthesize(
                StringUtils.parenthesize(inputRelation) + " => " + StringUtils.parenthesize(outputRelation)
        );
    }

    public static Tree composeMR(final Tree inputRelation, final Tree outputRelation) {
        return new Tree("=>", inputRelation, outputRelation, Tree.Type.BOOLEAN);
    }

    public static void main(String[] args) {
        // Parse args
        if (args.length != 4) {
            System.err.println("Wrong number of parameters: 4 arguments expected, got " + args.length);
            System.err.println("MRIPs file");
            System.err.println("MRIP");
            System.err.println("Output relation file");
            System.err.println("MR file");
        }
        Iterator<String> arguments = Arrays.stream(args).sequential().iterator();
        final String mripsFile = arguments.next();
        final String mrip = arguments.next().trim();
        final String outputRelationFile = arguments.next();
        final String fullMRFile = arguments.next();
        // Read MRIP
        final String inputRelation = readInputRelation(mripsFile, mrip);
        // Read Output Relation
        final String outputRelation;
        try (final BufferedReader reader = new BufferedReader(new FileReader(outputRelationFile))) {
            outputRelation = assertProperty(reader.readLine(), Objects::nonNull,
                    "No assertion found at line 1 from " + outputRelationFile).trim();
        } catch (Exception e) {
            throw new RuntimeException("Error reading Output Relation from " + outputRelationFile, e);
        }
        // Compose MRIP
        final String mr = composeMR(inputRelation, outputRelation);
        // Output full MR
        try (final Writer writer = new FileWriter(fullMRFile)) {
            writer.write(mr + "\n");
        } catch (Exception e) {
            throw new RuntimeException("Error writing MR to " + fullMRFile, e);
        }
    }

}
