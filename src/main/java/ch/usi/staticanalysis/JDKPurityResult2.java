package ch.usi.staticanalysis;

import java.util.HashMap;
import java.util.Map;

public class JDKPurityResult2 {

    public static final Map<String, Boolean> map;

    static {
        map = new HashMap<>();
        m1();
        m2();
        m3();
        m4();
        m5();
        m6();
        map.putAll(JDKPurityResults3.map);
    }

    private static void m1() {
        map.put("java.util.concurrent.atomic.AtomicInteger.longValue()J", true);
        map.put("java.util.regex.Pattern$CharPropertyNames$6.<init>()V", false);
        map.put("java.util.Hashtable$Entry.<init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/Hashtable$Entry;)V", false);
        map.put("java.util.logging.XMLFormatter.a2(Ljava/lang/StringBuffer;I)V", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.drainTo(Ljava/util/Collection;)I", false);
        map.put("java.util.Locale.getDisplayName(Ljava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.Scanner.<init>(Ljava/nio/file/Path;Ljava/nio/charset/Charset;)V", false);
        map.put("java.util.logging.Logger.setCallersClassLoaderRef(Ljava/lang/Class;)V", false);
        map.put("java.util.prefs.AbstractPreferences.putByteArray(Ljava/lang/String;[B)V", false);
        map.put("java.util.regex.Pattern$BitClass.isSatisfiedBy(I)Z", true);
        map.put("java.util.Collections$UnmodifiableList$1.hasNext()Z", false);
        map.put("java.util.FormatFlagsConversionMismatchException.getMessage()Ljava/lang/String;", false);
        map.put("java.util.concurrent.locks.LockSupport.unpark(Ljava/lang/Thread;)V", false);
        map.put("java.util.Locale.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.poll(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapEntryIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$Ctype.isSatisfiedBy(I)Z", true);
        map.put("java.util.concurrent.ArrayBlockingQueue$Itr.remove()V", false);
        map.put("java.util.SimpleTimeZone.setStartRule(IIII)V", false);
        map.put("java.util.Stack.pop()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.higherKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.regex.Pattern$SingleS.isSatisfiedBy(I)Z", true);
        map.put("java.util.prefs.WindowsPreferences.getSpi(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.jar.JarFile.getCodeSource(Ljava/net/URL;Ljava/lang/String;)Ljava/security/CodeSource;", false);
        map.put("java.util.Collections$UnmodifiableList.hashCode()I", false);
        map.put("java.util.LinkedList.superClone()Ljava/util/LinkedList;", false);
        map.put("java.util.Arrays.fill([ZIIZ)V", false);
        map.put("java.util.prefs.Preferences.clear()V", false);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapIterator.hasNext()Z", true);
        map.put("java.util.concurrent.Phaser.doRegister(I)I", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryReleaseShared(J)Z", false);
        map.put("java.util.Timer.schedule(Ljava/util/TimerTask;JJ)V", false);
        map.put("java.util.zip.ZipEntry.getName()Ljava/lang/String;", true);
        map.put("java.util.zip.ZipEntry.setCompressedSize(J)V", false);
        map.put("java.util.Collections$SingletonList.size()I", true);
        map.put("java.util.HashMap.removeMapping(Ljava/lang/Object;)Ljava/util/HashMap$Entry;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.removeLast()Ljava/lang/Object;", false);
        map.put("java.util.ResourceBundle$Control.getCandidateLocales(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/List;", false);
        map.put("java.util.TimerThread.mainLoop()V", false);
        map.put("java.util.Arrays.binarySearch([FF)I", false);
        map.put("java.util.Locale.access$800(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lsun/util/locale/LocaleExtensions;", true);
        map.put("java.util.regex.Pattern$SingleS.<init>(I)V", false);
        map.put("java.util.ResourceBundle$CacheKey.getLocale()Ljava/util/Locale;", true);
        map.put("java.util.HashMap$Entry.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.Random.nextGaussian()D", false);
        map.put("java.util.Collections.emptyMap()Ljava/util/Map;", true);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.peekFirst()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$AbstractItr.<init>(Ljava/util/concurrent/ConcurrentLinkedDeque;)V", false);
        map.put("java.util.regex.Pattern$Begin.<init>()V", false);

        map.put("java.util.prefs.Base64.base64ToByteArray(Ljava/lang/String;)[B", false);
        map.put("java.util.concurrent.atomic.AtomicMarkableReference.attemptMark(Ljava/lang/Object;Z)Z", false);
        map.put("java.util.logging.LogManager.demandSystemLogger(Ljava/lang/String;Ljava/lang/String;)Ljava/util/logging/Logger;", false);
        map.put("java.util.TreeMap$SubMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.TreeMap$DescendingSubMap.absLowest()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.regex.Pattern.compile(Ljava/lang/String;)Ljava/util/regex/Pattern;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.next()Ljava/lang/Object;", false);
        map.put("java.util.jar.Attributes$Name.toString()Ljava/lang/String;", true);
        map.put("java.util.BitSet.clear()V", false);
        map.put("java.util.concurrent.RunnableScheduledFuture.isCancelled()Z", false);
        map.put("java.util.Collections$CheckedCollection$1.<init>(Ljava/util/Collections$CheckedCollection;Ljava/util/Iterator;)V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.byteOffset(I)J", true);
        map.put("java.util.Timer.schedule(Ljava/util/TimerTask;Ljava/util/Date;J)V", false);
        map.put("java.util.JumboEnumSet$EnumSetIterator.hasNext()Z", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater.weakCompareAndSet(Ljava/lang/Object;JJ)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.findNodeFromTail(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)Z", true);
        map.put("java.util.regex.Matcher.toString()Ljava/lang/String;", false);
        map.put("java.util.HashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Calendar.setFieldsNormalized(I)V", false);
        map.put("java.util.prefs.AbstractPreferences.isUserNode()Z", true);
        map.put("java.util.LinkedList$ListItr.remove()V", false);
        map.put("java.util.logging.Logger.config(Ljava/lang/String;)V", true);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.reject(Ljava/lang/Runnable;)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.<init>(I)V", false);
        map.put("java.util.Queue.clear()V", false);
        map.put("java.util.zip.DeflaterInputStream.available()I", false);
        map.put("java.util.Collections$UnmodifiableMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.HashMap$Values.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.Locale$Builder.setLanguage(Ljava/lang/String;)Ljava/util/Locale$Builder;", false);
        map.put("java.util.IdentityHashMap$EntrySet.<init>(Ljava/util/IdentityHashMap;)V", false);
        map.put("java.util.SimpleTimeZone.setDSTSavings(I)V", false);
        map.put("java.util.Objects.toString(Ljava/lang/Object;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.headMap(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;", false);
        map.put("java.util.EnumMap$EntrySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.Collections$CheckedMap.<init>(Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;)V", false);
        map.put("java.util.PriorityQueue.initFromPriorityQueue(Ljava/util/PriorityQueue;)V", false);
        map.put("java.util.logging.Logging.setLoggerLevel(Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.Random.<clinit>()V", false);
        map.put("java.util.TreeMap$NavigableSubMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.ResourceBundle$CacheKey.clone()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.nextSeed()I", false);
        map.put("java.util.ArrayList.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.DelayQueue.<init>()V", false);
        map.put("java.util.TreeMap$KeyIterator.<init>(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.AbstractMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque$AbstractItr.firstNode()Ljava/util/concurrent/LinkedBlockingDeque$Node;", false);
        map.put("java.util.concurrent.ForkJoinTask.reinitialize()V", false);
        map.put("java.util.DualPivotQuicksort.doSort([FII)V", true);
        map.put("java.util.jar.JarVerifier$VerifierCodeSource.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.Date.before(Ljava/util/Date;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.access$400(Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Iter.hasNext()Z", true);
        map.put("java.util.concurrent.BlockingDeque.putLast(Ljava/lang/Object;)V", false);
        map.put("java.util.Collections$UnmodifiableMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.jar.Manifest$FastInputStream.fill()V", false);
        map.put("java.util.Calendar.<clinit>()V", false);
        map.put("java.util.prefs.WindowsPreferences.rootNativeHandle()I", false);
        map.put("java.util.jar.JarOutputStream.closeEntry()V", false);
        map.put("java.util.concurrent.Semaphore.hasQueuedThreads()Z", false);
        map.put("java.util.regex.Pattern.peekPastLine()I", false);
        map.put("java.util.ArrayDeque.getLast()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern.read()I", false);
        map.put("java.util.ArrayDeque$DeqIterator.<init>(Ljava/util/ArrayDeque;Ljava/util/ArrayDeque$1;)V", false);
        map.put("java.util.TaskQueue.removeMin()V", false);
        map.put("java.util.AbstractList.clear()V", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.Lock.lockInterruptibly()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.remove(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.ArrayList.trimToSize()V", false);
        map.put("java.util.ResourceBundle$Control.getControl(Ljava/util/List;)Ljava/util/ResourceBundle$Control;", false);
        map.put("java.util.LinkedList.<init>()V", false);
        map.put("java.util.concurrent.locks.LockSupport.setBlocker(Ljava/lang/Thread;Ljava/lang/Object;)V", false);
        map.put("java.util.GregorianCalendar.getFixedDateMonth1(Lsun/util/calendar/BaseCalendar$Date;J)J", false);
        map.put("java.util.ArrayList.clone()Ljava/lang/Object;", false);
        map.put("java.util.ArrayList.access$100(Ljava/util/ArrayList;)I", true);
        map.put("java.util.concurrent.ForkJoinPool.tryAwaitJoin(Ljava/util/concurrent/ForkJoinTask;)V", false);
        map.put("java.util.concurrent.TimeUnit$2.toNanos(J)J", false);
        map.put("java.util.Currency$1.run()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Exchanger$Slot.get()Ljava/lang/Object;", false);
        map.put("java.util.RegularEnumSet.containsAll(Ljava/util/Collection;)Z", true);
        map.put("java.util.regex.Matcher.groupCount()I", true);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegCreateKeyEx1(I[B)[I", false);
        map.put("java.util.TimSort.ensureCapacity(I)[Ljava/lang/Object;", false);
        map.put("java.util.ServiceLoader$LazyIterator.<init>(Ljava/util/ServiceLoader;Ljava/lang/Class;Ljava/lang/ClassLoader;)V", false);
        map.put("java.util.ResourceBundle$Control.newBundle(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Z)Ljava/util/ResourceBundle;", false);
        map.put("java.util.Hashtable.<init>()V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$7.isSatisfiedBy(I)Z", true);
        map.put("java.util.Date.getTimeImpl()J", false);
        map.put("java.util.ArrayDeque.element()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.setMaximumPoolSize(I)V", false);
        map.put("java.util.Vector.listIterator(I)Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.CyclicBarrier.breakBarrier()V", false);
        map.put("java.util.concurrent.BrokenBarrierException.<init>()V", false);
        map.put("java.util.WeakHashMap$KeyIterator.<init>(Ljava/util/WeakHashMap;Ljava/util/WeakHashMap$1;)V", false);
        map.put("java.util.prefs.Preferences.sync()V", false);
        map.put("java.util.Collections$CheckedList.<init>(Ljava/util/List;Ljava/lang/Class;)V", false);
        map.put("java.util.Arrays.sort([Ljava/lang/Object;)V", false);
        map.put("java.util.Locale.formatList([Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.Arrays.equals([Ljava/lang/Object;[Ljava/lang/Object;)Z", true);
        map.put("java.util.Calendar.<init>(Ljava/util/TimeZone;Ljava/util/Locale;)V", false);
        map.put("java.util.zip.Adler32.update([BII)V", false);
        map.put("java.util.logging.LogManager$LoggerContext.<init>(Ljava/util/logging/LogManager$1;)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock.hasQueuedThread(Ljava/lang/Thread;)Z", false);
        map.put("java.util.zip.Deflater.<init>()V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.putLast(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.fullyRelease(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)J", false);
        map.put("java.util.XMLUtils.load(Ljava/util/Properties;Ljava/io/InputStream;)V", false);
        map.put("java.util.jar.Manifest.clear()V", false);
        map.put("java.util.TreeMap.lowerKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.prefs.WindowsPreferences.openKey([BII)I", false);
        map.put("java.util.Currency.access$400(Ljava/lang/String;Ljava/lang/Throwable;)V", false);
        map.put("java.util.concurrent.SynchronousQueue.<init>()V", false);
        map.put("java.util.ResourceBundle$1.getKeys()Ljava/util/Enumeration;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Formatter$FormatSpecifier.conversion(Ljava/lang/String;)C", false);
        map.put("java.util.concurrent.ForkJoinPool.awaitTermination(JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.<init>(Ljava/util/SortedMap;)V", false);
        map.put("java.util.RandomAccessSubList.<init>(Ljava/util/AbstractList;II)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.subSet(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.zip.InflaterInputStream.available()I", false);
        map.put("java.util.concurrent.DelayQueue$Itr.remove()V", false);
        map.put("java.util.Collections$CheckedMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.IdentityHashMap$KeySet.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.ResourceBundle$Control$CandidateListCache.<init>(Ljava/util/ResourceBundle$1;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.ServiceLoader$LazyIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$DescendingKeyIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.IdentityHashMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.prefs.AbstractPreferences.putBoolean(Ljava/lang/String;Z)V", false);
        map.put("java.util.Locale.access$600(Ljava/util/Locale;)Lsun/util/locale/BaseLocale;", true);
        map.put("java.util.TreeMap$NavigableSubMap.ceilingEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.pollLastEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.prefs.InvalidPreferencesFormatException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.Timer.sched(Ljava/util/TimerTask;JJ)V", false);
        map.put("java.util.GregorianCalendar.getFixedDateJan1(Lsun/util/calendar/BaseCalendar$Date;J)J", false);
        map.put("java.util.zip.Deflater.setInput([BII)V", false);
        map.put("java.util.Collections$EmptyList.hashCode()I", true);
        map.put("java.util.zip.DeflaterOutputStream.<init>(Ljava/io/OutputStream;Ljava/util/zip/Deflater;Z)V", false);
        map.put("java.util.Scanner.hasNext(Ljava/lang/String;)Z", false);
        map.put("java.util.TreeSet.lower(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.IdentityHashMap$KeySet.<init>(Ljava/util/IdentityHashMap;)V", false);
        map.put("java.util.concurrent.TimeUnit$6.toSeconds(J)J", false);
        map.put("java.util.WeakHashMap$KeyIterator.nextEntry()Ljava/util/WeakHashMap$Entry;", false);
        map.put("java.util.jar.JarOutputStream.get16([BI)I", true);
        map.put("java.util.concurrent.atomic.AtomicInteger.<init>()V", true);
        map.put("java.util.IdentityHashMap$EntryIterator$Entry.access$802(Ljava/util/IdentityHashMap$EntryIterator$Entry;I)I", false);
        map.put("java.util.Hashtable.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.Arrays.binarySearch([SIIS)I", true);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapEntryIterator.removeAscending()V", false);
        map.put("java.util.Collections$SynchronizedSortedMap.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.prefs.WindowsPreferences.toJavaAlt64Name(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.fullTryAcquireShared(Ljava/lang/Thread;)I", false);
        map.put("java.util.AbstractMap$SimpleEntry.hashCode()I", false);
        map.put("java.util.Collections.sort(Ljava/util/List;)V", false);
        map.put("java.util.logging.ConsoleHandler.setFilter(Ljava/util/logging/Filter;)V", false);
        map.put("java.util.XMLUtils.<init>()V", true);
        map.put("java.util.Collections$EmptyEnumeration.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.logging.LogManager.access$1200()Ljava/util/logging/Level;", true);
        map.put("java.util.Collections$SynchronizedSortedMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.TreeMap.<init>(Ljava/util/Comparator;)V", false);
        map.put("java.util.DualPivotQuicksort.sort([FIIZ)V", true);
        map.put("java.util.zip.GZIPOutputStream.<init>(Ljava/io/OutputStream;I)V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.interruptWorkers()V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.lazySet(II)V", false);
        map.put("java.util.Date.getCalendarSystem(Lsun/util/calendar/BaseCalendar$Date;)Lsun/util/calendar/BaseCalendar;", false);
        map.put("java.util.UUID.getLeastSignificantBits()J", true);
        map.put("java.util.AbstractMap$1.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.ArrayBlockingQueue.peek()Ljava/lang/Object;", false);
        map.put("java.util.logging.LogRecord.setThreadID(I)V", false);
        map.put("java.util.Formatter$FormatSpecifier.printCharacter(Ljava/lang/Object;)V", false);
        map.put("java.util.jar.JarFile.newEntry(Ljava/util/zip/ZipEntry;)Ljava/util/jar/JarEntry;", false);
        map.put("java.util.Date.normalize(Lsun/util/calendar/BaseCalendar$Date;)Lsun/util/calendar/BaseCalendar$Date;", false);
        map.put("java.util.zip.ZipInputStream.readLOC()Ljava/util/zip/ZipEntry;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.isQueued(Ljava/lang/Thread;)Z", false);
        map.put("java.util.logging.Level$KnownLevel.matches(Ljava/util/logging/Level;)Ljava/util/logging/Level$KnownLevel;", true);
        map.put("java.util.NavigableMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.prefs.Preferences.<clinit>()V", false);
        map.put("java.util.JumboEnumSet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.TreeMap.<init>(Ljava/util/Map;)V", false);
        map.put("java.util.concurrent.ForkJoinPool.checkPermission()V", false);
        map.put("java.util.SubList.size()I", false);
        map.put("java.util.logging.SocketHandler.connect()V", false);
        map.put("java.util.Collections$EmptyMap.readResolve()Ljava/lang/Object;", true);
        map.put("java.util.concurrent.Semaphore$NonfairSync.tryAcquireShared(I)I", false);
        map.put("java.util.Set.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Vector.grow(I)V", false);
        map.put("java.util.ResourceBundle$RBClassLoader$1.run()Ljava/lang/Object;", false);
        map.put("java.util.Collections$ReverseComparator.<init>()V", true);
        map.put("java.util.EnumMap$KeyIterator.hasNext()Z", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue$Itr.hasNext()Z", true);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentHashMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.logging.LogManager$4.<init>(Ljava/util/logging/LogManager;Ljava/lang/String;Ljava/util/logging/Logger;)V", false);
        map.put("java.util.logging.LogManager$RootLogger.addHandler(Ljava/util/logging/Handler;)V", false);
        map.put("java.util.concurrent.Executors$DefaultThreadFactory.newThread(Ljava/lang/Runnable;)Ljava/lang/Thread;", false);
        map.put("java.util.Collections$EmptyList.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", true);
        map.put("java.util.regex.Pattern$GroupRef.<init>(Ljava/util/regex/Pattern$GroupHead;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$ValueIterator.<init>(Ljava/util/concurrent/ConcurrentSkipListMap;)V", false);
        map.put("java.util.PropertyResourceBundle.getKeys()Ljava/util/Enumeration;", false);
        map.put("java.util.zip.ZipOutputStream.version(Ljava/util/zip/ZipEntry;)I", false);
        map.put("java.util.zip.ZipConstants64.<init>()V", true);
        map.put("java.util.JapaneseImperialCalendar.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.JapaneseImperialCalendar.getCalendarDate(J)Lsun/util/calendar/LocalGregorianCalendar$Date;", false);
        map.put("java.util.AbstractList$ListItr.checkForComodification()V", false);
        map.put("java.util.regex.Pattern.expr(Ljava/util/regex/Pattern$Node;)Ljava/util/regex/Pattern$Node;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$15.isSatisfiedBy(I)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.owns(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z", true);
        map.put("java.util.TreeSet.pollLast()Ljava/lang/Object;", false);
        map.put("java.util.SimpleTimeZone.packTimes()[I", true);
        map.put("java.util.jar.Attributes.<init>()V", false);
        map.put("java.util.zip.InflaterInputStream.read([BII)I", false);
        map.put("java.util.SimpleTimeZone.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.headMap(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.concurrent.RecursiveAction.exec()Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.replace(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.Executors.callable(Ljava/security/PrivilegedAction;)Ljava/util/concurrent/Callable;", false);
        map.put("java.util.ResourceBundle$CacheKey.setLocale(Ljava/util/Locale;)Ljava/util/ResourceBundle$CacheKey;", false);
        map.put("java.util.Stack.add(ILjava/lang/Object;)V", false);
        map.put("java.util.concurrent.Semaphore.acquire(I)V", false);
        map.put("java.util.concurrent.Executors$PrivilegedThreadFactory$1.<init>(Ljava/util/concurrent/Executors$PrivilegedThreadFactory;Ljava/lang/Runnable;)V", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.compareAndSetRaw(JLjava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.Arrays.hashCode([Ljava/lang/Object;)I", false);
        map.put("java.util.GregorianCalendar.clear()V", false);
        map.put("java.util.TreeMap$NavigableSubMap.subMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.ResourceBundle.handleKeySet()Ljava/util/Set;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$Node.<init>(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.findPredecessorOfLast()Ljava/util/concurrent/ConcurrentSkipListMap$Node;", false);
        map.put("java.util.Arrays.copyOfRange([ZII)[Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.<clinit>()V", false);
        map.put("java.util.zip.InflaterInputStream.fill()V", false);
        map.put("java.util.HashSet.<clinit>()V", false);
        map.put("java.util.GregorianCalendar.getFixedDate(Lsun/util/calendar/BaseCalendar;II)J", false);
        map.put("java.util.IdentityHashMap$KeySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.getOwner()Ljava/lang/Thread;", false);
        map.put("java.util.Currency.info(Ljava/lang/String;Ljava/lang/Throwable;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt()Z", false);
        map.put("java.util.SortedMap.size()I", false);
        map.put("java.util.concurrent.ConcurrentHashMap$HashIterator.<init>(Ljava/util/concurrent/ConcurrentHashMap;)V", false);
        map.put("java.util.LinkedHashMap.<init>()V", false);
        map.put("java.util.concurrent.TimeUnit.toNanos(J)J", false);
        map.put("java.util.ListIterator.previousIndex()I", false);
        map.put("java.util.HashMap$ValueIterator.<init>(Ljava/util/HashMap;)V", false);
        map.put("java.util.IdentityHashMap$ValueIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.Hashtable$ValueCollection.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.HashMap.hash(Ljava/lang/Object;)I", false);
        map.put("java.util.Collections.<clinit>()V", false);
        map.put("java.util.TreeMap$Values.size()I", true);
        map.put("java.util.Calendar.compareTo(J)I", false);
        map.put("java.util.concurrent.ForkJoinTask.<clinit>()V", false);
        map.put("java.util.Collections$AsLIFOQueue.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.LinkedList.remove()Ljava/lang/Object;", false);
        map.put("java.util.Properties.stringPropertyNames()Ljava/util/Set;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$ValueIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ExecutorCompletionService.take()Ljava/util/concurrent/Future;", false);
        map.put("java.util.prefs.AbstractPreferences.childSpi(Ljava/lang/String;)Ljava/util/prefs/AbstractPreferences;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.isLocked()Z", false);
        map.put("java.util.zip.InflaterInputStream.read()I", false);
        map.put("java.util.HashMap.getForNullKey()Ljava/lang/Object;", true);
        map.put("java.util.Observable.countObservers()I", true);
        map.put("java.util.Deque.clear()V", false);
        map.put("java.util.prefs.Preferences$2.<init>()V", true);
        map.put("java.util.concurrent.ThreadPoolExecutor.processWorkerExit(Ljava/util/concurrent/ThreadPoolExecutor$Worker;Z)V", false);
        map.put("java.util.logging.FileHandler.<clinit>()V", false);
        map.put("java.util.logging.Logger.fine(Ljava/lang/String;)V", true);
        map.put("java.util.TreeMap.getLastEntry()Ljava/util/TreeMap$Entry;", true);
        map.put("java.util.NavigableSet.headSet(Ljava/lang/Object;Z)Ljava/util/NavigableSet;", false);
        map.put("java.util.Comparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.addAndGet(II)I", false);
        map.put("java.util.concurrent.DelayQueue.put(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.TimeUnit$5.toSeconds(J)J", false);
        map.put("java.util.concurrent.CyclicBarrier.<init>(ILjava/lang/Runnable;)V", false);
        map.put("java.util.concurrent.ForkJoinPool.isQuiescent()Z", true);
        map.put("java.util.Arrays.toString([F)Ljava/lang/String;", false);
        map.put("java.util.regex.Pattern.cursor()I", true);
        map.put("java.util.Random.<init>()V", false);
        map.put("java.util.regex.UnicodeProp.values()[Ljava/util/regex/UnicodeProp;", false);
        map.put("java.util.Collections$UnmodifiableCollection$1.remove()V", false);
        map.put("java.util.regex.ASCII.toUpper(I)I", true);
        map.put("java.util.Vector$ListItr.previous()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Executors$DelegatedScheduledExecutorService.scheduleAtFixedRate(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", false);
        map.put("java.util.regex.Pattern$Category.<init>(I)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeyIterator.<init>(Ljava/util/concurrent/ConcurrentSkipListMap;)V", false);
        map.put("java.util.SimpleTimeZone.getOffset(IIIIII)I", false);
        map.put("java.util.concurrent.Semaphore$Sync.reducePermits(I)V", false);
        map.put("java.util.Calendar.setFieldsComputed(I)V", false);
        map.put("java.util.ResourceBundle$NoFallbackControl.access$1100()Ljava/util/ResourceBundle$Control;", true);
        map.put("java.util.ServiceConfigurationError.getCause()Ljava/lang/Throwable;", false);
        map.put("java.util.AbstractMap$SimpleEntry.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.zip.DeflaterInputStream.ensureOpen()V", false);
        map.put("java.util.TreeSet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.regex.Pattern.matches(Ljava/lang/String;Ljava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.ForkJoinTask.inForkJoinPool()Z", false);
        map.put("java.util.concurrent.locks.Condition.signalAll()V", false);
        map.put("java.util.zip.ZipFile.access$1400(JJJ[BII)I", false);
        map.put("java.util.Vector.copyInto([Ljava/lang/Object;)V", false);
        map.put("java.util.jar.Manifest$FastInputStream.peek()B", false);
        map.put("java.util.HashMap.newEntryIterator()Ljava/util/Iterator;", false);
        map.put("java.util.LinkedList.linkLast(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.<clinit>()V", false);
        map.put("java.util.Formatter$FormatSpecifier$BigDecimalLayout.scale()I", true);
        map.put("java.util.ArrayDeque.peek()Ljava/lang/Object;", true);
        map.put("java.util.Formatter$BigDecimalLayoutForm.valueOf(Ljava/lang/String;)Ljava/util/Formatter$BigDecimalLayoutForm;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections$EmptyEnumeration.<clinit>()V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$DiscardPolicy.<init>()V", true);
        map.put("java.util.IdentityHashMap$KeyIterator.<init>(Ljava/util/IdentityHashMap;Ljava/util/IdentityHashMap$1;)V", false);
        map.put("java.util.TaskQueue.fixUp(I)V", true);
        map.put("java.util.Vector.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry.getKey()Ljava/lang/Object;", false);
        map.put("java.util.jar.JarEntry.setCrc(J)V", false);
        map.put("java.util.AbstractList.addAll(ILjava/util/Collection;)Z", false);
        map.put("java.util.prefs.Base64.<init>()V", true);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.compareAndSetTail(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)Z", false);
        map.put("java.util.concurrent.LinkedTransferQueue.xfer(Ljava/lang/Object;ZIJ)Ljava/lang/Object;", false);
        map.put("java.util.LinkedList.pop()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentHashMap.replace(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.jar.JarVerifier.getCodeSigners(Ljava/lang/String;)[Ljava/security/CodeSigner;", true);
        map.put("java.util.concurrent.ConcurrentSkipListSet.pollFirst()Ljava/lang/Object;", false);
        map.put("java.util.Scanner.<init>(Ljava/io/File;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$EntryIterator.<init>(Ljava/util/concurrent/ConcurrentSkipListMap;)V", false);
        map.put("java.util.jar.JarFile$2.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.Hashtable.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicStampedReference.get([I)Ljava/lang/Object;", true);
        map.put("java.util.Random.nextLong()J", false);
        map.put("java.util.TreeMap.readTreeSet(ILjava/io/ObjectInputStream;Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node.<init>()V", true);
        map.put("java.util.jar.JarFile.getCodeSources(Ljava/net/URL;)[Ljava/security/CodeSource;", false);
        map.put("java.util.List.get(I)Ljava/lang/Object;", false);
        map.put("java.util.LinkedList.peek()Ljava/lang/Object;", true);
        map.put("java.util.regex.Pattern$SliceU.<init>([I)V", false);
        map.put("java.util.HashMap$ValueIterator.nextEntry()Ljava/util/HashMap$Entry;", false);
        map.put("java.util.concurrent.ForkJoinPool.<init>()V", false);
        map.put("java.util.Scanner.useRadix(I)Ljava/util/Scanner;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.setState(J)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueueLength()I", true);
        map.put("java.util.Hashtable$Entry.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.TimeUnit$7.toMillis(J)J", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.zip.Inflater.finalize()V", false);
        map.put("java.util.LinkedList.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.SynchronousQueue$TransferStack$SNode.<clinit>()V", false);
        map.put("java.util.TreeMap$DescendingSubMap.subFloor(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.Vector.hashCode()I", false);
        map.put("java.util.Date.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.List.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.BlockingDeque.removeLastOccurrence(Ljava/lang/Object;)Z", false);
        map.put("java.util.List.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap$AscendingSubMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.AbstractCollection.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.jar.Pack200$Unpacker.unpack(Ljava/io/File;Ljava/util/jar/JarOutputStream;)V", false);
        map.put("java.util.Collections$SynchronizedSortedMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.JapaneseImperialCalendar.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.TreeMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.AbstractMap$2.<init>(Ljava/util/AbstractMap;)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque$AbstractItr.remove()V", false);
        map.put("java.util.PriorityQueue.removeAt(I)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.pollFirst()Ljava/lang/Object;", false);
        map.put("java.util.TreeMap.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.lowerEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.concurrent.Executors$DelegatedExecutorService.isTerminated()Z", false);
        map.put("java.util.regex.UnicodeProp$6.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.ResourceBundle$1.toString()Ljava/lang/String;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.logging.LogManager$5.run()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern.newSlice([IIZ)Ljava/util/regex/Pattern$Node;", false);
        map.put("java.util.jar.JarEntry.<init>(Ljava/util/zip/ZipEntry;)V", false);
        map.put("java.util.ResourceBundle.getBundle(Ljava/lang/String;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;", false);
        map.put("java.util.WeakHashMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.logging.MemoryHandler.isLoggable(Ljava/util/logging/LogRecord;)Z", false);
        map.put("java.util.GregorianCalendar.isFullyNormalized()Z", false);
        map.put("java.util.ResourceBundle.access$200()Ljava/lang/ref/ReferenceQueue;", true);
        map.put("java.util.Arrays.copyOf([JI)[J", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.pop()Ljava/lang/Object;", false);
        map.put("java.util.Vector$ListItr.hasPrevious()Z", true);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.casTail(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.fullCheck(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue.offer(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.TreeMap$NavigableSubMap.inClosedRange(Ljava/lang/Object;)Z", false);
        map.put("java.util.zip.ZipFile.access$1100(J)J", false);
        map.put("java.util.Currency.getCurrencyCode()Ljava/lang/String;", true);
        map.put("java.util.concurrent.BlockingDeque.takeFirst()Ljava/lang/Object;", false);
        map.put("java.util.Collections$CheckedCollection.clear()V", false);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegQueryInfoKey(I)[I", false);
        map.put("java.util.logging.Level.getLocalizedLevelName()Ljava/lang/String;", false);
        map.put("java.util.concurrent.TimeUnit$6.x(JJJ)J", false);
        map.put("java.util.ArrayDeque.delete(I)Z", false);
        map.put("java.util.Scanner.delimiter()Ljava/util/regex/Pattern;", true);
        map.put("java.util.prefs.AbstractPreferences.access$000(Ljava/util/prefs/AbstractPreferences;)Ljava/util/prefs/AbstractPreferences;", true);
        map.put("java.util.zip.ZipInputStream.get32([BI)J", true);
        map.put("java.util.Vector.remove(I)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.compareAndSetNext(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)Z", false);
        map.put("java.util.Calendar.getTimeInMillis()J", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections$AsLIFOQueue.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.NavigableMap.size()I", false);
        map.put("java.util.Collections$EmptyListIterator.<clinit>()V", false);
        map.put("java.util.Collections$EmptyList.get(I)Ljava/lang/Object;", false);
        map.put("java.util.Arrays.equals([C[C)Z", true);
        map.put("java.util.regex.PatternSyntaxException.<init>(Ljava/lang/String;Ljava/lang/String;I)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.isFair()Z", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.addIndex(Ljava/util/concurrent/ConcurrentSkipListMap$Index;Ljava/util/concurrent/ConcurrentSkipListMap$HeadIndex;I)V", false);
        map.put("java.util.concurrent.ForkJoinTask$AdaptedCallable.getRawResult()Ljava/lang/Object;", true);
        map.put("java.util.HashMap.putForNullKey(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.LinkedList.hashCode()I", false);
        map.put("java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory.newThread(Ljava/util/concurrent/ForkJoinPool;)Ljava/util/concurrent/ForkJoinWorkerThread;", false);
        map.put("java.util.logging.FileHandler.setLevel(Ljava/util/logging/Level;)V", false);
        map.put("java.util.zip.ZipFile.getNextEntry(JI)J", false);
        map.put("java.util.regex.UnicodeProp$11.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Values.isEmpty()Z", false);
        map.put("java.util.AbstractQueue.poll()Ljava/lang/Object;", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.SimpleTimeZone.<clinit>()V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueuedThreads()Ljava/util/Collection;", false);
        map.put("java.util.Arrays.copyOfRange([BII)[B", false);
        map.put("java.util.Random.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.Collections$UnmodifiableSortedMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.remainingCapacity()I", true);
        map.put("java.util.regex.Pattern.ref(I)Ljava/util/regex/Pattern$Node;", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.pollTask()Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.regex.Pattern.getClass(I)I", false);
        map.put("java.util.AbstractList$ListItr.set(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock.isHeldByCurrentThread()Z", false);
        map.put("java.util.TimSort.mergeForceCollapse()V", false);
        map.put("java.util.logging.LogManager$LoggerContext.processParentHandlers(Ljava/util/logging/Logger;Ljava/lang/String;)V", true);
        map.put("java.util.Arrays$ArrayList.set(ILjava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.prefs.AbstractPreferences.exportNode(Ljava/io/OutputStream;)V", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.dequeue()Ljava/lang/Object;", false);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegSetValueEx(I[B[B)I", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.<init>()V", false);
    }

    private static void m2() {

        map.put("java.util.Hashtable.access$608(Ljava/util/Hashtable;)I", false);
        map.put("java.util.Calendar.isLenient()Z", true);
        map.put("java.util.ArrayDeque$DescendingIterator.<init>(Ljava/util/ArrayDeque;Ljava/util/ArrayDeque$1;)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock.getQueueLength()I", false);
        map.put("java.util.RegularEnumSet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections$UnmodifiableSortedSet.tailSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.ServiceLoader$1.next()Ljava/lang/Object;", false);
        map.put("java.util.Set.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.drainTasksTo(Ljava/util/Collection;)I", false);
        map.put("java.util.StringTokenizer.hasMoreTokens()Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.tryLock()Z", false);
        map.put("java.util.concurrent.Semaphore$FairSync.hasQueuedPredecessors()Z", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.descendingIterator()Ljava/util/Iterator;", false);
        map.put("java.util.regex.Pattern$Loop.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.GregorianCalendar.<init>()V", false);
        map.put("java.util.IdentityHashMap$Values.<init>(Ljava/util/IdentityHashMap;)V", false);
        map.put("java.util.regex.Pattern.readEscaped()I", false);
        map.put("java.util.zip.ZipOutputStream.write([BII)V", false);
        map.put("java.util.HashMap$HashIterator.<init>(Ljava/util/HashMap;)V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory.<init>(Ljava/util/regex/Pattern$1;)V", true);
        map.put("java.util.zip.ZipEntry.<init>()V", false);
        map.put("java.util.Scanner.next(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.TreeMap$ValueIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.EnumSet.<init>(Ljava/lang/Class;[Ljava/lang/Enum;)V", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.getAndDecrement()I", false);
        map.put("java.util.Hashtable$EntrySet.add(Ljava/util/Map$Entry;)Z", false);
        map.put("java.util.Collections$CheckedSortedMap.lastKey()Ljava/lang/Object;", false);
        map.put("java.util.Set.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.Formatter.<init>(Ljava/lang/Appendable;Ljava/util/Locale;)V", false);
        map.put("java.util.concurrent.Phaser.unarrivedOf(J)I", true);
        map.put("java.util.ConcurrentModificationException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWIterator.set(Ljava/lang/Object;)V", false);
        map.put("java.util.ArrayList$SubList$1.previous()Ljava/lang/Object;", false);
        map.put("java.util.AbstractMap$SimpleImmutableEntry.getValue()Ljava/lang/Object;", true);
        map.put("java.util.InvalidPropertiesFormatException.<init>(Ljava/lang/Throwable;)V", false);
        map.put("java.util.BitSet.intersects(Ljava/util/BitSet;)Z", true);
        map.put("java.util.concurrent.CopyOnWriteArrayList.getArray()[Ljava/lang/Object;", true);
        map.put("java.util.regex.Pattern$7.isSatisfiedBy(I)Z", false);
        map.put("java.util.concurrent.BlockingDeque.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.afterExecute(Ljava/lang/Runnable;Ljava/lang/Throwable;)V", true);
        map.put("java.util.logging.SimpleFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;", false);
        map.put("java.util.IdentityHashMap$IdentityHashMapIterator.nextIndex()I", false);
        map.put("java.util.List.listIterator()Ljava/util/ListIterator;", false);
        map.put("java.util.ResourceBundle.findBundle(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/List;ILjava/util/ResourceBundle$Control;Ljava/util/ResourceBundle;)Ljava/util/ResourceBundle;", false);
        map.put("java.util.concurrent.TimeUnit$5.x(JJJ)J", false);
        map.put("java.util.SubList$1.add(Ljava/lang/Object;)V", false);
        map.put("java.util.regex.Pattern$Utype.<init>(Ljava/util/regex/UnicodeProp;)V", false);
        map.put("java.util.concurrent.ConcurrentHashMap$KeyIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.keySet()Ljava/util/NavigableSet;", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.getExclusiveOwnerThread()Ljava/lang/Thread;", false);
        map.put("java.util.concurrent.CyclicBarrier.isBroken()Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(I)V", false);
        map.put("java.util.HashMap$Values.size()I", true);
        map.put("java.util.concurrent.atomic.AtomicLongArray.compareAndSetRaw(JJJ)Z", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(I)Z", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.setKeepAliveTime(JLjava/util/concurrent/TimeUnit;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.signal()V", false);
        map.put("java.util.concurrent.ConcurrentHashMap.size()I", false);
        map.put("java.util.ArrayList$SubList.remove(I)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.unlink(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)V", false);
        map.put("java.util.TreeMap$KeySet.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.TreeMap.getEntry(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.zip.DeflaterOutputStream.deflate()V", false);
        map.put("java.util.concurrent.atomic.AtomicBoolean.lazySet(Z)V", false);
        map.put("java.util.SubList.set(ILjava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Collections$CheckedRandomAccessList.subList(II)Ljava/util/List;", false);
        map.put("java.util.ArrayDeque.allocateElements(I)V", false);
        map.put("java.util.concurrent.TimeUnit.timedWait(Ljava/lang/Object;J)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasWaiters(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)Z", false);
        map.put("java.util.JapaneseImperialCalendar.isFullyNormalized()Z", false);
        map.put("java.util.Calendar.before(Ljava/lang/Object;)Z", false);
        map.put("java.util.ResourceBundle$RBClassLoader.<init>(Ljava/util/ResourceBundle$1;)V", false);
        map.put("java.util.regex.Pattern$Curly.<init>(Ljava/util/regex/Pattern$Node;III)V", false);
        map.put("java.util.regex.UnicodeProp$17.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.logging.XMLFormatter.getHead(Ljava/util/logging/Handler;)Ljava/lang/String;", false);
        map.put("java.util.logging.Level$KnownLevel.findByLocalizedLevelName(Ljava/lang/String;)Ljava/util/logging/Level$KnownLevel;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Values.clear()V", false);
        map.put("java.util.Scanner.<init>(Ljava/nio/file/Path;)V", false);
        map.put("java.util.concurrent.BlockingDeque.poll()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.doRemoveLastEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.jar.Attributes.clone()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$Caret.<init>()V", false);
        map.put("java.util.Scanner.decimalPattern()Ljava/util/regex/Pattern;", false);
        map.put("java.util.jar.JarFile$2.<init>(Ljava/util/jar/JarFile;)V", false);
        map.put("java.util.HashMap.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.Collections.checkedCollection(Ljava/util/Collection;Ljava/lang/Class;)Ljava/util/Collection;", false);
        map.put("java.util.logging.LogRecord.getParameters()[Ljava/lang/Object;", true);
        map.put("java.util.HashMap$EntrySet.size()I", true);
        map.put("java.util.concurrent.ForkJoinPool.addSubmission(Ljava/util/concurrent/ForkJoinTask;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.schedule(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", false);
        map.put("java.util.MissingFormatArgumentException.getMessage()Ljava/lang/String;", false);
        map.put("java.util.regex.Pattern$LastMatch.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.firstEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.logging.Formatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;", false);
        map.put("java.util.zip.Adler32$1.<init>()V", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.headMap(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.prefs.AbstractPreferences.getDouble(Ljava/lang/String;D)D", false);
        map.put("java.util.regex.UnicodeProp.<init>(Ljava/lang/String;ILjava/util/regex/UnicodeProp$1;)V", false);
        map.put("java.util.NavigableSet.headSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.LinkedList$ListItr.set(Ljava/lang/Object;)V", false);
        map.put("java.util.Locale$LocaleKey.access$200(Ljava/util/Locale$LocaleKey;)Lsun/util/locale/BaseLocale;", true);
        map.put("java.util.logging.Logger.setupResourceInfo(Ljava/lang/String;Ljava/lang/Class;)V", false);
        map.put("java.util.jar.JarFile.close()V", false);
        map.put("java.util.concurrent.Phaser.<init>(I)V", false);
        map.put("java.util.logging.Logger.warning(Ljava/lang/String;)V", true);
        map.put("java.util.Currency$CurrencyNameGetter.access$500()Ljava/util/Currency$CurrencyNameGetter;", true);
        map.put("java.util.logging.Logger.getAnonymousLogger()Ljava/util/logging/Logger;", false);
        map.put("java.util.concurrent.RunnableFuture.run()V", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Segment.clear()V", false);
        map.put("java.util.Dictionary.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Locale.getISO3Code(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.Arrays.toString([D)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.navigableKeySet()Ljava/util/NavigableSet;", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.get()I", true);
        map.put("java.util.Collections$UnmodifiableList.<init>(Ljava/util/List;)V", false);
        map.put("java.util.NavigableSet.tailSet(Ljava/lang/Object;Z)Ljava/util/NavigableSet;", false);
        map.put("java.util.zip.Adler32.getValue()J", true);
        map.put("java.util.Deque.poll()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ForkJoinTask.reportResult()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.TimeUnit$5.toMillis(J)J", false);
        map.put("java.util.logging.SocketHandler.setEncoding(Ljava/lang/String;)V", false);
        map.put("java.util.ResourceBundle$BundleReference.get()Ljava/lang/Object;", false);
        map.put("java.util.AbstractList.subList(II)Ljava/util/List;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.reject(Ljava/lang/Runnable;)V", false);
        map.put("java.util.logging.Logger.getUseParentHandlers()Z", true);
        map.put("java.util.regex.Pattern$Curly.match2(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)Z", false);
        map.put("java.util.NavigableMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.IdentityHashMap.access$010(Ljava/util/IdentityHashMap;)I", false);
        map.put("java.util.RegularEnumSet.complement()V", false);
        map.put("java.util.concurrent.FutureTask.done()V", true);
        map.put("java.util.SubList.access$100(Ljava/util/SubList;)Ljava/util/AbstractList;", true);
        map.put("java.util.ArrayDeque.access$200(Ljava/util/ArrayDeque;)I", true);
        map.put("java.util.concurrent.ConcurrentHashMap.<init>(IFI)V", false);
        map.put("java.util.zip.ZipFile.getComment()Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.EnumSet.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.zip.Adler32.update(Ljava/nio/ByteBuffer;)V", false);
        map.put("java.util.concurrent.atomic.AtomicLong.getAndSet(J)J", false);
        map.put("java.util.Locale$Cache.<init>()V", false);
        map.put("java.util.concurrent.Executors.unconfigurableScheduledExecutorService(Ljava/util/concurrent/ScheduledExecutorService;)Ljava/util/concurrent/ScheduledExecutorService;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.newCondition()Ljava/util/concurrent/locks/Condition;", false);
        map.put("java.util.regex.Matcher.hasTransparentBounds()Z", true);
        map.put("java.util.Random.nextInt(I)I", false);
        map.put("java.util.logging.SocketHandler.isLoggable(Ljava/util/logging/LogRecord;)Z", false);
        map.put("java.util.EnumMap$EntryIterator$Entry.hashCode()I", false);
        map.put("java.util.prefs.Preferences.getBoolean(Ljava/lang/String;Z)Z", false);
        map.put("java.util.PriorityQueue.access$200(Ljava/util/PriorityQueue;)I", true);
        map.put("java.util.zip.ZipFile.size()I", false);
        map.put("java.util.concurrent.ForkJoinPool$InvokeAll.compute()V", false);
        map.put("java.util.prefs.AbstractPreferences.getByteArray(Ljava/lang/String;[B)[B", false);
        map.put("java.util.DualPivotQuicksort.<init>()V", true);
        map.put("java.util.logging.Logger.removeHandler(Ljava/util/logging/Handler;)V", false);
        map.put("java.util.Scanner.nextBoolean()Z", false);
        map.put("java.util.prefs.XmlSupport.importMap(Ljava/io/InputStream;Ljava/util/Map;)V", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.toString()Ljava/lang/String;", false);
        map.put("java.util.JapaneseImperialCalendar.monthLength(I)I", false);
        map.put("java.util.zip.ZipOutputStream.close()V", false);
        map.put("java.util.Hashtable$KeySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.Formatter$FixedString.toString()Ljava/lang/String;", true);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.get(Ljava/lang/Object;)I", false);
        map.put("java.util.AbstractMap.<init>()V", false);
        map.put("java.util.TreeMap.isEmpty()Z", false);
        map.put("java.util.LinkedHashMap$ValueIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.HashMap$EntryIterator.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.siftDownComparable(ILjava/lang/Object;[Ljava/lang/Object;I)V", false);
        map.put("java.util.TreeMap$Values.<init>(Ljava/util/TreeMap;)V", false);
        map.put("java.util.Locale$LocaleNameGetter.getObject(Ljava/util/spi/LocaleNameProvider;Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", false);
        map.put("java.util.Stack.elements()Ljava/util/Enumeration;", false);
        map.put("java.util.concurrent.ExecutorCompletionService.newTaskFor(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/RunnableFuture;", false);
        map.put("java.util.concurrent.ConcurrentHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.takeLast()Ljava/lang/Object;", false);
        map.put("java.util.ArrayList.outOfBoundsMsg(I)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.lock()V", false);
        map.put("java.util.concurrent.Future.cancel(Z)Z", false);
        map.put("java.util.concurrent.CompletionService.submit(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.Currency.access$300(Ljava/util/regex/Pattern;Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ConcurrentHashMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.jar.JarVerifier$VerifierStream.read()I", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.heapify()V", false);
        map.put("java.util.SortedSet.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.navigableKeySet()Ljava/util/NavigableSet;", false);
        map.put("java.util.regex.Matcher.reset()Ljava/util/regex/Matcher;", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.<init>(IZLjava/util/Collection;)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue.spinsFor(Ljava/util/concurrent/LinkedTransferQueue$Node;Z)I", true);
        map.put("java.util.zip.ZipEntry.getCrc()J", true);
        map.put("java.util.logging.XMLFormatter.escape(Ljava/lang/StringBuffer;Ljava/lang/String;)V", false);
        map.put("java.util.jar.JarFile$3.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.Properties.enumerate(Ljava/util/Hashtable;)V", false);
        map.put("java.util.Arrays.copyOf([FI)[F", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.byteOffset(I)J", true);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<clinit>()V", false);
        map.put("java.util.DualPivotQuicksort.doSort([DII)V", true);
        map.put("java.util.Date.getSeconds()I", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasContended()Z", true);
        map.put("java.util.zip.Deflater.<init>(IZ)V", false);
        map.put("java.util.zip.ZipEntry.getExtra()[B", true);
        map.put("java.util.Scanner.ioException()Ljava/io/IOException;", true);
        map.put("java.util.Scanner.findWithinHorizon(Ljava/util/regex/Pattern;I)Ljava/lang/String;", false);
        map.put("java.util.concurrent.atomic.AtomicLong.<init>(J)V", false);
        map.put("java.util.logging.Handler.setFormatter(Ljava/util/logging/Formatter;)V", false);
        map.put("java.util.MissingFormatWidthException.getFormatSpecifier()Ljava/lang/String;", true);
        map.put("java.util.logging.LoggingProxyImpl.setLoggerLevel(Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.TreeSet.higher(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.Locale$Builder.setExtension(CLjava/lang/String;)Ljava/util/Locale$Builder;", false);
        map.put("java.util.concurrent.TimeUnit$3.convert(JLjava/util/concurrent/TimeUnit;)J", false);
        map.put("java.util.regex.Pattern.c()I", false);
        map.put("java.util.concurrent.ForkJoinPool.registerWorker(Ljava/util/concurrent/ForkJoinWorkerThread;)I", false);
        map.put("java.util.ResourceBundle$BundleReference.<init>(Ljava/util/ResourceBundle;Ljava/lang/ref/ReferenceQueue;Ljava/util/ResourceBundle$CacheKey;)V", false);
        map.put("java.util.LinkedList.outOfBoundsMsg(I)Ljava/lang/String;", false);
        map.put("java.util.LinkedList.removeFirst()Ljava/lang/Object;", false);
        map.put("java.util.regex.Matcher.appendTail(Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;", false);
        map.put("java.util.zip.Deflater.getBytesWritten()J", false);
        map.put("java.util.concurrent.TimeUnit$5.toMinutes(J)J", true);
        map.put("java.util.TreeMap$NavigableSubMap.subLowest()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.concurrent.ThreadLocalRandom.nextInt(II)I", false);
        map.put("java.util.Formatter$FormatSpecifier.printHashCode(Ljava/lang/Object;)V", false);
        map.put("java.util.zip.GZIPOutputStream.<init>(Ljava/io/OutputStream;Z)V", false);
        map.put("java.util.Vector.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.GregorianCalendar.getRolledValue(IIII)I", false);
        map.put("java.util.Scanner.hasNext()Z", false);
        map.put("java.util.Collections$CheckedMap.badValueMsg(Ljava/lang/Object;)Ljava/lang/String;", false);
        map.put("java.util.Collections$UnmodifiableCollection.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ForkJoinTask.externalInterruptibleAwaitDone(J)I", false);
        map.put("java.util.HashMap$HashIterator.remove()V", false);
        map.put("java.util.Collections$ReverseComparator.compare(Ljava/lang/Object;Ljava/lang/Object;)I", false);
        map.put("java.util.logging.SimpleFormatter.<clinit>()V", false);
        map.put("java.util.TimeZone$1.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.List.size()I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Values.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.doReleaseShared()V", false);
        map.put("java.util.Collections$UnmodifiableCollection.clear()V", false);
        map.put("java.util.concurrent.locks.ReentrantLock.getQueuedThreads()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.access$100(Ljava/util/concurrent/CopyOnWriteArrayList;II)V", false);
        map.put("java.util.logging.Level.parse(Ljava/lang/String;)Ljava/util/logging/Level;", false);
        map.put("java.util.concurrent.ExecutorCompletionService.<init>(Ljava/util/concurrent/Executor;)V", false);
        map.put("java.util.Calendar.getInstance(Ljava/util/TimeZone;)Ljava/util/Calendar;", false);
        map.put("java.util.AbstractMap.putAll(Ljava/util/Map;)V", false);
        map.put("java.util.concurrent.ForkJoinTask$AdaptedRunnable.getRawResult()Ljava/lang/Object;", true);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.isHeldExclusively()Z", false);
        map.put("java.util.regex.Pattern$End.<init>()V", false);
        map.put("java.util.concurrent.ForkJoinTask.getRawResult()Ljava/lang/Object;", false);
        map.put("java.util.jar.JarFile.getMetaInfEntryNames()[Ljava/lang/String;", false);
        map.put("java.util.concurrent.Executors$RunnableAdapter.<init>(Ljava/lang/Runnable;Ljava/lang/Object;)V", false);
        map.put("java.util.Locale.getDisplayLanguage()Ljava/lang/String;", false);
        map.put("java.util.zip.Deflater.getAdler()I", false);
        map.put("java.util.PriorityQueue.<init>()V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.ensureProtectedAccess(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.indexOf(Ljava/lang/Object;I)I", true);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.Collections$UnmodifiableCollection$1.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.FutureTask$Sync.tryReleaseShared(I)Z", false);
        map.put("java.util.Locale.getVariant()Ljava/lang/String;", true);
        map.put("java.util.Collections$UnmodifiableCollection.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.Calendar.getWeekYear()I", false);
        map.put("java.util.zip.ZipFile$ZipFileInflaterInputStream.close()V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.release(I)Z", false);
        map.put("java.util.TreeMap.descendingMap()Ljava/util/NavigableMap;", false);
        map.put("java.util.regex.Pattern$2.isSatisfiedBy(I)Z", true);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.targetCheck(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.Phaser$QNode.block()Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Segment.<clinit>()V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.getFirst()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.DelayQueue.clear()V", false);
        map.put("java.util.Collections.iteratorBinarySearch(Ljava/util/List;Ljava/lang/Object;Ljava/util/Comparator;)I", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.decrementAndGet(I)I", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.exclusiveCount(I)I", true);
        map.put("java.util.EnumMap$EntrySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.LinkedHashMap$EntryIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.NavigableMap.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.regex.UnicodeProp.forPOSIXName(Ljava/lang/String;)Ljava/util/regex/UnicodeProp;", false);
        map.put("java.util.Locale$Builder.setVariant(Ljava/lang/String;)Ljava/util/Locale$Builder;", false);
        map.put("java.util.Scanner.floatPattern()Ljava/util/regex/Pattern;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.hasQueuedThreads()Z", false);
        map.put("java.util.regex.Matcher.hitEnd()Z", true);
        map.put("java.util.jar.JarVerifier.getManifestDigests()Ljava/util/List;", false);
        map.put("java.util.TreeMap$SubMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.Collections$UnmodifiableList.addAll(ILjava/util/Collection;)Z", false);
        map.put("java.util.ComparableTimSort.minRunLength(I)I", false);
        map.put("java.util.concurrent.TimeUnit$3.excessNanos(JJ)I", true);
        map.put("java.util.UnknownFormatConversionException.getMessage()Ljava/lang/String;", false);
        map.put("java.util.Collections$CheckedList.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.ArrayDeque.<clinit>()V", false);
        map.put("java.util.Collections$SynchronizedList.listIterator()Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.Semaphore$Sync.compareAndSetState(II)Z", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.Locale$Builder.build()Ljava/util/Locale;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.isEmpty()Z", false);
        map.put("java.util.prefs.AbstractPreferences.flush2()V", false);
        map.put("java.util.concurrent.CyclicBarrier.await(JLjava/util/concurrent/TimeUnit;)I", false);
        map.put("java.util.logging.LogRecord.getResourceBundle()Ljava/util/ResourceBundle;", true);
        map.put("java.util.TreeMap.valEquals(Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.IdentityHashMap$EntrySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.zip.ZipFile$2.<init>()V", true);
        map.put("java.util.HashMap.toString()Ljava/lang/String;", false);
        map.put("java.util.IllegalFormatPrecisionException.getPrecision()I", true);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.<init>()V", false);
        map.put("java.util.MissingResourceException.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V", false);
        map.put("java.util.prefs.XmlSupport$Resolver.<init>()V", true);
        map.put("java.util.regex.Pattern$BehindS.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator.set(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.nextTerminator()Ljava/util/concurrent/ConcurrentLinkedDeque$Node;", true);
        map.put("java.util.TreeMap$AscendingSubMap.descendingKeyIterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.getLargestPoolSize()I", false);
        map.put("java.util.jar.JarVerifier$VerifierCodeSource.isSameDomain(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.isEmpty()Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await()V", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.LinkedHashMap$EntryIterator.<init>(Ljava/util/LinkedHashMap;Ljava/util/LinkedHashMap$1;)V", false);
        map.put("java.util.ResourceBundle$BundleReference.getCacheKey()Ljava/util/ResourceBundle$CacheKey;", true);
        map.put("java.util.concurrent.FutureTask$Sync.ranOrCancelled(I)Z", true);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.hashCode()I", false);
        map.put("java.util.concurrent.LinkedTransferQueue.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Collections$CheckedList$1.add(Ljava/lang/Object;)V", false);
        map.put("java.util.Collections$EmptyList.<init>()V", false);
        map.put("java.util.SortedSet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.EnumSet.typeCheck(Ljava/lang/Enum;)V", false);
        map.put("java.util.Formatter$FormatSpecifier.print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ)V", false);
        map.put("java.util.concurrent.TimeUnit$6.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.prefs.Base64.byteArrayToAltBase64([B)Ljava/lang/String;", false);
        map.put("java.util.Scanner.separatorPattern()Ljava/util/regex/Pattern;", false);
        map.put("java.util.prefs.AbstractPreferences.startEventDispatchThreadIfNecessary()V", false);
        map.put("java.util.concurrent.TimeUnit$4.toMinutes(J)J", true);
        map.put("java.util.Formatter$FormatSpecifier.exponent([CI)[C", false);
        map.put("java.util.Hashtable.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.List.isEmpty()Z", false);
        map.put("java.util.Currency$1.<init>()V", true);
        map.put("java.util.Currency.getSymbol(Ljava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.LinkedHashSet.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(Ljava/lang/Object;[Ljava/lang/Object;I)I", true);
        map.put("java.util.Collections.min(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$CharProperty.complement()Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.Collections$EmptyListIterator.nextIndex()I", true);
        map.put("java.util.logging.Logger.<init>(Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.LinkedList.unlinkFirst(Ljava/util/LinkedList$Node;)Ljava/lang/Object;", false);
        map.put("java.util.logging.LogManager.access$1300(Ljava/util/logging/LogManager;)V", false);
        map.put("java.util.concurrent.TimeUnit.<clinit>()V", false);
        map.put("java.util.logging.StreamHandler.flushAndClose()V", false);
        map.put("java.util.List.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Collections$UnmodifiableList$1.hasPrevious()Z", false);
        map.put("java.util.Collections$AsLIFOQueue.peek()Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.<init>(Ljava/util/TreeMap$NavigableSubMap;Ljava/util/TreeMap$Entry;Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.Formatter$Flags.access$100(Ljava/util/Formatter$Flags;Ljava/util/Formatter$Flags;)Ljava/util/Formatter$Flags;", false);
        map.put("java.util.Collections$SynchronizedCollection.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern.findSupplementary(II)Z", true);
        map.put("java.util.logging.Handler.flush()V", false);
        map.put("java.util.TreeMap$ValueIterator.nextEntry()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferQueue.clean(Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;)V", false);
        map.put("java.util.logging.Logger.entering(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.floorEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.SimpleTimeZone.getRawOffset()I", true);
        map.put("java.util.DualPivotQuicksort.sort([S)V", true);
        map.put("java.util.prefs.WindowsPreferences.flushSpi()V", true);
        map.put("java.util.jar.Pack200$Packer.removePropertyChangeListener(Ljava/beans/PropertyChangeListener;)V", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.<init>()V", false);
        map.put("java.util.concurrent.Future.isCancelled()Z", false);
        map.put("java.util.concurrent.ForkJoinTask.expungeStaleExceptions()V", false);
        map.put("java.util.logging.StreamHandler.setFilter(Ljava/util/logging/Filter;)V", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferStack$SNode.casNext(Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;)Z", false);
        map.put("java.util.regex.Matcher.quoteReplacement(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.TimeZone.<clinit>()V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque$AbstractItr.nextNode(Ljava/util/concurrent/LinkedBlockingDeque$Node;)Ljava/util/concurrent/LinkedBlockingDeque$Node;", false);
        map.put("java.util.zip.ZipFile.finalize()V", false);
        map.put("java.util.EnumMap.maskNull(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.SimpleTimeZone.decodeRules()V", false);
        map.put("java.util.Scanner.readInput()V", false);
        map.put("java.util.ResourceBundle.setExpirationTime(Ljava/util/ResourceBundle$CacheKey;Ljava/util/ResourceBundle$Control;)V", false);
        map.put("java.util.Map.putAll(Ljava/util/Map;)V", false);
        map.put("java.util.regex.Pattern.inRange(III)Z", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.subMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.RandomAccessSubList.subList(II)Ljava/util/List;", false);
        map.put("java.util.concurrent.Semaphore.acquire()V", false);
        map.put("java.util.StringTokenizer.isDelimiter(I)Z", true);
        map.put("java.util.ArrayList.removeRange(II)V", false);
        map.put("java.util.concurrent.ForkJoinPool.getQueuedSubmissionCount()I", true);
        map.put("java.util.logging.LogManager$SystemLoggerContext.addLocalLogger(Ljava/util/logging/Logger;)Z", false);
        map.put("java.util.AbstractMap$SimpleEntry.<init>(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        map.put("java.util.LinkedList.addFirst(Ljava/lang/Object;)V", false);
        map.put("java.util.regex.Pattern$Bound.<clinit>()V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.getPoolSize()I", false);
        map.put("java.util.Properties.writeComments(Ljava/io/BufferedWriter;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ForkJoinPool.<init>(ILjava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;Ljava/lang/Thread$UncaughtExceptionHandler;Z)V", false);
        map.put("java.util.concurrent.DelayQueue.offer(Ljava/util/concurrent/Delayed;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.WeakHashMap$Values.size()I", false);
        map.put("java.util.LinkedList.linkBefore(Ljava/lang/Object;Ljava/util/LinkedList$Node;)V", false);
        map.put("java.util.LinkedList$ListItr.next()Ljava/lang/Object;", false);
        map.put("java.util.logging.LogManager.setLevelsOnExistingLoggers()V", false);
        map.put("java.util.PropertyPermission.getName()Ljava/lang/String;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.<init>()V", false);
        map.put("java.util.concurrent.atomic.AtomicReference.lazySet(Ljava/lang/Object;)V", false);
        map.put("java.util.IdentityHashMap$KeySet.<init>(Ljava/util/IdentityHashMap;Ljava/util/IdentityHashMap$1;)V", false);
        map.put("java.util.prefs.AbstractPreferences.putFloat(Ljava/lang/String;F)V", false);
        map.put("java.util.concurrent.Executors$DelegatedExecutorService.<init>(Ljava/util/concurrent/ExecutorService;)V", false);
        map.put("java.util.concurrent.DelayQueue.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.tryAcquireSharedNanos(IJ)Z", false);
        map.put("java.util.ResourceBundle$Control.<clinit>()V", false);
        map.put("java.util.prefs.WindowsPreferences.windowsAbsolutePath()[B", false);
        map.put("java.util.HashMap.addEntry(ILjava/lang/Object;Ljava/lang/Object;I)V", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater.weakCompareAndSet(Ljava/lang/Object;JJ)Z", false);
        map.put("java.util.logging.Formatter.formatMessage(Ljava/util/logging/LogRecord;)Ljava/lang/String;", false);
        map.put("java.util.TreeMap$DescendingSubMap.subCeiling(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.AbstractQueue.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.Vector.removeRange(II)V", false);
        map.put("java.util.Hashtable$Entry.getValue()Ljava/lang/Object;", true);
        map.put("java.util.Collections.binarySearch(Ljava/util/List;Ljava/lang/Object;)I", false);
        map.put("java.util.TreeMap.firstEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.Collections.shuffle(Ljava/util/List;)V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$21.<init>()V", false);
        map.put("java.util.SortedSet.first()Ljava/lang/Object;", false);
        map.put("java.util.Scanner.findInLine(Ljava/util/regex/Pattern;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.locks.ReentrantLock.lock()V", false);
        map.put("java.util.NavigableSet.ceiling(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.GregorianCalendar.computeTime()V", false);
        map.put("java.util.logging.Level.access$100(Ljava/util/logging/Level;)I", true);
        map.put("java.util.IdentityHashMap.access$000(Ljava/util/IdentityHashMap;)I", true);
        map.put("java.util.logging.LogManager$4.run()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Executors$PrivilegedCallable$1.<init>(Ljava/util/concurrent/Executors$PrivilegedCallable;)V", false);
        map.put("java.util.jar.JarFile.<init>(Ljava/lang/String;Z)V", false);
        map.put("java.util.HashSet.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.JapaneseImperialCalendar.set(II)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue$Node.tryMatchData()Z", false);
        map.put("java.util.AbstractCollection.<init>()V", true);
        map.put("java.util.Arrays.fill([DD)V", true);
        map.put("java.util.Calendar.setWeekDate(III)V", false);
        map.put("java.util.logging.StreamHandler.setOutputStream(Ljava/io/OutputStream;)V", false);
        map.put("java.util.WeakHashMap$EntrySet.deepCopy()Ljava/util/List;", false);
        map.put("java.util.regex.ASCII.toDigit(I)I", true);
        map.put("java.util.LinkedList.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.setValue(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$3.<init>(Ljava/util/regex/Pattern;II)V", false);
        map.put("java.util.Collections.list(Ljava/util/Enumeration;)Ljava/util/ArrayList;", false);
        map.put("java.util.zip.ZipInputStream.read([BII)I", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.reportInterruptAfterWait(I)V", false);
        map.put("java.util.TreeMap$SubMap.readResolve()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.<clinit>()V", false);
        map.put("java.util.concurrent.TimeUnit$6.toDays(J)J", true);
        map.put("java.util.Hashtable.toString()Ljava/lang/String;", false);
        map.put("java.util.zip.GZIPOutputStream.writeHeader()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.descendingMap()Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;", false);
        map.put("java.util.IdentityHashMap.access$1600(Ljava/util/IdentityHashMap;Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap$Values.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.Collections$CheckedCollection.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.IdentityHashMap$IdentityHashMapIterator.remove()V", false);
        map.put("java.util.zip.ZipOutputStream.writeLOC(Ljava/util/zip/ZipOutputStream$XEntry;)V", false);
        map.put("java.util.zip.ZipFile$ZipFileInflaterInputStream.finalize()V", false);
        map.put("java.util.jar.Attributes.size()I", false);
        map.put("java.util.concurrent.ForkJoinPool.submit(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.floor(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.ResourceBundle$LoaderReference.get()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.addWaiter(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;", false);
        map.put("java.util.Collection.hashCode()I", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$FairSync.readerShouldBlock()Z", false);
        map.put("java.util.LinkedList.toArray()[Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ThreadLocalRandom.<init>()V", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue$Itr.remove()V", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater.lazySet(Ljava/lang/Object;J)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$EntrySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.LinkedBlockingDeque$AbstractItr.advance()V", false);
        map.put("java.util.concurrent.ConcurrentHashMap.entryForHash(Ljava/util/concurrent/ConcurrentHashMap$Segment;I)Ljava/util/concurrent/ConcurrentHashMap$HashEntry;", false);
        map.put("java.util.concurrent.BlockingDeque.poll(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.prefs.AbstractPreferences.removeSpi(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.insertIndex(Ljava/util/concurrent/ConcurrentSkipListMap$Node;I)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.indexOf(Ljava/lang/Object;[Ljava/lang/Object;II)I", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Index.casRight(Ljava/util/concurrent/ConcurrentSkipListMap$Index;Ljava/util/concurrent/ConcurrentSkipListMap$Index;)Z", false);
        map.put("java.util.concurrent.locks.LockSupport.parkNanos(J)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue$Node.<init>(Ljava/lang/Object;Z)V", false);
        map.put("java.util.Locale$Category.ordinal()I", false);
        map.put("java.util.BitSet.nextClearBit(I)I", true);
        map.put("java.util.TreeMap.parentOf(Ljava/util/TreeMap$Entry;)Ljava/util/TreeMap$Entry;", true);
        map.put("java.util.Collections.singleton(Ljava/lang/Object;)Ljava/util/Set;", false);
        map.put("java.util.zip.InflaterOutputStream.<init>(Ljava/io/OutputStream;Ljava/util/zip/Inflater;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Node.isMarker()Z", true);
        map.put("java.util.prefs.AbstractPreferences$EventDispatchThread.run()V", false);
        map.put("java.util.logging.LogManager$RootLogger.removeHandler(Ljava/util/logging/Handler;)V", false);
        map.put("java.util.ConcurrentModificationException.<init>(Ljava/lang/Throwable;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.<init>(Ljava/util/concurrent/ScheduledThreadPoolExecutor;Ljava/lang/Runnable;Ljava/lang/Object;J)V", false);
        map.put("java.util.zip.ZipFile.startsWithLOC(J)Z", false);
        map.put("java.util.Currency.getInstance(Ljava/util/Locale;)Ljava/util/Currency;", false);
        map.put("java.util.Collections$SynchronizedSortedMap.<init>(Ljava/util/SortedMap;Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Executors$PrivilegedCallableUsingCurrentClassLoader$1.<init>(Ljava/util/concurrent/Executors$PrivilegedCallableUsingCurrentClassLoader;)V", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.<init>(I)V", false);
        map.put("java.util.concurrent.ExecutorCompletionService.submit(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.jar.JarFile.getManifestDigests()Ljava/util/List;", false);
        map.put("java.util.Set.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap$EntrySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.prevEntry()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.jar.JarInputStream.read([BII)I", false);
        map.put("java.util.Collections$SynchronizedList.remove(I)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.put(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ExecutionException.getCause()Ljava/lang/Throwable;", false);
        map.put("java.util.EnumMap$Values.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.jar.Attributes.putAll(Ljava/util/Map;)V", false);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegSetValueEx1(I[B[B)I", false);
        map.put("java.util.logging.LoggingProxyImpl.setLevel(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        map.put("java.util.logging.SocketHandler.<init>()V", false);
        map.put("java.util.concurrent.TimeUnit$3.toDays(J)J", true);
        map.put("java.util.concurrent.Phaser.doArrive(Z)I", false);
        map.put("java.util.WeakHashMap$EntrySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.HashMap$Values.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.Collections$EmptyList.iterator()Ljava/util/Iterator;", true);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.selfInterrupt()V", false);
        map.put("java.util.regex.MatchResult.group()Ljava/lang/String;", false);
        map.put("java.util.Date.clone()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.logging.Logger.getResourceBundleName()Ljava/lang/String;", true);
        map.put("java.util.regex.Pattern$NotBehind.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.jar.JarInputStream.getNextJarEntry()Ljava/util/jar/JarEntry;", false);
        map.put("java.util.StringTokenizer.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ExecutorService.submit(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.Scanner.nextShort()S", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.tailSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.Calendar.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.Arrays.fill([BB)V", true);
        map.put("java.util.ResourceBundle$SingleFormatControl.<init>(Ljava/util/List;)V", false);
        map.put("java.util.Date.after(Ljava/util/Date;)Z", false);
        map.put("java.util.Collections$UnmodifiableSortedSet.subSet(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.zip.CRC32.reset()V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$Node.<init>()V", true);
        map.put("java.util.logging.LogManager$3.run()Ljava/lang/Void;", false);
        map.put("java.util.Dictionary.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.ResourceBundle$Control$1.run()Ljava/io/InputStream;", false);
        map.put("java.util.Collection.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.zip.Inflater.setInput([B)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.<init>(Ljava/util/concurrent/ScheduledThreadPoolExecutor;Ljava/lang/Runnable;Ljava/lang/Object;JJ)V", false);
        map.put("java.util.TaskQueue.get(I)Ljava/util/TimerTask;", true);
        map.put("java.util.WeakHashMap$EntrySet.clear()V", false);
        map.put("java.util.prefs.AbstractPreferences.putSpi(Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.AbstractSequentialList.addAll(ILjava/util/Collection;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.<clinit>()V", false);
        map.put("java.util.EnumSet.addRange(Ljava/lang/Enum;Ljava/lang/Enum;)V", false);
        map.put("java.util.regex.Pattern$Pos.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.LinkedTransferQueue$Node.forgetNext()V", false);
        map.put("java.util.AbstractMap$SimpleImmutableEntry.toString()Ljava/lang/String;", false);
        map.put("java.util.logging.Formatter.getTail(Ljava/util/logging/Handler;)Ljava/lang/String;", true);
        map.put("java.util.regex.Pattern.clazz(Z)Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.logging.LogManager.resetLogger(Ljava/util/logging/Logger;)V", false);
        map.put("java.util.Collections$SynchronizedCollection.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.jar.JarVerifier$3.<init>(Ljava/util/jar/JarVerifier;)V", false);
        map.put("java.util.TreeSet.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.logging.Logger.finer(Ljava/lang/String;)V", true);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.release(I)Z", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.lazySet(IJ)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.checkKeyBounds(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferStack.<clinit>()V", false);
        map.put("java.util.concurrent.ForkJoinTask$AdaptedCallable.<init>(Ljava/util/concurrent/Callable;)V", false);
        map.put("java.util.IdentityHashMap$KeyIterator.<init>(Ljava/util/IdentityHashMap;)V", false);
        map.put("java.util.EnumMap.access$1600(Ljava/util/EnumMap;I)I", false);
        map.put("java.util.logging.LogManager.getFormatterProperty(Ljava/lang/String;Ljava/util/logging/Formatter;)Ljava/util/logging/Formatter;", false);
        map.put("java.util.Scanner.nextLine()Ljava/lang/String;", false);
        map.put("java.util.prefs.AbstractPreferences.nodeExists(Ljava/lang/String;)Z", false);
        map.put("java.util.concurrent.DelayQueue.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.regex.Pattern.unread()V", false);
        map.put("java.util.BitSet.xor(Ljava/util/BitSet;)V", false);
        map.put("java.util.JapaneseImperialCalendar.getYearOffsetInMillis(Lsun/util/calendar/CalendarDate;)J", true);
        map.put("java.util.BitSet.valueOf([J)Ljava/util/BitSet;", false);
        map.put("java.util.InvalidPropertiesFormatException.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.TreeMap.deleteEntry(Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.jar.JarFile$JarFileEntry.<init>(Ljava/util/jar/JarFile;Ljava/util/zip/ZipEntry;)V", false);
        map.put("java.util.Collections.unmodifiableSortedSet(Ljava/util/SortedSet;)Ljava/util/SortedSet;", false);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegQueryValueEx(I[B)[B", false);
        map.put("java.util.concurrent.atomic.AtomicReference.get()Ljava/lang/Object;", true);
        map.put("java.util.prefs.WindowsPreferences.closeKey(I)V", false);
        map.put("java.util.Properties.store(Ljava/io/Writer;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.decrementAndGet()I", false);
        map.put("java.util.regex.Pattern$TreeInfo.reset()V", false);
        map.put("java.util.regex.Pattern.newSingle(I)Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.LinkedList$DescendingIterator.hasNext()Z", true);
        map.put("java.util.concurrent.FutureTask$Sync.innerRunAndReset()Z", false);
        map.put("java.util.Vector.elementAt(I)Ljava/lang/Object;", true);
        map.put("java.util.prefs.AbstractPreferences$EventDispatchThread.<init>()V", false);
        map.put("java.util.LinkedHashMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.ArrayList$SubList.set(ILjava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.ServiceLoader$1.remove()V", false);
        map.put("java.util.LinkedList.isElementIndex(I)Z", true);
        map.put("java.util.prefs.Preferences.remove(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.ListIterator.previous()Ljava/lang/Object;", false);
        map.put("java.util.Collections$ReverseComparator2.<clinit>()V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.push(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.locks.LockSupport.parkUntil(Ljava/lang/Object;J)V", false);
        map.put("java.util.Formatter$FormatSpecifier.checkCharacter()V", false);
        map.put("java.util.Locale.getLocaleExtensions()Lsun/util/locale/LocaleExtensions;", true);
        map.put("java.util.Arrays.binarySearch0([Ljava/lang/Object;IILjava/lang/Object;)I", false);
        map.put("java.util.NavigableMap.floorEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.PropertyPermission.getMask(Ljava/lang/String;)I", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.unparkSuccessor(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)V", false);
        map.put("java.util.Deque.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap.fixAfterInsertion(Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.Collections$CheckedCollection.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.SubList.rangeCheck(I)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Node.<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/concurrent/ConcurrentSkipListMap$Node;)V", false);
        map.put("java.util.TimeZone.getDefaultRef()Ljava/util/TimeZone;", false);
        map.put("java.util.prefs.PreferenceChangeListener.preferenceChange(Ljava/util/prefs/PreferenceChangeEvent;)V", false);
        map.put("java.util.regex.Pattern$BmpCharProperty.isSatisfiedBy(I)Z", false);
        map.put("java.util.concurrent.CompletionService.take()Ljava/util/concurrent/Future;", false);
        map.put("java.util.IdentityHashMap.<clinit>()V", false);
        map.put("java.util.Calendar.checkDisplayNameParams(IIIILjava/util/Locale;I)Z", true);
        map.put("java.util.Hashtable.<init>(Ljava/util/Map;)V", false);
        map.put("java.util.ResourceBundle$CacheKey.calculateHashCode()V", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.peek()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.TimeUnit$5.toMicros(J)J", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.highestKey()Ljava/lang/Object;", false);
        map.put("java.util.ComparableTimSort.rangeCheck(III)V", false);
        map.put("java.util.concurrent.ThreadFactory.newThread(Ljava/lang/Runnable;)Ljava/lang/Thread;", false);
        map.put("java.util.logging.LogRecord.defaultThreadID()I", true);
        map.put("java.util.LinkedHashMap$KeyIterator.<init>(Ljava/util/LinkedHashMap;Ljava/util/LinkedHashMap$1;)V", false);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapKeyIterator.removeAscending()V", false);
        map.put("java.util.AbstractCollection.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.IdentityHashMap$EntryIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipFile.<init>(Ljava/io/File;Ljava/nio/charset/Charset;)V", false);
        map.put("java.util.NavigableMap.pollLastEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.intValue()I", true);
        map.put("java.util.EnumMap$KeyIterator.next()Ljava/lang/Enum;", false);
        map.put("java.util.Collections$SingletonList.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.Hashtable$Enumerator.remove()V", false);
        map.put("java.util.PropertyPermission.getActions()Ljava/lang/String;", false);
        map.put("java.util.Collections$UnmodifiableRandomAccessList.subList(II)Ljava/util/List;", false);
        map.put("java.util.Vector.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.CopyOnWriteArrayList.hashCode()I", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.execute(Ljava/lang/Runnable;)V", false);
        map.put("java.util.Scanner.linePattern()Ljava/util/regex/Pattern;", false);
        map.put("java.util.Hashtable.get(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.LinkedList$ListItr.nextIndex()I", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.values()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.eq(Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.regex.UnicodeProp$10.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.listIterator(I)Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.Executors.newSingleThreadExecutor(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;", false);
        map.put("java.util.jar.Pack200.<init>()V", true);
        map.put("java.util.concurrent.ForkJoinPool.startTerminating()V", false);
        map.put("java.util.jar.JarOutputStream.close()V", false);
        map.put("java.util.regex.UnicodeProp$16.is(I)Z", false);
    }

    private static void m3() {

        map.put("java.util.ArrayDeque.access$400(Ljava/util/ArrayDeque;)[Ljava/lang/Object;", true);
        map.put("java.util.jar.JarVerifier.getCodeSigners(Ljava/util/jar/JarFile;Ljava/util/jar/JarEntry;)[Ljava/security/CodeSigner;", true);
        map.put("java.util.Calendar.updateTime()V", false);
        map.put("java.util.regex.UnicodeProp$16.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.jar.JarFile$4.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Semaphore.release()V", false);
        map.put("java.util.prefs.Preferences.isUserNode()Z", false);
        map.put("java.util.TreeMap.addAllForTreeSet(Ljava/util/SortedSet;Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.Executors.newCachedThreadPool(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.getSharedQueuedThreads()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.poll(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.Scanner.locale()Ljava/util/Locale;", true);
        map.put("java.util.concurrent.ForkJoinPool.<clinit>()V", false);
        map.put("java.util.concurrent.atomic.AtomicLong.floatValue()F", true);
        map.put("java.util.concurrent.ConcurrentHashMap$KeySet.clear()V", false);
        map.put("java.util.WeakHashMap$Holder.<init>()V", true);
        map.put("java.util.ResourceBundle$RBClassLoader$1.run()Ljava/util/ResourceBundle$RBClassLoader;", false);
        map.put("java.util.List.indexOf(Ljava/lang/Object;)I", false);
        map.put("java.util.Currency.getMainTableEntry(CC)I", false);
        map.put("java.util.Collections$CheckedMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Formatter$FormatSpecifier.print(DLjava/util/Locale;)V", false);
        map.put("java.util.Vector.lastIndexOf(Ljava/lang/Object;I)I", true);
        map.put("java.util.NavigableMap.descendingMap()Ljava/util/NavigableMap;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.<init>(ILjava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V", false);
        map.put("java.util.ArrayList$SubList$1.set(Ljava/lang/Object;)V", false);
        map.put("java.util.TimSort.<init>([Ljava/lang/Object;Ljava/util/Comparator;)V", false);
        map.put("java.util.Collections$UnmodifiableList.listIterator()Ljava/util/ListIterator;", false);
        map.put("java.util.Calendar.setUnnormalized()V", false);
        map.put("java.util.concurrent.ForkJoinPool.tryAwaitWork(Ljava/util/concurrent/ForkJoinWorkerThread;J)Z", false);
        map.put("java.util.prefs.Preferences.removeNodeChangeListener(Ljava/util/prefs/NodeChangeListener;)V", false);
        map.put("java.util.zip.ZipFile.freeEntry(JJ)V", false);
        map.put("java.util.regex.Pattern$BmpCharProperty.<init>(Ljava/util/regex/Pattern$1;)V", false);
        map.put("java.util.TaskQueue.isEmpty()Z", true);
        map.put("java.util.logging.LoggingProxyImpl.log(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Object;)V", true);
        map.put("java.util.Arrays$LegacyMergeSort.access$000()Z", true);
        map.put("java.util.zip.DeflaterOutputStream.<init>(Ljava/io/OutputStream;)V", false);
        map.put("java.util.concurrent.BlockingDeque.pollLast(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$Loop.<init>(II)V", false);
        map.put("java.util.AbstractMap$1$1.remove()V", false);
        map.put("java.util.zip.GZIPInputStream.read([BII)I", false);
        map.put("java.util.zip.ZipInputStream.get64([BI)J", true);
        map.put("java.util.WeakHashMap$Values.<init>(Ljava/util/WeakHashMap;Ljava/util/WeakHashMap$1;)V", false);
        map.put("java.util.prefs.NodeChangeEvent.getSource()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.decrementAndGet(I)J", false);
        map.put("java.util.Calendar.getDisplayNames(IILjava/util/Locale;)Ljava/util/Map;", false);
        map.put("java.util.Calendar.getInstance()Ljava/util/Calendar;", false);
        map.put("java.util.LinkedList$ListItr.hasNext()Z", true);
        map.put("java.util.zip.Inflater.getTotalOut()I", false);
        map.put("java.util.Formatter$FormatSpecifier.addDot([C)[C", false);
        map.put("java.util.jar.JarFile.getManifest()Ljava/util/jar/Manifest;", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.getEstimatedSurplusTaskCount()I", true);
        map.put("java.util.AbstractCollection.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.ResourceBundle.handleGetObject(Ljava/lang/String;)Ljava/lang/Object;", false);
        map.put("java.util.SubList.checkForComodification()V", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.Formatter$BigDecimalLayoutForm.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.zip.ZStreamRef.address()J", true);
        map.put("java.util.GregorianCalendar.isLenient()Z", false);
        map.put("java.util.Collections$AsLIFOQueue.remove()Ljava/lang/Object;", false);
        map.put("java.util.Stack.copyInto([Ljava/lang/Object;)V", false);
        map.put("java.util.Calendar.set(III)V", false);
        map.put("java.util.concurrent.FutureTask$Sync.tryAcquireSharedNanos(IJ)Z", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.isTerminated()Z", true);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.next()Ljava/lang/Runnable;", false);
        map.put("java.util.Properties$LineReader.<init>(Ljava/util/Properties;Ljava/io/Reader;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(I)V", false);
        map.put("java.util.concurrent.LinkedBlockingQueue$Itr.next()Ljava/lang/Object;", false);
        map.put("java.util.WeakHashMap$Entry.setValue(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.LockSupport.<clinit>()V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$3.<init>(I)V", false);
        map.put("java.util.Collections$SynchronizedSortedSet.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetHead(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap$KeySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.regex.PatternSyntaxException.getPattern()Ljava/lang/String;", true);
        map.put("java.util.EnumMap$Values.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.EnumSet.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.Executors$1.<init>(Ljava/security/PrivilegedAction;)V", false);
        map.put("java.util.zip.CheckedInputStream.skip(J)J", false);
        map.put("java.util.concurrent.Executors$DelegatedExecutorService.invokeAll(Ljava/util/Collection;)Ljava/util/List;", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.getRaw(J)I", false);
        map.put("java.util.ArrayDeque.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.logging.Logger.doLog(Ljava/util/logging/LogRecord;)V", true);
        map.put("java.util.Dictionary.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.AbstractSet.size()I", false);
        map.put("java.util.logging.LogRecord.setSourceMethodName(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$EntrySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.AbstractMap$1.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.prefs.WindowsPreferences.removeSpi(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.indexOf(Ljava/lang/Object;)I", true);
        map.put("java.util.LinkedList.get(I)Ljava/lang/Object;", true);
        map.put("java.util.Vector$ListItr.add(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.AbstractExecutorService.newTaskFor(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/RunnableFuture;", false);
        map.put("java.util.concurrent.LinkedTransferQueue.<clinit>()V", false);
        map.put("java.util.logging.LogManager.access$502(Ljava/util/logging/LogManager;Z)Z", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.offerFirst(Ljava/lang/Object;)Z", false);
        map.put("java.util.Date.setDate(I)V", false);
        map.put("java.util.HashMap$EntrySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.regex.Pattern.family(ZZ)Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.ArrayList$Itr.<init>(Ljava/util/ArrayList;Ljava/util/ArrayList$1;)V", false);
        map.put("java.util.concurrent.ForkJoinTask.tryUnfork()Z", false);
        map.put("java.util.TreeMap.pollLastEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.PriorityQueue.initElementsFromCollection(Ljava/util/Collection;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.peek()Ljava/lang/Object;", false);
        map.put("java.util.jar.JarFile.maybeInstantiateVerifier()V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getCount()I", false);
        map.put("java.util.zip.ZipFile$ZipFileInputStream.available()I", true);
        map.put("java.util.AbstractList.outOfBoundsMsg(I)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ForkJoinPool.submit(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.subSet(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/NavigableSet;", false);
        map.put("java.util.prefs.Preferences.factory1()Ljava/util/prefs/PreferencesFactory;", false);
        map.put("java.util.zip.ZipEntry.isDirectory()Z", true);
        map.put("java.util.AbstractMap$1.isEmpty()Z", false);
        map.put("java.util.ArrayList.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.lastEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.LinkedList.addAll(ILjava/util/Collection;)Z", false);
        map.put("java.util.Locale.<init>(Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ForkJoinTask.setExceptionalCompletion(Ljava/lang/Throwable;)I", false);
        map.put("java.util.zip.ZipFile.access$000(Ljava/util/zip/ZipFile;)Ljava/util/Map;", true);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry.getValue()Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipCoder.toStringUTF8([BI)Ljava/lang/String;", false);
        map.put("java.util.Random.nextDouble()D", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.addFirst(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.RejectedExecutionException.<init>()V", false);
        map.put("java.util.ListIterator.hasPrevious()Z", false);
        map.put("java.util.TimSort.mergeCollapse()V", false);
        map.put("java.util.logging.FileHandler.configure()V", false);
        map.put("java.util.Arrays.toString([B)Ljava/lang/String;", false);
        map.put("java.util.BitSet.trimToSize()V", false);
        map.put("java.util.XMLUtils$EH.fatalError(Lorg/xml/sax/SAXParseException;)V", true);
        map.put("java.util.concurrent.ConcurrentSkipListSet.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapIterator.removeDescending()V", false);
        map.put("java.util.zip.GZIPOutputStream.writeTrailer([BI)V", true);
        map.put("java.util.concurrent.TimeUnit$4.convert(JLjava/util/concurrent/TimeUnit;)J", false);
        map.put("java.util.EnumMap.isValidKey(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.TimeUnit$4.x(JJJ)J", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.descendingMap()Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.regex.Pattern$SliceI.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.Collections$EmptySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.logging.Logger$LoggerHelper.getBooleanProperty(Ljava/lang/String;)Z", true);
        map.put("java.util.Observable.notifyObservers(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.setExclusiveOwnerThread(Ljava/lang/Thread;)V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.<clinit>()V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.getQueueLength()I", true);
        map.put("java.util.prefs.Preferences.getInt(Ljava/lang/String;I)I", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.TimeUnit$6.toNanos(J)J", false);
        map.put("java.util.concurrent.TransferQueue.hasWaitingConsumer()Z", false);
        map.put("java.util.concurrent.DelayQueue$Itr.<init>(Ljava/util/concurrent/DelayQueue;[Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.Executors$2.call()Ljava/lang/Object;", false);
        map.put("java.util.Locale$Cache.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Scanner.hasNextByte(I)Z", false);
        map.put("java.util.TreeMap$AscendingSubMap.subFloor(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.logging.LogManager$LoggerContext.addLocalLogger(Ljava/util/logging/Logger;)Z", false);
        map.put("java.util.TreeMap.fixAfterDeletion(Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.Collections$CheckedSortedSet.first()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater.addAndGet(Ljava/lang/Object;J)J", false);
        map.put("java.util.concurrent.BlockingDeque.offerLast(Ljava/lang/Object;)Z", false);
        map.put("java.util.zip.CRC32.updateBytes(I[BII)I", false);
        map.put("java.util.logging.SocketHandler.flush()V", false);
        map.put("java.util.logging.LogManager$3.run()Ljava/lang/Object;", false);
        map.put("java.util.WeakHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ConcurrentMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicLong.<init>()V", true);
        map.put("java.util.IdentityHashMap$EntryIterator$Entry.getValue()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$Itr.nextNode(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Ljava/util/concurrent/ConcurrentLinkedDeque$Node;", false);
        map.put("java.util.ResourceBundle.throwMissingResourceException(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/Throwable;)V", false);
        map.put("java.util.HashMap.clear()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.ArrayDeque.addFirst(Ljava/lang/Object;)V", false);
        map.put("java.util.Arrays.copyOfRange([FII)[F", false);
        map.put("java.util.JapaneseImperialCalendar.isTransitionYear(I)Z", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.tailMap(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;", false);
        map.put("java.util.zip.DeflaterOutputStream.write(I)V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.getRejectedExecutionHandler()Ljava/util/concurrent/RejectedExecutionHandler;", true);
        map.put("java.util.ArrayDeque.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.addAndGet(IJ)J", false);
        map.put("java.util.Vector.clear()V", false);
        map.put("java.util.prefs.AbstractPreferences.isRemoved()Z", true);
        map.put("java.util.zip.ZipOutputStream.writeInt(J)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.sharedCount(I)I", true);
        map.put("java.util.Locale.getUnicodeLocaleKeys()Ljava/util/Set;", false);
        map.put("java.util.concurrent.ThreadLocalRandom.nextDouble(DD)D", false);
        map.put("java.util.concurrent.RecursiveAction.setRawResult(Ljava/lang/Object;)V", true);
        map.put("java.util.logging.LogManager$1.<init>()V", true);
        map.put("java.util.concurrent.ForkJoinTask.invokeAll([Ljava/util/concurrent/ForkJoinTask;)V", false);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapEntryIterator.<init>(Ljava/util/TreeMap$NavigableSubMap;Ljava/util/TreeMap$Entry;Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.descendingKeySet()Ljava/util/NavigableSet;", false);
        map.put("java.util.Collections$UnmodifiableSortedSet.last()Ljava/lang/Object;", false);
        map.put("java.util.jar.Attributes.containsKey(Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet$1.next()Ljava/lang/Object;", false);
        map.put("java.util.Formatter$FixedString.print(Ljava/lang/Object;Ljava/util/Locale;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireSharedInterruptibly(J)V", false);
        map.put("java.util.Collections$UnmodifiableCollection.toString()Ljava/lang/String;", false);
        map.put("java.util.Collections.synchronizedMap(Ljava/util/Map;)Ljava/util/Map;", false);
        map.put("java.util.Vector.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.Scanner.makeReadable(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/charset/CharsetDecoder;)Ljava/lang/Readable;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.headSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.tryReadLock()Z", false);
        map.put("java.util.EnumSet.of(Ljava/lang/Enum;[Ljava/lang/Enum;)Ljava/util/EnumSet;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.doSignal(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)V", false);
        map.put("java.util.logging.LogRecord.setMessage(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ThreadLocalRandom$1.<init>()V", false);
        map.put("java.util.Calendar.getMaximum(I)I", false);
        map.put("java.util.Formatter$FormatSpecifier.printDateTime(Ljava/lang/Object;Ljava/util/Locale;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.Collections$SynchronizedCollection.toString()Ljava/lang/String;", false);
        map.put("java.util.ArrayList$SubList$1.previousIndex()I", true);
        map.put("java.util.TreeMap$NavigableSubMap.subHighest()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.TimeZone.getSystemTimeZoneID(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.regex.Pattern.setcursor(I)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeSet.headSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.regex.Pattern$BnM.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.logging.FileHandler.isSetUID()Z", false);
        map.put("java.util.concurrent.atomic.AtomicLong.incrementAndGet()J", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.headSet(Ljava/lang/Object;)Ljava/util/NavigableSet;", false);
        map.put("java.util.concurrent.ConcurrentHashMap.putAll(Ljava/util/Map;)V", false);
        map.put("java.util.logging.XMLFormatter.format(Ljava/util/logging/LogRecord;)Ljava/lang/String;", false);
        map.put("java.util.ServiceLoader.fail(Ljava/lang/Class;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(I)V", false);
        map.put("java.util.logging.Logger.getAnonymousLogger(Ljava/lang/String;)Ljava/util/logging/Logger;", false);
        map.put("java.util.Arrays.binarySearch0([JIIJ)I", true);
        map.put("java.util.HashMap.putAll(Ljava/util/Map;)V", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Segment.scanAndLockForPut(Ljava/lang/Object;ILjava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$HashEntry;", false);
        map.put("java.util.EnumMap$EnumMapIterator.<init>(Ljava/util/EnumMap;)V", false);
        map.put("java.util.ArrayList$SubList$1.remove()V", false);
        map.put("java.util.TreeMap$DescendingSubMap.subLowest()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.EnumSet.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap$NavigableSubMap.absLowest()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.NavigableSet.floor(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Collections$2.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.Locale.getUnicodeLocaleAttributes()Ljava/util/Set;", false);
        map.put("java.util.concurrent.BlockingQueue.drainTo(Ljava/util/Collection;I)I", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.TreeMap$DescendingSubMap.headMap(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.Formatter.access$000(Ljava/util/Formatter;)Ljava/lang/Appendable;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.pollLastEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.<init>(I)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.tryRelease(I)Z", false);
        map.put("java.util.zip.Inflater.finished()Z", true);
        map.put("java.util.concurrent.PriorityBlockingQueue.access$000(Ljava/util/concurrent/PriorityBlockingQueue;Ljava/lang/Object;)V", false);
        map.put("java.util.HashSet.isEmpty()Z", true);
        map.put("java.util.List.addAll(ILjava/util/Collection;)Z", false);
        map.put("java.util.concurrent.RecursiveAction.setRawResult(Ljava/lang/Void;)V", true);
        map.put("java.util.LinkedHashMap$LinkedHashIterator.nextEntry()Ljava/util/LinkedHashMap$Entry;", false);
        map.put("java.util.EnumMap.get(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ForkJoinWorkerThread.locallyDeqTask()Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.logging.Logging.getParentLoggerName(Ljava/lang/String;)Ljava/lang/String;", true);
        map.put("java.util.concurrent.LinkedBlockingDeque.linkFirst(Ljava/util/concurrent/LinkedBlockingDeque$Node;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.<init>([I)V", false);
        map.put("java.util.Collections.synchronizedList(Ljava/util/List;Ljava/lang/Object;)Ljava/util/List;", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.take()Ljava/lang/Object;", false);
        map.put("java.util.AbstractMap$1.<init>(Ljava/util/AbstractMap;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.clear()V", false);
        map.put("java.util.TreeMap$EntryIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.TimeUnit$1.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getExclusiveOwnerThread()Ljava/lang/Thread;", false);
        map.put("java.util.TreeMap$Values.clear()V", false);
        map.put("java.util.LinkedList.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.concurrent.Semaphore.acquireUninterruptibly()V", false);
        map.put("java.util.regex.UnicodeProp.forName(Ljava/lang/String;)Ljava/util/regex/UnicodeProp;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.pred(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Ljava/util/concurrent/ConcurrentLinkedDeque$Node;", false);
        map.put("java.util.Date.<init>(IIIII)V", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.execTask(Ljava/util/concurrent/ForkJoinTask;)V", false);
        map.put("java.util.LinkedList.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.jar.JarVerifier$4.<init>(Ljava/util/jar/JarVerifier;Ljava/util/Enumeration;Ljava/util/Map;)V", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.BitSet.expandTo(I)V", false);
        map.put("java.util.concurrent.locks.Lock.unlock()V", false);
        map.put("java.util.SimpleTimeZone.getOffset(Lsun/util/calendar/BaseCalendar;Lsun/util/calendar/BaseCalendar$Date;IJ)I", false);
        map.put("java.util.TreeMap$AscendingSubMap.tailMap(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator.<init>(Ljava/util/List;III)V", false);
        map.put("java.util.Vector.add(ILjava/lang/Object;)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.<init>()V", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferQueue.casCleanMe(Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;)Z", false);
        map.put("java.util.ResourceBundle$CacheKey.getLoader()Ljava/lang/ClassLoader;", false);
        map.put("java.util.Date.<clinit>()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.access$300(Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;)Ljava/util/concurrent/ConcurrentSkipListMap$Node;", true);
        map.put("java.util.concurrent.ThreadPoolExecutor.purge()V", false);
        map.put("java.util.LinkedList.addLast(Ljava/lang/Object;)V", false);
        map.put("java.util.Locale.getDisplayScript()Ljava/lang/String;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$14.<init>()V", false);
        map.put("java.util.AbstractMap$2.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.get(I)Ljava/lang/Object;", false);
        map.put("java.util.SimpleTimeZone.setStartRule(IIIIZ)V", false);
        map.put("java.util.Locale.getDefault(Ljava/util/Locale$Category;)Ljava/util/Locale;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.clear()V", false);
        map.put("java.util.ArrayDeque.checkInvariants()V", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.headMap(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.casTail(Ljava/util/concurrent/ConcurrentLinkedQueue$Node;Ljava/util/concurrent/ConcurrentLinkedQueue$Node;)Z", false);
        map.put("java.util.Map.keySet()Ljava/util/Set;", false);
        map.put("java.util.Arrays.equals([Z[Z)Z", true);
        map.put("java.util.prefs.AbstractPreferences.access$100()Ljava/util/List;", true);
        map.put("java.util.prefs.WindowsPreferences.flush()V", false);
        map.put("java.util.logging.LogManager.getLevelProperty(Ljava/lang/String;Ljava/util/logging/Level;)Ljava/util/logging/Level;", true);
        map.put("java.util.Deque.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.zip.CheckedOutputStream.<init>(Ljava/io/OutputStream;Ljava/util/zip/Checksum;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.listIterator()Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.TimeUnit$7.toMicros(J)J", false);
        map.put("java.util.Collections$SynchronizedMap.isEmpty()Z", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.<clinit>()V", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.extract()Ljava/lang/Object;", false);
        map.put("java.util.SortedSet.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.Formatter$FormatSpecifier.checkText()V", false);
        map.put("java.util.TreeMap.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.checkedEntry(Ljava/util/Map$Entry;Ljava/lang/Class;)Ljava/util/Collections$CheckedMap$CheckedEntrySet$CheckedEntry;", false);
        map.put("java.util.regex.Pattern$GroupHead.matchRef(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.CyclicBarrier.dowait(ZJ)I", false);
        map.put("java.util.logging.Filter.isLoggable(Ljava/util/logging/LogRecord;)Z", false);
        map.put("java.util.ArrayDeque.<init>()V", false);
        map.put("java.util.concurrent.Executors$DelegatedExecutorService.isShutdown()Z", false);
        map.put("java.util.AbstractMap$SimpleImmutableEntry.<init>(Ljava/util/Map$Entry;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.grow()V", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndSet(Ljava/lang/Object;J)J", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.hasQueuedThreads()Z", false);
        map.put("java.util.PriorityQueue.<init>(Ljava/util/SortedSet;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.pollLast()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ForkJoinPool.submit(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.Calendar.add(II)V", false);
        map.put("java.util.ServiceLoader.parseLine(Ljava/lang/Class;Ljava/net/URL;Ljava/io/BufferedReader;ILjava/util/List;)I", false);
        map.put("java.util.GregorianCalendar.getGregorianCutoverDate()Lsun/util/calendar/BaseCalendar$Date;", false);
        map.put("java.util.concurrent.TimeUnit$5.excessNanos(JJ)I", true);
        map.put("java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator.prevEntry()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.Formatter$FixedString.<init>(Ljava/util/Formatter;Ljava/lang/String;)V", false);
        map.put("java.util.Collections.lastIndexOfSubList(Ljava/util/List;Ljava/util/List;)I", false);
        map.put("java.util.logging.Handler.getEncoding()Ljava/lang/String;", true);
        map.put("java.util.zip.Inflater.getBytesWritten(J)J", false);
        map.put("java.util.regex.Pattern.intersection(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;)Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.concurrent.LinkedTransferQueue$Itr.remove()V", false);
        map.put("java.util.regex.Pattern$CharProperty.isSatisfiedBy(I)Z", false);
        map.put("java.util.ArrayList$SubList.rangeCheckForAdd(I)V", false);
        map.put("java.util.concurrent.CountDownLatch.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.size()I", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.peekLast()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedTransferQueue.sweep()V", false);
        map.put("java.util.Deque.removeFirst()Ljava/lang/Object;", false);
        map.put("java.util.jar.JavaUtilJarAccessImpl.entryNames(Ljava/util/jar/JarFile;[Ljava/security/CodeSource;)Ljava/util/Enumeration;", false);
        map.put("java.util.Vector.<init>(I)V", false);
        map.put("java.util.regex.Pattern$Curly.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.getOwner()Ljava/lang/Thread;", false);
        map.put("java.util.concurrent.TimeUnit$7.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$Node.casNext(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Z", false);
        map.put("java.util.concurrent.FutureTask$Sync.innerSetException(Ljava/lang/Throwable;)V", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.length()I", true);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.allowCoreThreadTimeOut(Z)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$EntryIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.ArrayList.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.Collections$SingletonMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.regex.Pattern$Branch.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.Arrays.sort([III)V", true);
        map.put("java.util.logging.StreamHandler.getFormatter()Ljava/util/logging/Formatter;", false);
        map.put("java.util.Collection.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.jar.JarFile.getManifestFromReference()Ljava/util/jar/Manifest;", false);
        map.put("java.util.PriorityQueue.initFromCollection(Ljava/util/Collection;)V", false);
        map.put("java.util.HashMap$KeyIterator.<init>(Ljava/util/HashMap;)V", false);
        map.put("java.util.logging.LoggingMXBean.setLoggerLevel(Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.isEmpty()Z", false);
        map.put("java.util.zip.DeflaterInputStream.reset()V", false);
        map.put("java.util.Arrays.deepEquals([Ljava/lang/Object;[Ljava/lang/Object;)Z", true);
        map.put("java.util.ArrayDeque$DeqIterator.<init>(Ljava/util/ArrayDeque;)V", false);
        map.put("java.util.Arrays.toString([Z)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentHashMap.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.AbstractExecutorService.invokeAny(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.Collections$CheckedMap.size()I", false);
        map.put("java.util.IllegalFormatPrecisionException.getMessage()Ljava/lang/String;", false);
        map.put("java.util.TimerThread.run()V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.get(I)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.isHeldExclusively()Z", false);
        map.put("java.util.concurrent.ForkJoinPool.isTerminated()Z", true);
        map.put("java.util.concurrent.SynchronousQueue.size()I", true);
        map.put("java.util.logging.LogManager.access$900(Ljava/util/logging/Logger;Ljava/util/logging/Logger;)V", false);
        map.put("java.util.prefs.WindowsPreferencesFactory.userRoot()Ljava/util/prefs/Preferences;", true);
        map.put("java.util.TreeMap$NavigableSubMap.containsKey(Ljava/lang/Object;)Z", false);
        map.put("java.util.WeakHashMap.containsNullValue()Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.writerShouldBlock()Z", false);
        map.put("java.util.concurrent.LinkedTransferQueue$Itr.advance(Ljava/util/concurrent/LinkedTransferQueue$Node;)V", false);
        map.put("java.util.concurrent.ForkJoinPool.toString()Ljava/lang/String;", false);
        map.put("java.util.Formatter$FormatSpecifier.flags(Ljava/lang/String;)Ljava/util/Formatter$Flags;", false);
        map.put("java.util.ResourceBundle.<init>()V", false);
        map.put("java.util.HashSet.<init>(IFZ)V", false);
        map.put("java.util.concurrent.Executors$PrivilegedCallableUsingCurrentClassLoader.call()Ljava/lang/Object;", true);
        map.put("java.util.regex.UnicodeProp.valueOf(Ljava/lang/String;)Ljava/util/regex/UnicodeProp;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque$AbstractItr.next()Ljava/lang/Object;", false);
        map.put("java.util.Timer.schedule(Ljava/util/TimerTask;J)V", false);
        map.put("java.util.Collections$SynchronizedCollection.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.regex.UnicodeProp$13.is(I)Z", false);
        map.put("java.util.BitSet.checkInvariants()V", false);
        map.put("java.util.Formatter.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.siftUpUsingComparator(ILjava/lang/Object;[Ljava/lang/Object;Ljava/util/Comparator;)V", false);
        map.put("java.util.PropertyPermissionCollection.isReadOnly()Z", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.unlock()V", false);
        map.put("java.util.Hashtable.rehash()V", false);
        map.put("java.util.ArrayList.ensureCapacityInternal(I)V", false);
        map.put("java.util.NavigableSet.descendingSet()Ljava/util/NavigableSet;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.takeFirst()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$10.isSatisfiedBy(I)Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap.<init>(IF)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.descendingKeySet()Ljava/util/NavigableSet;", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.<init>(Ljava/util/concurrent/ConcurrentNavigableMap;)V", false);
        map.put("java.util.regex.Pattern.flags()I", true);
        map.put("java.util.Properties.<init>()V", false);
        map.put("java.util.jar.JarFile.getBytes(Ljava/util/zip/ZipEntry;)[B", true);
        map.put("java.util.jar.JarVerifier$VerifierStream.available()I", true);
        map.put("java.util.Collections$SynchronizedSortedMap.firstKey()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentHashMap.<init>()V", false);
        map.put("java.util.AbstractMap$2.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.prefs.Preferences$1.run()Ljava/lang/Object;", true);
        map.put("java.util.concurrent.SynchronousQueue.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", true);
        map.put("java.util.EnumMap$KeySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.compareAndIncrementWorkerCount(I)Z", false);
        map.put("java.util.GregorianCalendar.getNormalizedCalendar()Ljava/util/GregorianCalendar;", false);
        map.put("java.util.regex.Pattern.range(Ljava/util/regex/Pattern$BitClass;)Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.zip.Inflater.reset()V", false);
        map.put("java.util.BitSet.recalculateWordsInUse()V", false);
        map.put("java.util.concurrent.ForkJoinTask.isCompletedAbnormally()Z", true);
        map.put("java.util.regex.Pattern$CharPropertyNames$21.isSatisfiedBy(I)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.signal()V", false);
        map.put("java.util.concurrent.FutureTask.<init>(Ljava/util/concurrent/Callable;)V", false);
        map.put("java.util.jar.Manifest.<init>(Ljava/io/InputStream;)V", false);
        map.put("java.util.Collections$1.<init>(Ljava/lang/Object;)V", false);
        map.put("java.util.EnumMap$EntrySet.fillEntryArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$DescendingItr.nextNode(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Ljava/util/concurrent/ConcurrentLinkedDeque$Node;", false);
        map.put("java.util.concurrent.SynchronousQueue.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.zip.ZipOutputStream.finish()V", false);
        map.put("java.util.Calendar.computeFields()V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames.defCtype(Ljava/lang/String;I)V", false);
        map.put("java.util.prefs.Base64.base64ToByteArray(Ljava/lang/String;Z)[B", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$Itr.startNode()Ljava/util/concurrent/ConcurrentLinkedDeque$Node;", false);
        map.put("java.util.Collections$EmptyListIterator.previousIndex()I", true);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$Itr.<init>(Ljava/util/concurrent/ConcurrentLinkedDeque;)V", false);
        map.put("java.util.EnumSet.getUniverse(Ljava/lang/Class;)[Ljava/lang/Enum;", false);
        map.put("java.util.PropertyResourceBundle.<init>(Ljava/io/InputStream;)V", false);
        map.put("java.util.zip.Inflater.setDictionary([B)V", false);
        map.put("java.util.regex.Pattern$SingleI.isSatisfiedBy(I)Z", true);
        map.put("java.util.JumboEnumSet.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap$EntryIterator.<init>(Ljava/util/concurrent/ConcurrentHashMap;)V", false);
        map.put("java.util.Collections$EmptyIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.jar.JarEntry.setTime(J)V", false);
        map.put("java.util.Collections$EmptyList.size()I", true);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.compareAndSetState(II)Z", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.set(Ljava/lang/Object;J)V", false);
        map.put("java.util.spi.LocaleNameProvider.getDisplayCountry(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ForkJoinTask.complete(Ljava/lang/Object;)V", false);
        map.put("java.util.prefs.WindowsPreferences.isRemoved()Z", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet$1.next()Ljava/util/Map$Entry;", false);
        map.put("java.util.Calendar$CalendarAccessControlContext.<clinit>()V", false);
        map.put("java.util.zip.DeflaterOutputStream.flush()V", true);
        map.put("java.util.concurrent.LinkedBlockingQueue.poll(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.prefs.Preferences.removePreferenceChangeListener(Ljava/util/prefs/PreferenceChangeListener;)V", false);
        map.put("java.util.IdentityHashMap.putAll(Ljava/util/Map;)V", false);
        map.put("java.util.logging.SocketHandler.setLevel(Ljava/util/logging/Level;)V", false);
        map.put("java.util.TreeMap$KeySet.lower(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.PropertyResourceBundle.<init>(Ljava/io/Reader;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.last()Ljava/lang/Object;", false);
        map.put("java.util.regex.UnicodeProp$8.is(I)Z", false);
        map.put("java.util.TreeMap.access$100(Ljava/util/TreeMap;)I", true);
        map.put("java.util.TreeMap$PrivateEntryIterator.remove()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.prefs.XmlSupport$Resolver.resolveEntity(Ljava/lang/String;Ljava/lang/String;)Lorg/xml/sax/InputSource;", false);
        map.put("java.util.concurrent.Semaphore.<init>(IZ)V", false);
        map.put("java.util.TreeMap$NavigableSubMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.PropertyPermission.hashCode()I", false);
        map.put("java.util.concurrent.TimeUnit$6.toHours(J)J", true);
        map.put("java.util.regex.Pattern.isLineSeparator(I)Z", true);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegOpenKey(I[BI)[I", false);
        map.put("java.util.concurrent.ConcurrentHashMap$KeyIterator.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.HashMap$HashIterator.nextEntry()Ljava/util/HashMap$Entry;", false);
        map.put("java.util.logging.LogManager.getBooleanProperty(Ljava/lang/String;Z)Z", true);
        map.put("java.util.Iterator.hasNext()Z", false);
        map.put("java.util.ListIterator.add(Ljava/lang/Object;)V", false);
        map.put("java.util.regex.ASCII.isAscii(I)Z", true);
        map.put("java.util.AbstractSequentialList.remove(I)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.unlinkCancelledWaiters()V", false);
        map.put("java.util.prefs.Preferences.access$000()Ljava/util/prefs/PreferencesFactory;", false);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegFlushKey(I)I", false);
        map.put("java.util.DualPivotQuicksort.sort([JII)V", true);
        map.put("java.util.concurrent.ForkJoinTask.getException()Ljava/lang/Throwable;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.first()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$BitClass.<init>()V", false);
        map.put("java.util.PropertyPermission.getActions(I)Ljava/lang/String;", false);
        map.put("java.util.logging.LogManager.readConfiguration(Ljava/io/InputStream;)V", false);
        map.put("java.util.concurrent.Executors$DelegatedScheduledExecutorService.scheduleWithFixedDelay(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", false);
        map.put("java.util.concurrent.Exchanger.hashIndex()I", true);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.removeFirstOccurrence(Ljava/lang/Object;)Z", false);
        map.put("java.util.jar.JarFile.isKnownToNotHaveClassPathAttribute()Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.getWriteHoldCount()I", true);
        map.put("java.util.Arrays.toString([S)Ljava/lang/String;", false);
        map.put("java.util.Hashtable$Entry.hashCode()I", false);
        map.put("java.util.WeakHashMap.indexFor(II)I", true);
        map.put("java.util.LinkedHashMap$LinkedHashIterator.<init>(Ljava/util/LinkedHashMap;Ljava/util/LinkedHashMap$1;)V", false);
        map.put("java.util.regex.Pattern$CIBackRef.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.remove()V", false);
        map.put("java.util.regex.Pattern$Slice.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.LinkedBlockingQueue$Node.<init>(Ljava/lang/Object;)V", false);
        map.put("java.util.XMLUtils.<clinit>()V", false);
        map.put("java.util.TreeMap$Entry.hashCode()I", false);
        map.put("java.util.concurrent.ForkJoinPool.getParallelism()I", true);
        map.put("java.util.DuplicateFormatFlagsException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.zip.ZipOutputStream.writeShort(I)V", false);
        map.put("java.util.concurrent.ForkJoinTask.adapt(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.concurrent.DelayQueue.offer(Ljava/util/concurrent/Delayed;)Z", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$22.<init>()V", false);
        map.put("java.util.ResourceBundle$SingleFormatControl.<clinit>()V", false);
        map.put("java.util.Collections$SynchronizedMap.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque$Itr.<init>(Ljava/util/concurrent/LinkedBlockingDeque;)V", false);
        map.put("java.util.concurrent.BlockingDeque.size()I", false);
        map.put("java.util.logging.Logger.finest(Ljava/lang/String;)V", true);
        map.put("java.util.zip.ZipEntry.getTime()J", false);
        map.put("java.util.concurrent.ConcurrentHashMap$WriteThroughEntry.<init>(Ljava/util/concurrent/ConcurrentHashMap;Ljava/lang/Object;Ljava/lang/Object;)V", false);
        map.put("java.util.HashMap$EntrySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.logging.LogManager.contexts()Ljava/util/List;", false);
        map.put("java.util.EnumMap$EntryIterator$Entry.getKey()Ljava/lang/Object;", true);
        map.put("java.util.prefs.AbstractPreferences.clear()V", false);
        map.put("java.util.Collections.rotate1(Ljava/util/List;I)V", false);
        map.put("java.util.BitSet.clone()Ljava/lang/Object;", false);
        map.put("java.util.Locale.getDisplayVariant(Ljava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.Locale.convertOldISOCodes(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.Formatter.access$200()D", true);
        map.put("java.util.SimpleTimeZone.setRawOffset(I)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.getWaitQueueLength()I", false);
        map.put("java.util.Vector.setElementAt(Ljava/lang/Object;I)V", false);
        map.put("java.util.regex.Pattern.escape(ZZ)I", false);
        map.put("java.util.concurrent.ExecutorService.submit(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.concurrent.TimeUnit$1.toDays(J)J", true);
        map.put("java.util.ArrayDeque$DescendingIterator.remove()V", false);
        map.put("java.util.zip.ZipFile.getEntryTime(J)J", false);
        map.put("java.util.IdentityHashMap.access$100(Ljava/util/IdentityHashMap;)[Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.entryIterator()Ljava/util/Iterator;", false);
        map.put("java.util.Vector$ListItr.<init>(Ljava/util/Vector;I)V", false);
        map.put("java.util.Formatter$FormatSpecifier.adjustWidth(ILjava/util/Formatter$Flags;Z)I", true);
        map.put("java.util.UUID.timestamp()J", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.first()Ljava/util/concurrent/ConcurrentLinkedQueue$Node;", false);
        map.put("java.util.Scanner$1.hasName(Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.headMap(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.concurrent.ForkJoinTask.cancel(Z)Z", false);
        map.put("java.util.concurrent.ForkJoinTask.pollTask()Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.concurrent.ExecutorService.invokeAll(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/util/List;", false);
        map.put("java.util.logging.LogRecord.getMessage()Ljava/lang/String;", true);
        map.put("java.util.concurrent.Delayed.getDelay(Ljava/util/concurrent/TimeUnit;)J", false);
        map.put("java.util.HashSet.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.HashMap$KeySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$AbstractItr.hasNext()Z", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.hiNode()Ljava/util/concurrent/ConcurrentSkipListMap$Node;", true);
        map.put("java.util.regex.Pattern$BnMS.<init>([I[I[ILjava/util/regex/Pattern$Node;)V", false);
        map.put("java.util.ArrayDeque$DescendingIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.ServiceLoader$LazyIterator.<init>(Ljava/util/ServiceLoader;Ljava/lang/Class;Ljava/lang/ClassLoader;Ljava/util/ServiceLoader$1;)V", false);
        map.put("java.util.Collections$SynchronizedList.subList(II)Ljava/util/List;", false);
        map.put("java.util.Collections$UnmodifiableMap.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.TimerTask.run()V", false);
        map.put("java.util.HashMap$EntrySet.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V", false);
        map.put("java.util.regex.Pattern.atom()Ljava/util/regex/Pattern$Node;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.getFirstQueuedThread()Ljava/lang/Thread;", true);
        map.put("java.util.Deque.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next()Ljava/util/Map$Entry;", false);
        map.put("java.util.LinkedList.offerLast(Ljava/lang/Object;)Z", false);
        map.put("java.util.Scanner.hasNextLong()Z", false);
        map.put("java.util.ArrayDeque.access$500(Ljava/util/ArrayDeque;I)Z", false);
        map.put("java.util.ResourceBundle$CacheKey.<init>(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)V", false);
        map.put("java.util.TreeMap$NavigableSubMap.isEmpty()Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator.advance()V", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.Collections$SynchronizedSortedMap.lastKey()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.pollLast()Ljava/lang/Object;", false);
        map.put("java.util.zip.Inflater.inflateBytes(J[BII)I", false);
        map.put("java.util.ResourceBundle$RBClassLoader.access$000()Ljava/util/ResourceBundle$RBClassLoader;", true);
        map.put("java.util.zip.GZIPOutputStream.writeInt(I[BI)V", true);
        map.put("java.util.GregorianCalendar.getJulianCalendarSystem()Lsun/util/calendar/BaseCalendar;", false);
        map.put("java.util.logging.FileHandler.<init>()V", false);
        map.put("java.util.AbstractSet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.prefs.AbstractPreferences.node(Ljava/util/StringTokenizer;)Ljava/util/prefs/Preferences;", false);
        map.put("java.util.EnumMap$EntrySet.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWIterator.nextIndex()I", true);
        map.put("java.util.Collections$2.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.Scanner.<init>(Ljava/io/File;Ljava/nio/charset/CharsetDecoder;)V", false);
        map.put("java.util.regex.Pattern$LazyLoop.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.TreeMap$NavigableSubMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.higher(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.JapaneseImperialCalendar.getLeastMaximum(I)I", true);
        map.put("java.util.concurrent.PriorityBlockingQueue.<init>(I)V", false);
        map.put("java.util.logging.LogManager.removePropertyChangeListener(Ljava/beans/PropertyChangeListener;)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue$Itr.hasNext()Z", true);
        map.put("java.util.MissingFormatArgumentException.getFormatSpecifier()Ljava/lang/String;", true);
        map.put("java.util.LinkedList$ListItr.hasPrevious()Z", true);
        map.put("java.util.Collections$CheckedList$1.remove()V", false);
        map.put("java.util.regex.PatternSyntaxException.getDescription()Ljava/lang/String;", true);
        map.put("java.util.concurrent.LinkedBlockingQueue$Itr.hasNext()Z", true);
        map.put("java.util.Locale.getISOCountries()[Ljava/lang/String;", false);
        map.put("java.util.IdentityHashMap.values()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.atomic.AtomicMarkableReference.<init>(Ljava/lang/Object;Z)V", false);
        map.put("java.util.concurrent.ConcurrentHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ConcurrentHashMap.<init>(Ljava/util/Map;)V", false);
        map.put("java.util.Currency.getNumericCode()I", true);
        map.put("java.util.regex.ASCII.isType(II)Z", true);
        map.put("java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator.removeDescending()V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.getContinueExistingPeriodicTasksAfterShutdownPolicy()Z", true);
        map.put("java.util.concurrent.TransferQueue.tryTransfer(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.BlockingDeque.takeLast()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$2.<init>(II)V", false);
        map.put("java.util.concurrent.ForkJoinTask$AdaptedCallable.invoke()Ljava/lang/Object;", false);
        map.put("java.util.SimpleTimeZone.clone()Ljava/lang/Object;", false);
        map.put("java.util.TimSort.mergeLo(IIII)V", false);
        map.put("java.util.logging.FileHandler.flush()V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;I)Z", false);
        map.put("java.util.concurrent.FutureTask.get(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicLong.compareAndSet(JJ)Z", false);
        map.put("java.util.logging.LogRecord.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue.poll(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.zip.InflaterOutputStream.finish()V", false);
        map.put("java.util.regex.Pattern$UnixDot.isSatisfiedBy(I)Z", true);
        map.put("java.util.GregorianCalendar.computeFields(II)I", false);
        map.put("java.util.LinkedHashMap$Entry.access$600(Ljava/util/LinkedHashMap$Entry;Ljava/util/LinkedHashMap$Entry;)V", false);
        map.put("java.util.RegularEnumSet$EnumSetIterator.<init>(Ljava/util/RegularEnumSet;)V", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry.toString()Ljava/lang/String;", false);
        map.put("java.util.regex.Pattern$BranchConn.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.Stack.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.ArrayList$SubList.rangeCheck(I)V", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.<init>(I)V", false);
        map.put("java.util.jar.JarVerifier.<clinit>()V", false);
        map.put("java.util.Map.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$EntrySet.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.keySet()Ljava/util/NavigableSet;", false);
        map.put("java.util.Vector.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.locks.ReentrantLock$FairSync.getExclusiveOwnerThread()Ljava/lang/Thread;", false);
        map.put("java.util.Collections$UnmodifiableList$1.previousIndex()I", false);
        map.put("java.util.Locale$Cache.createObject(Ljava/util/Locale$LocaleKey;)Ljava/util/Locale;", false);
        map.put("java.util.GregorianCalendar.setGregorianChange(J)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.clone()Ljava/util/concurrent/ConcurrentSkipListSet;", false);
        map.put("java.util.BitSet.set(I)V", false);
        map.put("java.util.logging.Logger.severe(Ljava/lang/String;)V", true);
        map.put("java.util.Collections$CheckedMap.putAll(Ljava/util/Map;)V", false);
        map.put("java.util.Vector.isEmpty()Z", true);
        map.put("java.util.concurrent.BlockingDeque.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.ResourceBundle.<clinit>()V", false);
        map.put("java.util.Calendar.getZone()Ljava/util/TimeZone;", true);
        map.put("java.util.Arrays.fill([CIIC)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.ceilingKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.ArrayList$SubList$1.next()Ljava/lang/Object;", false);
        map.put("java.util.AbstractMap$SimpleEntry.getKey()Ljava/lang/Object;", true);
        map.put("java.util.concurrent.LinkedBlockingDeque.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.LinkedBlockingDeque$AbstractItr.<init>(Ljava/util/concurrent/LinkedBlockingDeque;)V", false);
        map.put("java.util.ResourceBundle$Control.<init>()V", true);
        map.put("java.util.PriorityQueue$Itr.<init>(Ljava/util/PriorityQueue;Ljava/util/PriorityQueue$1;)V", false);
        map.put("java.util.logging.LogManager.access$602(Ljava/util/logging/LogManager;Z)Z", false);
        map.put("java.util.zip.InflaterInputStream.<init>(Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V", false);
        map.put("java.util.concurrent.Executors$PrivilegedCallableUsingCurrentClassLoader.<init>(Ljava/util/concurrent/Callable;)V", false);
        map.put("java.util.WeakHashMap$Values.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.jar.Pack200.newPacker()Ljava/util/jar/Pack200$Packer;", false);
        map.put("java.util.IdentityHashMap$EntrySet.clear()V", false);
        map.put("java.util.regex.Pattern$Loop.matchInit(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.jar.JarFile$1.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.ReentrantLock.toString()Ljava/lang/String;", false);
        map.put("java.util.ArrayList.ensureCapacity(I)V", false);
        map.put("java.util.Map.containsValue(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.<init>()V", false);
        map.put("java.util.concurrent.SynchronousQueue.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.HashSet.<init>(I)V", false);
        map.put("java.util.prefs.Preferences.getFloat(Ljava/lang/String;F)F", false);
        map.put("java.util.DuplicateFormatFlagsException.getFlags()Ljava/lang/String;", true);
        map.put("java.util.regex.Pattern$NotBehind.<init>(Ljava/util/regex/Pattern$Node;II)V", false);
        map.put("java.util.concurrent.ConcurrentHashMap$HashIterator.hasMoreElements()Z", true);
        map.put("java.util.MissingFormatWidthException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.TreeMap$KeySet.headSet(Ljava/lang/Object;Z)Ljava/util/NavigableSet;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.runStateOf(I)I", true);
        map.put("java.util.WeakHashMap$KeySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.LinkedHashMap.<init>(I)V", false);
        map.put("java.util.Locale.readResolve()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.TimeoutException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.Arrays.binarySearch([JIIJ)I", true);
        map.put("java.util.IdentityHashMap$EntryIterator$Entry.toString()Ljava/lang/String;", false);
        map.put("java.util.regex.Pattern$Curly.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.indexOf(Ljava/lang/Object;)I", true);
        map.put("java.util.Collection.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.zip.ZipEntry.dosToJavaTime(J)J", false);
        map.put("java.util.regex.Pattern.producePermutations(Ljava/lang/String;)[Ljava/lang/String;", false);
        map.put("java.util.concurrent.DelayQueue.remainingCapacity()I", true);
        map.put("java.util.concurrent.ConcurrentHashMap.clear()V", false);
        map.put("java.util.concurrent.DelayQueue.poll(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.EnumMap$EntrySet.<init>(Ljava/util/EnumMap;)V", false);
        map.put("java.util.Formatter.flush()V", false);
        map.put("java.util.Scanner.clearCaches()V", false);
        map.put("java.util.logging.ErrorManager.error(Ljava/lang/String;Ljava/lang/Exception;I)V", false);
        map.put("java.util.TreeMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.JapaneseImperialCalendar.getFixedDateJan1(Lsun/util/calendar/LocalGregorianCalendar$Date;J)J", false);
        map.put("java.util.regex.Pattern$Curly.match1(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)Z", false);
        map.put("java.util.SubList.access$208(Ljava/util/SubList;)I", false);
        map.put("java.util.concurrent.Semaphore$Sync.nonfairTryAcquireShared(I)I", false);
        map.put("java.util.Arrays.binarySearch0([Ljava/lang/Object;IILjava/lang/Object;Ljava/util/Comparator;)I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.Properties.storeToXML(Ljava/io/OutputStream;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter.remove()V", false);
        map.put("java.util.Currency.getDefaultFractionDigits()I", true);
        map.put("java.util.Locale$1.<clinit>()V", false);
        map.put("java.util.TimSort.<clinit>()V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.unlock()V", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.TreeMap$AscendingSubMap.keyIterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.add(Ljava/lang/Runnable;)Z", false);
        map.put("java.util.TreeMap$NavigableSubMap.firstKey()Ljava/lang/Object;", false);
        map.put("java.util.prefs.AbstractPreferences.childrenNames()[Ljava/lang/String;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.remove()Ljava/lang/Object;", false);
        map.put("java.util.logging.Logger$LoggerHelper$1.run()Ljava/lang/Object;", true);
        map.put("java.util.TreeMap.rightOf(Ljava/util/TreeMap$Entry;)Ljava/util/TreeMap$Entry;", true);
        map.put("java.util.concurrent.Executors.callable(Ljava/lang/Runnable;)Ljava/util/concurrent/Callable;", false);
        map.put("java.util.HashMap.entrySet0()Ljava/util/Set;", false);
        map.put("java.util.jar.JarInputStream.checkManifest(Ljava/util/jar/JarEntry;)Ljava/util/jar/JarEntry;", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;ZJ)Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.TimeZone.observesDaylightTime()Z", false);
        map.put("java.util.prefs.Preferences$2.run()Ljava/lang/Object;", false);
        map.put("java.util.ComparableTimSort.mergeHi(IIII)V", false);
        map.put("java.util.regex.Pattern$Neg.<init>(Ljava/util/regex/Pattern$Node;)V", false);
        map.put("java.util.zip.DeflaterOutputStream.<init>(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)V", false);
        map.put("java.util.Collections$UnmodifiableCollection.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue$Node.<init>(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue.isEmpty()Z", true);
        map.put("java.util.Scanner.<init>(Ljava/nio/channels/ReadableByteChannel;)V", false);
        map.put("java.util.zip.ZipOutputStream.<init>(Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.<init>()V", true);
        map.put("java.util.concurrent.atomic.AtomicInteger.weakCompareAndSet(II)Z", false);
        map.put("java.util.LinkedList.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.regex.ASCII.isLower(I)Z", true);
        map.put("java.util.concurrent.Executors$DelegatedExecutorService.awaitTermination(JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.tooHigh(Ljava/lang/Object;)Z", false);
        map.put("java.util.SortedSet.size()I", false);
        map.put("java.util.SubList.access$200(Ljava/util/SubList;)I", true);
        map.put("java.util.Vector$1.hasMoreElements()Z", true);
        map.put("java.util.concurrent.locks.Condition.await(JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.Hashtable$Holder.<init>()V", true);
        map.put("java.util.concurrent.SynchronousQueue$TransferQueue$QNode.tryCancel(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ConcurrentHashMap.replace(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipFile.getEntryFlag(J)I", false);
        map.put("java.util.concurrent.LinkedTransferQueue$Itr.<init>(Ljava/util/concurrent/LinkedTransferQueue;)V", false);
        map.put("java.util.Observable.<init>()V", false);
        map.put("java.util.SimpleTimeZone.<init>(ILjava/lang/String;IIIIIIII)V", false);
        map.put("java.util.Hashtable$EntrySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.zip.ZipFile.getName()Ljava/lang/String;", true);
        map.put("java.util.concurrent.locks.ReentrantLock$FairSync.lock()V", false);
        map.put("java.util.concurrent.SynchronousQueue.removeAll(Ljava/util/Collection;)Z", true);
        map.put("java.util.GregorianCalendar.setZoneShared(Z)V", false);
        map.put("java.util.Collections$CheckedMap.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicReference.weakCompareAndSet(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.TimeUnit$7.excessNanos(JJ)I", true);
        map.put("java.util.prefs.Preferences.putFloat(Ljava/lang/String;F)V", false);
        map.put("java.util.prefs.AbstractPreferences.nodeExists(Ljava/util/StringTokenizer;)Z", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.isPeriodic()Z", true);
        map.put("java.util.Collections$CheckedCollection.typeCheck(Ljava/lang/Object;)V", false);
        map.put("java.util.GregorianCalendar.getMaximum(I)I", true);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.isWriteLockedByCurrentThread()Z", false);
        map.put("java.util.prefs.AbstractPreferences.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.doubleValue()D", true);
        map.put("java.util.Scanner.useDelimiter(Ljava/util/regex/Pattern;)Ljava/util/Scanner;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Node.<init>(Ljava/util/concurrent/ConcurrentSkipListMap$Node;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.toArrayList()Ljava/util/ArrayList;", false);
        map.put("java.util.concurrent.TimeUnit.toHours(J)J", false);
        map.put("java.util.concurrent.atomic.AtomicMarkableReference.isMarked()Z", true);
        map.put("java.util.prefs.WindowsPreferences.openKey(I)I", false);
        map.put("java.util.regex.UnicodeProp$1.is(I)Z", true);
        map.put("java.util.Collections.unmodifiableList(Ljava/util/List;)Ljava/util/List;", false);
        map.put("java.util.concurrent.AbstractExecutorService.submit(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.<init>()V", true);
        map.put("java.util.NoSuchElementException.<init>()V", false);
        map.put("java.util.concurrent.PriorityBlockingQueue$Itr.next()Ljava/lang/Object;", false);
        map.put("java.util.GregorianCalendar.getMinimum(I)I", true);
        map.put("java.util.ResourceBundle$Control$CandidateListCache.createObject(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater.<init>()V", true);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.removeLastOccurrence(Ljava/lang/Object;)Z", false);
        map.put("java.util.Arrays.binarySearch0([SIIS)I", true);
        map.put("java.util.prefs.NodeChangeListener.childRemoved(Ljava/util/prefs/NodeChangeEvent;)V", false);
        map.put("java.util.JapaneseImperialCalendar.<init>(Ljava/util/TimeZone;Ljava/util/Locale;)V", false);
        map.put("java.util.concurrent.BlockingDeque.putFirst(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.<init>(Z)V", false);
        map.put("java.util.zip.CheckedOutputStream.write(I)V", false);
        map.put("java.util.JapaneseImperialCalendar.get(I)I", false);
        map.put("java.util.BitSet.flip(II)V", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.containsAll(Ljava/util/Collection;)Z", true);
        map.put("java.util.Arrays.legacyMergeSort([Ljava/lang/Object;Ljava/util/Comparator;)V", false);
        map.put("java.util.Collections.rotate(Ljava/util/List;I)V", false);
        map.put("java.util.concurrent.ForkJoinPool.submit(Ljava/lang/Runnable;)Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.concurrent.locks.LockSupport.parkUntil(J)V", false);
        map.put("java.util.jar.JarVerifier.mapSignersToCertArray([Ljava/security/CodeSigner;)[Ljava/security/cert/Certificate;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.<clinit>()V", false);
        map.put("java.util.jar.Manifest.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.toString()Ljava/lang/String;", false);
        map.put("java.util.Calendar.getActualMinimum(I)I", true);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.getExclusiveQueuedThreads()Ljava/util/Collection;", false);
        map.put("java.util.Collections$CopiesList.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.Arrays.fill([CC)V", true);
        map.put("java.util.concurrent.SynchronousQueue$LifoWaitQueue.<init>()V", true);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.schedule(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", false);
        map.put("java.util.Formatter$FormatSpecifier$BigDecimalLayout.layout(Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;)V", false);
        map.put("java.util.logging.FileHandler$MeteredStream.write([BII)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.poll()Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$DescendingSubMap.absHighest()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.getWaitingThreads()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.Executors$PrivilegedThreadFactory.newThread(Ljava/lang/Runnable;)Ljava/lang/Thread;", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.subMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.Collections$CheckedMap.isEmpty()Z", false);
        map.put("java.util.logging.FileHandler.open(Ljava/io/File;Z)V", false);
        map.put("java.util.concurrent.RecursiveTask.<init>()V", true);
        map.put("java.util.Collections.unmodifiableSortedMap(Ljava/util/SortedMap;)Ljava/util/SortedMap;", false);
        map.put("java.util.zip.Inflater.<init>(Z)V", false);
        map.put("java.util.concurrent.TimeUnit$2.toHours(J)J", true);
        map.put("java.util.zip.CRC32.update([B)V", false);
        map.put("java.util.jar.JarFile.access$100(Ljava/util/jar/JarFile;)Ljava/util/jar/JarVerifier;", true);
        map.put("java.util.jar.JarOutputStream.write([BII)V", false);
        map.put("java.util.Arrays.fill([Ljava/lang/Object;Ljava/lang/Object;)V", true);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry.badValueMsg(Ljava/lang/Object;)Ljava/lang/String;", false);
        map.put("java.util.prefs.AbstractPreferences.keysSpi()[Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.findFirst()Ljava/util/concurrent/ConcurrentSkipListMap$Node;", false);
        map.put("java.util.Collections$EmptyListIterator.<init>()V", true);
        map.put("java.util.Hashtable.hash(Ljava/lang/Object;)I", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.clear()V", false);
        map.put("java.util.TreeMap$AscendingSubMap$AscendingEntrySetView.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.EnumMap.<init>(Ljava/lang/Class;)V", false);
        map.put("java.util.regex.Pattern$Begin.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.zip.ZipFile.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.prefs.InvalidPreferencesFormatException.<init>(Ljava/lang/String;Ljava/lang/Throwable;)V", false);
        map.put("java.util.GregorianCalendar.getWeekNumber(JJ)I", true);
        map.put("java.util.jar.JarVerifier$2.hasMoreElements()Z", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.<init>(I)V", false);
        map.put("java.util.regex.Pattern.single()I", false);
        map.put("java.util.Calendar.getFirstDayOfWeek()I", true);
        map.put("java.util.BitSet.valueOf([B)Ljava/util/BitSet;", false);
        map.put("java.util.concurrent.ForkJoinTask.invokeAll(Ljava/util/Collection;)Ljava/util/Collection;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.tryLock(JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitUninterruptibly()V", false);
        map.put("java.util.UUID.getMostSignificantBits()J", true);
        map.put("java.util.logging.Logger.removeChildLogger(Ljava/util/logging/LogManager$LoggerWeakRef;)V", false);
        map.put("java.util.Collections$CheckedSortedSet.subSet(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.List.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.RegularEnumSet.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.HashMap$KeySet.<init>(Ljava/util/HashMap;)V", false);
        map.put("java.util.Collections$AsLIFOQueue.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.AbstractSequentialList.listIterator(I)Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.Semaphore.<init>(I)V", false);
        map.put("java.util.JapaneseImperialCalendar.computeFields(II)I", false);
        map.put("java.util.TreeMap.computeRedLevel(I)I", true);
        map.put("java.util.logging.Handler.<clinit>()V", false);
        map.put("java.util.concurrent.ForkJoinTask.fork()Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.access$000()V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.jar.Manifest.parseName([BI)Ljava/lang/String;", false);
        map.put("java.util.jar.JarEntry.getTime()J", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.compareAndSet(Ljava/lang/Object;JJ)Z", false);
        map.put("java.util.prefs.WindowsPreferences.syncSpi()V", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Node.casNext(Ljava/util/concurrent/ConcurrentSkipListMap$Node;Ljava/util/concurrent/ConcurrentSkipListMap$Node;)Z", false);
        map.put("java.util.EmptyStackException.<init>()V", false);
        map.put("java.util.jar.Attributes.write(Ljava/io/DataOutputStream;)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock.<init>(Z)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater.<init>()V", true);
        map.put("java.util.Date.<init>(IIIIII)V", false);
        map.put("java.util.Arrays.sort([F)V", false);
        map.put("java.util.Calendar.setWeekCountData(Ljava/util/Locale;)V", false);
        map.put("java.util.logging.LogManager$6.run()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ExecutorCompletionService.<init>(Ljava/util/concurrent/Executor;Ljava/util/concurrent/BlockingQueue;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.ForkJoinTask$AdaptedRunnable.run()V", false);
        map.put("java.util.concurrent.DelayQueue.poll(JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/Delayed;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.removeLast()Ljava/lang/Object;", false);
        map.put("java.util.Scanner.throwFor()V", false);
        map.put("java.util.zip.ZipEntry.setSize(J)V", false);
        map.put("java.util.jar.Manifest.clone()Ljava/lang/Object;", false);
        map.put("java.util.GregorianCalendar.hashCode()I", false);
        map.put("java.util.regex.UnicodeProp$14.is(I)Z", false);
        map.put("java.util.prefs.WindowsPreferences.childrenNamesSpi()[Ljava/lang/String;", false);
        map.put("java.util.zip.CheckedInputStream.getChecksum()Ljava/util/zip/Checksum;", true);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.shouldParkAfterFailedAcquire(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z", false);
        map.put("java.util.ResourceBundle$NoFallbackControl.<clinit>()V", false);
        map.put("java.util.EnumMap$EntrySet.size()I", true);
        map.put("java.util.List.add(ILjava/lang/Object;)V", false);
        map.put("java.util.AbstractMap.toString()Ljava/lang/String;", false);
        map.put("java.util.TreeMap$SubMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.concurrent.atomic.AtomicBoolean.toString()Ljava/lang/String;", true);
        map.put("java.util.GregorianCalendar.isWeekDateSupported()Z", true);
        map.put("java.util.concurrent.TimeUnit$3.toMinutes(J)J", true);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getValue()Ljava/lang/Object;", false);
        map.put("java.util.Scanner.hasNextLong(I)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isOnSyncQueue(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)Z", true);
        map.put("java.util.Collections$SetFromMap.clear()V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.<clinit>()V", false);
        map.put("java.util.logging.StreamHandler.<init>(Ljava/io/OutputStream;Ljava/util/logging/Formatter;)V", false);
        map.put("java.util.TreeMap$KeySet.tailSet(Ljava/lang/Object;Z)Ljava/util/NavigableSet;", false);
        map.put("java.util.TimSort.sort([Ljava/lang/Object;Ljava/util/Comparator;)V", false);
        map.put("java.util.zip.ZipFile.ensureOpenOrZipException()V", false);
        map.put("java.util.concurrent.Executors$PrivilegedThreadFactory.<init>()V", false);
        map.put("java.util.Formatter$FormatSpecifier.<clinit>()V", false);
        map.put("java.util.concurrent.BlockingDeque.offer(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Hashtable.getEnumeration(I)Ljava/util/Enumeration;", false);
        map.put("java.util.Date.UTC(IIIIII)J", false);
        map.put("java.util.zip.DeflaterOutputStream.<init>(Ljava/io/OutputStream;Ljava/util/zip/Deflater;IZ)V", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferStack.clean(Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue.put(Ljava/lang/Object;)V", false);
        map.put("java.util.Collections$SynchronizedCollection.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.TreeMap.<clinit>()V", false);
        map.put("java.util.Arrays.binarySearch([FIIF)I", false);
        map.put("java.util.concurrent.atomic.AtomicMarkableReference$Pair.<init>(Ljava/lang/Object;Z)V", false);
        map.put("java.util.logging.LogManager.access$400(Ljava/util/logging/LogManager;)Ljava/util/logging/LogManager$LoggerContext;", true);
        map.put("java.util.zip.ZipOutputStream$XEntry.<init>(Ljava/util/zip/ZipEntry;J)V", false);
        map.put("java.util.concurrent.CountDownLatch$Sync.getState()I", false);
        map.put("java.util.logging.Logger.log(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Object;)V", true);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.<init>(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)V", false);
        map.put("java.util.Collections$SynchronizedMap.hashCode()I", false);
        map.put("java.util.ArrayDeque.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.TreeSet.headSet(Ljava/lang/Object;Z)Ljava/util/NavigableSet;", false);
        map.put("java.util.Date.setYear(I)V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$AbortPolicy.<init>()V", true);
        map.put("java.util.concurrent.Semaphore$FairSync.tryAcquireShared(I)I", false);
        map.put("java.util.BitSet.valueOf(Ljava/nio/ByteBuffer;)Ljava/util/BitSet;", false);
        map.put("java.util.concurrent.ForkJoinTask.helpExpungeStaleExceptions()V", false);
        map.put("java.util.Collections$EmptyMap.containsValue(Ljava/lang/Object;)Z", true);
        map.put("java.util.logging.Logger.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;)V", false);
        map.put("java.util.Collections$CheckedList.indexOf(Ljava/lang/Object;)I", false);
        map.put("java.util.regex.Pattern$LazyLoop.matchInit(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.Arrays.sort([D)V", false);
        map.put("java.util.JapaneseImperialCalendar.getFixedDate(III)J", false);
        map.put("java.util.Collections$SingletonList.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.Collections$SynchronizedMap.containsValue(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireSharedNanos(JJ)Z", false);
        map.put("java.util.jar.JarOutputStream.set16([BII)V", true);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireInterruptibly(J)V", false);
        map.put("java.util.Scanner.nextLong()J", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.getAndAdd(IJ)J", false);
        map.put("java.util.zip.Inflater.getRemaining()I", true);
        map.put("java.util.NavigableMap.higherEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.concurrent.CountDownLatch$Sync.tryReleaseShared(I)Z", false);
        map.put("java.util.ResourceBundle$Control.needsReload(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle;J)Z", false);
        map.put("java.util.concurrent.atomic.AtomicLong.longValue()J", true);
        map.put("java.util.Vector.trimToSize()V", false);
        map.put("java.util.AbstractQueue.element()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern.parsePastWhitespace(I)I", false);
        map.put("java.util.logging.LoggingProxyImpl.log(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Throwable;)V", true);
        map.put("java.util.concurrent.ForkJoinPool$ManagedBlocker.block()Z", false);
        map.put("java.util.Observer.update(Ljava/util/Observable;Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$EntrySet.<init>(Ljava/util/concurrent/ConcurrentNavigableMap;)V", false);
        map.put("java.util.regex.Pattern$StartS.<init>(Ljava/util/regex/Pattern$Node;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.size()I", true);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.ensurePrestart()V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getWaitQueueLength(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)I", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferStack$SNode.tryCancel()V", false);
        map.put("java.util.TreeMap$DescendingSubMap.absFloor(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.IllformedLocaleException.getErrorIndex()I", true);
        map.put("java.util.zip.ZipFile$1.hasMoreElements()Z", true);
        map.put("java.util.PriorityQueue.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.regex.Pattern$NotBehindS.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.zip.Adler32.<clinit>()V", false);
        map.put("java.util.Arrays.sort([Ljava/lang/Object;Ljava/util/Comparator;)V", false);
        map.put("java.util.Hashtable$EntrySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.removeAt(I)V", false);
        map.put("java.util.Formatter.getZero(Ljava/util/Locale;)C", true);
        map.put("java.util.regex.Pattern$LazyLoop.<init>(II)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.headMap(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.Formatter$Conversion.<init>()V", true);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node.<init>(Ljava/lang/Thread;I)V", false);
        map.put("java.util.prefs.Preferences.parent()Ljava/util/prefs/Preferences;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.casHead(Ljava/util/concurrent/ConcurrentSkipListMap$HeadIndex;Ljava/util/concurrent/ConcurrentSkipListMap$HeadIndex;)Z", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater.compareAndSet(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.peek()Ljava/lang/Object;", false);
        map.put("java.util.HashSet.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.Scanner.hasNextShort(I)Z", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.start()V", false);
        map.put("java.util.EnumMap$KeySet.remove(Ljava/lang/Object;)Z", true);
        map.put("java.util.IllegalFormatPrecisionException.<init>(I)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$EntrySet.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.isEmpty()Z", false);
        map.put("java.util.HashMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.Currency.readIntArray(Ljava/io/DataInputStream;I)[I", false);
        map.put("java.util.concurrent.ForkJoinTask.get()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicStampedReference.weakCompareAndSet(Ljava/lang/Object;Ljava/lang/Object;II)Z", false);
        map.put("java.util.Arrays.sort([J)V", true);
        map.put("java.util.logging.LogManager$RootLogger.getHandlers()[Ljava/util/logging/Handler;", false);
        map.put("java.util.Hashtable.clear()V", false);
        map.put("java.util.zip.CRC32.update(II)I", false);
        map.put("java.util.concurrent.ForkJoinTask.helpQuiesce()V", false);
        map.put("java.util.JapaneseImperialCalendar.checkDisplayNameParams(IIIILjava/util/Locale;I)Z", false);
        map.put("java.util.logging.LoggingProxyImpl.<clinit>()V", false);
        map.put("java.util.GregorianCalendar.getLeastMaximum(I)I", true);
        map.put("java.util.BitSet.ensureCapacity(I)V", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.poll()Ljava/lang/Object;", false);
        map.put("java.util.TreeSet.isEmpty()Z", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubList.checkForComodification()V", false);
        map.put("java.util.Vector.lastIndexOf(Ljava/lang/Object;)I", true);
        map.put("java.util.WeakHashMap.size()I", false);
        map.put("java.util.zip.ZipCoder.toString([B)Ljava/lang/String;", false);
        map.put("java.util.zip.ZipEntry.getSize()J", true);
        map.put("java.util.Calendar.isSet(I)Z", true);
        map.put("java.util.Collections$SynchronizedMap.size()I", false);
        map.put("java.util.zip.ZipFile.getCommentBytes(J)[B", false);
        map.put("java.util.HashMap.<init>(Ljava/util/Map;)V", false);
        map.put("java.util.Currency.access$100(Ljava/io/DataInputStream;I)[J", false);
        map.put("java.util.Objects.hash([Ljava/lang/Object;)I", false);
        map.put("java.util.concurrent.ForkJoinPool.growSubmissionQueue()V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.cancel(Z)Z", false);
        map.put("java.util.concurrent.Executors$DelegatedExecutorService.invokeAny(Ljava/util/Collection;)Ljava/lang/Object;", false);
        map.put("java.util.logging.Formatter.<init>()V", true);
        map.put("java.util.Arrays.sort([BII)V", true);
        map.put("java.util.concurrent.Executors.defaultThreadFactory()Ljava/util/concurrent/ThreadFactory;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.removeRange(II)V", false);
        map.put("java.util.Arrays.sort([I)V", true);
        map.put("java.util.concurrent.ArrayBlockingQueue.checkNotNull(Ljava/lang/Object;)V", false);
        map.put("java.util.ArrayDeque.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.ArrayDeque$DeqIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.tailSet(Ljava/lang/Object;Z)Ljava/util/NavigableSet;", false);
        map.put("java.util.TreeMap.<init>(Ljava/util/SortedMap;)V", false);
        map.put("java.util.concurrent.DelayQueue.peek()Ljava/lang/Object;", false);
        map.put("java.util.EnumSet.copyOf(Ljava/util/Collection;)Ljava/util/EnumSet;", false);
        map.put("java.util.Arrays.toString([I)Ljava/lang/String;", false);
        map.put("java.util.PriorityQueue.grow(I)V", false);
        map.put("java.util.regex.Pattern$Dollar.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.TimeUnit$1.toNanos(J)J", true);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWIterator.previous()Ljava/lang/Object;", false);
        map.put("java.util.jar.JarFile.initializeVerifier()V", false);
        map.put("java.util.regex.UnicodeProp$10.is(I)Z", false);
        map.put("java.util.jar.JarVerifier.<init>([B)V", false);
        map.put("java.util.concurrent.Phaser.toString()Ljava/lang/String;", false);
        map.put("java.util.LinkedList.clear()V", false);
        map.put("java.util.Collections$CheckedCollection$1.remove()V", false);
        map.put("java.util.LinkedHashMap$LinkedHashIterator.remove()V", false);
        map.put("java.util.concurrent.Phaser.getParent()Ljava/util/concurrent/Phaser;", true);
        map.put("java.util.ComparableTimSort.sort([Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.access$200(Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;)Ljava/util/concurrent/ConcurrentSkipListMap$Node;", true);
        map.put("java.util.HashMap.<init>(IF)V", false);
        map.put("java.util.AbstractList.get(I)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.TimeUnit$2.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.Iterator.remove()V", false);
        map.put("java.util.prefs.XmlSupport.createPrefsDoc(Ljava/lang/String;)Lorg/w3c/dom/Document;", false);
        map.put("java.util.regex.UnicodeProp$9.is(I)Z", false);
        map.put("java.util.concurrent.FutureTask.isCancelled()Z", false);
        map.put("java.util.Collections$CheckedMap.typeCheck(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.Executors$DefaultThreadFactory.<init>()V", false);
        map.put("java.util.Collections$AsLIFOQueue.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.isWriteLocked()Z", true);
        map.put("java.util.concurrent.Semaphore$Sync.tryAcquireSharedNanos(IJ)Z", false);
        map.put("java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object;", false);
        map.put("java.util.TreeMap.leftOf(Ljava/util/TreeMap$Entry;)Ljava/util/TreeMap$Entry;", true);
        map.put("java.util.EnumSet$SerializationProxy.<init>(Ljava/util/EnumSet;)V", false);
        map.put("java.util.PriorityQueue.<clinit>()V", false);
        map.put("java.util.concurrent.LinkedTransferQueue$Node.forgetContents()V", false);
        map.put("java.util.Collections$UnmodifiableCollection.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.lowestKey()Ljava/lang/Object;", false);
        map.put("java.util.jar.JarVerifier.signerMap()Ljava/util/Map;", false);
        map.put("java.util.zip.ZipFile.ensureOpen()V", false);
        map.put("java.util.AbstractList.hashCode()I", false);
        map.put("java.util.DualPivotQuicksort.sort([CII)V", true);
        map.put("java.util.concurrent.ForkJoinPool.deregisterWorker(Ljava/util/concurrent/ForkJoinWorkerThread;Ljava/lang/Throwable;)V", false);
        map.put("java.util.Collections$CheckedSortedMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.AbstractList.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.LinkedTransferQueue.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.first()Ljava/util/concurrent/ConcurrentLinkedDeque$Node;", false);
        map.put("java.util.jar.JarVerifier$4.hasMoreElements()Z", false);
        map.put("java.util.WeakHashMap$KeySet.clear()V", false);
        map.put("java.util.ServiceLoader.parse(Ljava/lang/Class;Ljava/net/URL;)Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ForkJoinPool$ManagedBlocker.isReleasable()Z", false);
        map.put("java.util.concurrent.Executors.newSingleThreadExecutor()Ljava/util/concurrent/ExecutorService;", false);
        map.put("java.util.concurrent.locks.ReentrantLock$NonfairSync.<init>()V", true);
        map.put("java.util.IllegalFormatConversionException.<init>(CLjava/lang/Class;)V", false);
        map.put("java.util.regex.Pattern$Node.<init>()V", false);
        map.put("java.util.Arrays.rangeCheck(III)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.isEmpty()Z", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.addWorker(Ljava/lang/Runnable;Z)Z", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferStack$SNode.tryMatch(Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicStampedReference.getReference()Ljava/lang/Object;", true);
        map.put("java.util.TreeMap$DescendingSubMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator.previous()Ljava/lang/Object;", false);
        map.put("java.util.InvalidPropertiesFormatException.initCause(Ljava/lang/Throwable;)Ljava/lang/Throwable;", false);
        map.put("java.util.concurrent.BlockingQueue.size()I", false);
        map.put("java.util.NavigableMap.containsKey(Ljava/lang/Object;)Z", false);
        map.put("java.util.logging.LoggingMXBean.getParentLoggerName(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.JumboEnumSet$EnumSetIterator.next()Ljava/lang/Enum;", false);
        map.put("java.util.jar.JarEntry.getAttributes()Ljava/util/jar/Attributes;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.IdentityHashMap$EntrySet.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Vector$ListItr.checkForComodification()V", false);
        map.put("java.util.Formatter$FormatSpecifier.checkBadFlags([Ljava/util/Formatter$Flags;)V", false);
        map.put("java.util.prefs.AbstractPreferences.syncSpi()V", false);
        map.put("java.util.logging.Logger.throwing(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V", true);
        map.put("java.util.SubList$1.previous()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$7.<init>()V", false);
        map.put("java.util.Hashtable$KeySet.<init>(Ljava/util/Hashtable;Ljava/util/Hashtable$1;)V", false);
        map.put("java.util.Collections$CopiesList.size()I", true);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubList.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.Executors.newScheduledThreadPool(I)Ljava/util/concurrent/ScheduledExecutorService;", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Segment.lock()V", false);
        map.put("java.util.Hashtable$Entry.clone()Ljava/lang/Object;", false);
        map.put("java.util.EnumMap.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.ensureProtectedAccess(Ljava/lang/Object;)V", false);
        map.put("java.util.ArrayList.clear()V", false);
        map.put("java.util.zip.DeflaterInputStream.close()V", false);
        map.put("java.util.AbstractSequentialList.<init>()V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.hasQueuedThread(Ljava/lang/Thread;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.tailSet(Ljava/lang/Object;)Ljava/util/NavigableSet;", false);
        map.put("java.util.SortedMap.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.zip.InflaterInputStream.skip(J)J", false);
        map.put("java.util.regex.Pattern$BnM.optimize(Ljava/util/regex/Pattern$Node;)Ljava/util/regex/Pattern$Node;", false);
        map.put("java.util.IdentityHashMap$ValueIterator.<init>(Ljava/util/IdentityHashMap;)V", false);
        map.put("java.util.Collections$SynchronizedCollection.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Scanner.hasNextDouble()Z", false);
        map.put("java.util.SortedMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedBlockingQueue$Itr.<init>(Ljava/util/concurrent/LinkedBlockingQueue;)V", false);
        map.put("java.util.Collections.rotate2(Ljava/util/List;I)V", false);
        map.put("java.util.Objects.requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.Collections$CheckedSortedMap.firstKey()Ljava/lang/Object;", false);
        map.put("java.util.ServiceConfigurationError.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.Random.nextFloat()F", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.weakCompareAndSet(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap$EntrySet.clear()V", false);
        map.put("java.util.Vector$ListItr.previousIndex()I", true);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry.<init>(Ljava/util/Map$Entry;Ljava/lang/Class;)V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(Ljava/lang/Runnable;Ljava/util/concurrent/ThreadPoolExecutor;)V", false);
        map.put("java.util.EnumMap$KeyIterator.<init>(Ljava/util/EnumMap;)V", false);
        map.put("java.util.Calendar.aggregateStamp(II)I", true);
        map.put("java.util.Formatter$FormatSpecifier.trailingZeros([CI)[C", false);
        map.put("java.util.InputMismatchException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.logging.StreamHandler.publish(Ljava/util/logging/LogRecord;)V", false);
        map.put("java.util.GregorianCalendar.isPartiallyNormalized()Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.lower(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$Entry.<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.<init>()V", false);
        map.put("java.util.TreeMap$NavigableSubMap.floorKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.Arrays.sort([Ljava/lang/Object;II)V", false);
        map.put("java.util.prefs.Preferences.keys()[Ljava/lang/String;", false);
        map.put("java.util.jar.JarFile.entryNames([Ljava/security/CodeSource;)Ljava/util/Enumeration;", false);
        map.put("java.util.regex.UnicodeProp$5.is(I)Z", true);
        map.put("java.util.Calendar.setFirstDayOfWeek(I)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque$DescendingItr.firstNode()Ljava/util/concurrent/LinkedBlockingDeque$Node;", true);
        map.put("java.util.Collections$UnmodifiableSet.hashCode()I", false);
        map.put("java.util.concurrent.ForkJoinTask.peekNextLocalTask()Ljava/util/concurrent/ForkJoinTask;", true);
        map.put("java.util.prefs.NodeChangeEvent.getChild()Ljava/util/prefs/Preferences;", true);
        map.put("java.util.TreeMap.getCeilingEntry(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.Deque.isEmpty()Z", false);
        map.put("java.util.PropertyPermission.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.Locale$Builder.addUnicodeLocaleAttribute(Ljava/lang/String;)Ljava/util/Locale$Builder;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.isHeldExclusively()Z", false);
        map.put("java.util.Deque.pop()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$Branch.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.prefs.WindowsPreferences.absolutePath()Ljava/lang/String;", false);
        map.put("java.util.jar.Manifest$FastInputStream.readLine([B)I", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.interruptIdleWorkers(Z)V", false);
        map.put("java.util.concurrent.TimeUnit$4.toDays(J)J", true);
        map.put("java.util.jar.JarFile.entries2()Ljava/util/Enumeration;", false);
        map.put("java.util.Collections$SynchronizedList.listIterator(I)Ljava/util/ListIterator;", false);
        map.put("java.util.Collections$ReverseComparator2.<init>(Ljava/util/Comparator;)V", false);
        map.put("java.util.Map.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.ResourceBundle.getKeys()Ljava/util/Enumeration;", false);
        map.put("java.util.prefs.XmlSupport$EH.<init>()V", true);
        map.put("java.util.logging.Logger.log(Ljava/util/logging/Level;Ljava/lang/String;[Ljava/lang/Object;)V", true);
        map.put("java.util.zip.InflaterInputStream.mark(I)V", true);
        map.put("java.util.Formatter$FormatSpecifier.index(Ljava/lang/String;)I", false);
        map.put("java.util.logging.LogRecord.setSourceClassName(Ljava/lang/String;)V", false);
        map.put("java.util.zip.Checksum.update(I)V", false);
        map.put("java.util.Scanner.nextShort(I)S", false);
        map.put("java.util.TreeSet.descendingSet()Ljava/util/NavigableSet;", false);
        map.put("java.util.Scanner.findWithinHorizon(Ljava/lang/String;I)Ljava/lang/String;", false);
        map.put("java.util.logging.XMLFormatter.formatMessage(Ljava/util/logging/LogRecord;)Ljava/lang/String;", false);
        map.put("java.util.ArrayList$SubList.addAll(ILjava/util/Collection;)Z", false);
        map.put("java.util.TimeZone.getSystemGMTOffsetID()Ljava/lang/String;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.pollFirst()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Semaphore$FairSync.getState()I", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.overflowFree(J)J", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.casSlotNull([Ljava/util/concurrent/ForkJoinTask;ILjava/util/concurrent/ForkJoinTask;)Z", false);
        map.put("java.util.Arrays.<clinit>()V", false);
        map.put("java.util.Currency$CurrencyNameGetter.<clinit>()V", false);
        map.put("java.util.ConcurrentModificationException.getCause()Ljava/lang/Throwable;", false);
        map.put("java.util.Dictionary.<init>()V", true);
        map.put("java.util.regex.Pattern$BitClass.<clinit>()V", false);
        map.put("java.util.Collections$UnmodifiableSet.<init>(Ljava/util/Set;)V", false);
        map.put("java.util.regex.Pattern$GroupRef.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.GregorianCalendar.computeFields()V", false);
        map.put("java.util.zip.ZipEntry.getComment()Ljava/lang/String;", true);
        map.put("java.util.jar.JarException.<init>()V", false);
        map.put("java.util.Arrays.binarySearch0([FIIF)I", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.remove(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.jar.JarFile$JarFileEntry.getCodeSigners()[Ljava/security/CodeSigner;", false);
        map.put("java.util.Collections.reverseOrder(Ljava/util/Comparator;)Ljava/util/Comparator;", false);
        map.put("java.util.concurrent.Semaphore.getQueuedThreads()Ljava/util/Collection;", false);
        map.put("java.util.logging.Level$KnownLevel.findByValue(I)Ljava/util/logging/Level$KnownLevel;", false);
        map.put("java.util.spi.CurrencyNameProvider.getDisplayName(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.RegularEnumSet$EnumSetIterator.hasNext()Z", true);
        map.put("java.util.GregorianCalendar.getGregorianChange()Ljava/util/Date;", false);
        map.put("java.util.zip.ZipException.<init>()V", false);
        map.put("java.util.Collections$CheckedMap.containsKey(Ljava/lang/Object;)Z", false);
        map.put("java.util.Properties.setProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;", false);
        map.put("java.util.Hashtable.values()Ljava/util/Collection;", false);
        map.put("java.util.HashMap.putAllForCreate(Ljava/util/Map;)V", false);
        map.put("java.util.Formatter.toCharset(Ljava/lang/String;)Ljava/nio/charset/Charset;", false);
        map.put("java.util.Formatter$Flags.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireNanos(JJ)Z", false);
        map.put("java.util.concurrent.ForkJoinPool.submit(Ljava/util/concurrent/ForkJoinTask;)Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.joinTask(Ljava/util/concurrent/ForkJoinTask;)I", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.poll()Ljava/lang/Object;", false);
        map.put("java.util.AbstractSet.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Arrays.sort([C)V", true);
        map.put("java.util.concurrent.Semaphore.getQueueLength()I", false);
        map.put("java.util.UUID.fromString(Ljava/lang/String;)Ljava/util/UUID;", false);
        map.put("java.util.concurrent.Semaphore$Sync.acquireSharedInterruptibly(I)V", false);
        map.put("java.util.regex.Pattern$CharProperty.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.concurrent.TimeUnit$7.x(JJJ)J", false);
        map.put("java.util.Collections$UnmodifiableMap.putAll(Ljava/util/Map;)V", false);
        map.put("java.util.TreeMap$NavigableSubMap.higherKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.zip.ZipFile$1.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.get([Ljava/lang/Object;I)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ExecutorCompletionService.newTaskFor(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/RunnableFuture;", false);
        map.put("java.util.LinkedHashMap$KeyIterator.nextEntry()Ljava/util/LinkedHashMap$Entry;", false);
        map.put("java.util.Random.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.Formatter.parse(Ljava/lang/String;)[Ljava/util/Formatter$FormatString;", false);
        map.put("java.util.Map.size()I", false);
        map.put("java.util.Arrays$ArrayList.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.Dictionary.size()I", false);
        map.put("java.util.Calendar.getGreatestMinimum(I)I", false);
        map.put("java.util.ArrayList.access$200(Ljava/util/ArrayList;)[Ljava/lang/Object;", true);
        map.put("java.util.Hashtable$ValueCollection.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.Set.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.WeakHashMap$EntrySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.Calendar.appendValue(Ljava/lang/StringBuilder;Ljava/lang/String;ZJ)V", false);
        map.put("java.util.concurrent.ForkJoinPool.invokeAll(Ljava/util/Collection;)Ljava/util/List;", false);
        map.put("java.util.jar.JarFile$JarFileEntry.getAttributes()Ljava/util/jar/Attributes;", false);
        map.put("java.util.Observable.deleteObservers()V", false);
        map.put("java.util.Arrays.sort([B)V", true);
        map.put("java.util.IdentityHashMap$EntryIterator.<init>(Ljava/util/IdentityHashMap;Ljava/util/IdentityHashMap$1;)V", false);
        map.put("java.util.TreeMap$NavigableSubMap$EntrySetView.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.LinkedHashMap.createEntry(ILjava/lang/Object;Ljava/lang/Object;I)V", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.lazySet(I)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.floorKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ConcurrentHashMap$KeySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.regex.Pattern.subFlag()V", false);
    }

    private static void m4() {

        map.put("java.util.BitSet.get(I)Z", true);
        map.put("java.util.logging.Logging.getLoggerLevel(Ljava/lang/String;)Ljava/lang/String;", true);
        map.put("java.util.BitSet.clear(I)V", false);
        map.put("java.util.logging.MemoryHandler.flush()V", false);
        map.put("java.util.concurrent.ForkJoinTask.getPool()Ljava/util/concurrent/ForkJoinPool;", false);
        map.put("java.util.regex.Pattern.produceEquivalentAlternation(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.AbstractMap$SimpleImmutableEntry.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.LinkedBlockingDeque.peek()Ljava/lang/Object;", false);
        map.put("java.util.zip.Inflater.getBytesWritten()J", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.execute(Ljava/lang/Runnable;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.compareTo(Ljava/util/concurrent/Delayed;)I", false);
        map.put("java.util.spi.LocaleServiceProvider.getAvailableLocales()[Ljava/util/Locale;", false);
        map.put("java.util.prefs.NodeChangeEvent.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.regex.Pattern$First.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.prefs.AbstractPreferences.sync()V", false);
        map.put("java.util.concurrent.BlockingQueue.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndIncrement(Ljava/lang/Object;)I", false);
        map.put("java.util.Calendar.set(II)V", false);
        map.put("java.util.regex.Pattern$7.<init>(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;)V", false);
        map.put("java.util.logging.LogManager$RootLogger.<init>(Ljava/util/logging/LogManager;Ljava/util/logging/LogManager$1;)V", false);
        map.put("java.util.zip.ZipInputStream.closeEntry()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.zip.ZipOutputStream.closeEntry()V", false);
        map.put("java.util.Collections.disjoint(Ljava/util/Collection;Ljava/util/Collection;)Z", false);
        map.put("java.util.Locale.<init>(Lsun/util/locale/BaseLocale;Lsun/util/locale/LocaleExtensions;Ljava/util/Locale$1;)V", false);
        map.put("java.util.zip.Deflater.needsInput()Z", true);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.getWaitingThreads(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Ljava/util/Collection;", false);
        map.put("java.util.JapaneseImperialCalendar.setTimeInMillis(J)V", false);
        map.put("java.util.ArrayList.set(ILjava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$FairSync.writerShouldBlock()Z", false);
        map.put("java.util.Vector.<init>()V", false);
        map.put("java.util.Scanner.next()Ljava/lang/String;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWIterator.<init>([Ljava/lang/Object;ILjava/util/concurrent/CopyOnWriteArrayList$1;)V", false);
        map.put("java.util.Locale.setDefault(Ljava/util/Locale;)V", false);
        map.put("java.util.GregorianCalendar.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.tooLow(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.TimeUnit$1.toMicros(J)J", true);
        map.put("java.util.Collections$CheckedCollection.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.logging.Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V", true);
        map.put("java.util.logging.LogManager.addLogger(Ljava/util/logging/Logger;)Z", false);
        map.put("java.util.Collections$UnmodifiableSortedMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.Collections$CopiesList.indexOf(Ljava/lang/Object;)I", true);
        map.put("java.util.zip.ZipInputStream.skip(J)J", false);
        map.put("java.util.Collections$CopiesList.get(I)Ljava/lang/Object;", false);
        map.put("java.util.Collections$EmptyIterator.<clinit>()V", false);
        map.put("java.util.prefs.AbstractPreferences.getInt(Ljava/lang/String;I)I", false);
        map.put("java.util.Timer$1.finalize()V", false);
        map.put("java.util.HashMap$KeySet.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V", false);
        map.put("java.util.concurrent.atomic.AtomicStampedReference.<clinit>()V", false);
        map.put("java.util.prefs.WindowsPreferences.putSpi(Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.Semaphore.release(I)V", false);
        map.put("java.util.JapaneseImperialCalendar.getKey(II)Ljava/lang/String;", false);
        map.put("java.util.regex.Pattern.matcher(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;", false);
        map.put("java.util.Timer.scheduleAtFixedRate(Ljava/util/TimerTask;JJ)V", false);
        map.put("java.util.zip.ZipInputStream.<init>(Ljava/io/InputStream;)V", false);
        map.put("java.util.concurrent.Semaphore.acquireUninterruptibly(I)V", false);
        map.put("java.util.HashMap.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.jar.JarFile.hasClassPathAttribute()Z", false);
        map.put("java.util.Set.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern.has(I)Z", true);
        map.put("java.util.logging.Logger$1.<init>(Ljava/util/Locale;)V", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.regex.Pattern$Branch.add(Ljava/util/regex/Pattern$Node;)V", false);
        map.put("java.util.LinkedList.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.BlockingDeque.pollFirst(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.Set.clear()V", false);
        map.put("java.util.Formatter.<init>(Ljava/io/OutputStream;)V", false);
        map.put("java.util.concurrent.BlockingQueue.poll(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.ArrayDeque$DescendingIterator.hasNext()Z", true);
        map.put("java.util.HashMap.newKeyIterator()Ljava/util/Iterator;", false);
        map.put("java.util.Formatter$FixedString.index()I", true);
        map.put("java.util.regex.ASCII.isOctDigit(I)Z", true);
        map.put("java.util.Collections$SynchronizedSortedSet.first()Ljava/lang/Object;", false);
        map.put("java.util.EnumMap$KeySet.<init>(Ljava/util/EnumMap;)V", false);
        map.put("java.util.EnumMap.access$200(Ljava/util/EnumMap;)I", true);
        map.put("java.util.Scanner.<init>(Ljava/io/File;)V", false);
        map.put("java.util.EnumMap.access$600(Ljava/util/EnumMap;)[Ljava/lang/Object;", true);
        map.put("java.util.concurrent.LinkedTransferQueue$Node.isMatched()Z", true);
        map.put("java.util.Scanner.<clinit>()V", false);
        map.put("java.util.zip.ZipFile.initIDs()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.TimeZone.getDisplayName(Ljava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.JumboEnumSet.addRange(Ljava/lang/Enum;Ljava/lang/Enum;)V", false);
        map.put("java.util.Currency.getInstance(Ljava/lang/String;II)Ljava/util/Currency;", false);
        map.put("java.util.Arrays.deepToString([Ljava/lang/Object;Ljava/lang/StringBuilder;Ljava/util/Set;)V", false);
        map.put("java.util.IdentityHashMap$EntrySet.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Phaser.awaitAdvanceInterruptibly(I)I", false);
        map.put("java.util.regex.Pattern$GroupCurly.match0(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)Z", false);
        map.put("java.util.prefs.Preferences.userNodeForPackage(Ljava/lang/Class;)Ljava/util/prefs/Preferences;", false);
        map.put("java.util.Collections$CheckedList$1.hasPrevious()Z", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.toString()Ljava/lang/String;", false);
        map.put("java.util.TreeMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.getQueue()Ljava/util/concurrent/BlockingQueue;", true);
        map.put("java.util.ListIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.Collections$SetFromMap.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.Formatter.out()Ljava/lang/Appendable;", false);
        map.put("java.util.jar.JarVerifier$VerifierStream.close()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.lowerKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.ArrayList$SubList.size()I", false);
        map.put("java.util.Arrays.mergeSort([Ljava/lang/Object;[Ljava/lang/Object;III)V", false);
        map.put("java.util.concurrent.FutureTask$Sync.innerSet(Ljava/lang/Object;)V", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.<init>(Ljava/util/Set;)V", false);
        map.put("java.util.UUID$Holder.<init>()V", true);
        map.put("java.util.TimeZone.getDisplayName()Ljava/lang/String;", false);
        map.put("java.util.GregorianCalendar.setWeekDate(III)V", false);
        map.put("java.util.regex.Pattern$GroupCurly.<init>(Ljava/util/regex/Pattern$Node;IIIIIZ)V", false);
        map.put("java.util.logging.LogRecord.<init>(Ljava/util/logging/Level;Ljava/lang/String;)V", false);
        map.put("java.util.Random.setSeed(J)V", false);
        map.put("java.util.logging.LogRecord.getLoggerName()Ljava/lang/String;", true);
        map.put("java.util.concurrent.LinkedBlockingQueue.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.concurrent.ForkJoinPool.addQuiescerCount(I)V", false);
        map.put("java.util.prefs.AbstractPreferences.getBoolean(Ljava/lang/String;Z)Z", false);
        map.put("java.util.ResourceBundle.getBundle(Ljava/lang/String;)Ljava/util/ResourceBundle;", false);
        map.put("java.util.Scanner.nextByte(I)B", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next()Ljava/util/Map$Entry;", false);
        map.put("java.util.Collections$EmptyMap.hashCode()I", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.containsValue(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndIncrement(Ljava/lang/Object;)J", false);
        map.put("java.util.Deque.descendingIterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$Node.lazySetNext(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)V", false);
        map.put("java.util.AbstractCollection.isEmpty()Z", false);
        map.put("java.util.GregorianCalendar.internalGet(I)I", false);
        map.put("java.util.Hashtable.access$200(Ljava/util/Hashtable;)I", true);
        map.put("java.util.Scanner.matchPatternInBuffer(Ljava/util/regex/Pattern;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.take()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.apparentlyFirstQueuedIsExclusive()Z", true);
        map.put("java.util.AbstractCollection.finishToArray([Ljava/lang/Object;Ljava/util/Iterator;)[Ljava/lang/Object;", false);
        map.put("java.util.jar.JarOutputStream.<init>(Ljava/io/OutputStream;)V", false);
        map.put("java.util.List.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.logging.Logger.doLog(Ljava/util/logging/LogRecord;Ljava/lang/String;)V", true);
        map.put("java.util.Formatter$FormatSpecifier.conversion()C", true);
        map.put("java.util.concurrent.ConcurrentNavigableMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.concurrent.RecursiveTask.getRawResult()Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ConcurrentSkipListSet.<init>(Ljava/util/Comparator;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$EntryIterator.advance()V", false);
        map.put("java.util.LinkedList.peekLast()Ljava/lang/Object;", true);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.clear()V", false);
        map.put("java.util.prefs.WindowsPreferences.toWindowsValueString(Ljava/lang/String;)[B", true);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.tryAcquireNanos(IJ)Z", false);
        map.put("java.util.Collections$EmptySet.size()I", true);
        map.put("java.util.Vector$1.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.NavigableMap.pollFirstEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.interruptIfStarted()V", false);
        map.put("java.util.concurrent.LinkedTransferQueue.tryTransfer(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.now()J", false);
        map.put("java.util.EnumMap$EntryIterator$Entry.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.logging.LogManager.reset()V", false);
        map.put("java.util.PropertyPermissionCollection.implies(Ljava/security/Permission;)Z", true);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.isLocked()Z", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.addAndGet(I)I", false);
        map.put("java.util.regex.Pattern$Bound.<init>(IZ)V", false);
        map.put("java.util.NavigableSet.pollLast()Ljava/lang/Object;", false);
        map.put("java.util.LinkedList.poll()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferStack.transfer(Ljava/lang/Object;ZJ)Ljava/lang/Object;", false);
        map.put("java.util.logging.Logging.getLoggerNames()Ljava/util/List;", false);
        map.put("java.util.SimpleTimeZone.getOffsets(J[I)I", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.getAndAdd(II)I", false);
        map.put("java.util.EnumMap$KeySet.<init>(Ljava/util/EnumMap;Ljava/util/EnumMap$1;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasQueuedPredecessors()Z", false);
        map.put("java.util.XMLUtils$EH.<init>(Ljava/util/XMLUtils$1;)V", true);
        map.put("java.util.prefs.WindowsPreferences.isUserNode()Z", false);
        map.put("java.util.concurrent.LinkedTransferQueue.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.Date.setHours(I)V", false);
        map.put("java.util.Vector$ListItr.set(Ljava/lang/Object;)V", true);
        map.put("java.util.TreeMap.comparator()Ljava/util/Comparator;", true);
        map.put("java.util.Scanner.boolPattern()Ljava/util/regex/Pattern;", false);
        map.put("java.util.Properties.load(Ljava/io/InputStream;)V", false);
        map.put("java.util.logging.FileHandler.generate(Ljava/lang/String;II)Ljava/io/File;", false);
        map.put("java.util.Formatter$Conversion.isFloat(C)Z", true);
        map.put("java.util.Collections$CheckedList.lastIndexOf(Ljava/lang/Object;)I", false);
        map.put("java.util.Formatter$Flags.dup()Ljava/util/Formatter$Flags;", false);
        map.put("java.util.zip.DeflaterInputStream.<init>(Ljava/io/InputStream;Ljava/util/zip/Deflater;I)V", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.size()I", false);
        map.put("java.util.ArrayList.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.compareAndSetState(II)Z", false);
        map.put("java.util.IllformedLocaleException.<init>()V", false);
        map.put("java.util.Collections.frequency(Ljava/util/Collection;Ljava/lang/Object;)I", true);
        map.put("java.util.logging.Level.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.Collections$CheckedList$1.nextIndex()I", false);
        map.put("java.util.Observable.hasChanged()Z", true);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquire(J)Z", false);
        map.put("java.util.Arrays$ArrayList.size()I", true);
        map.put("java.util.Formatter$Flags.parse(Ljava/lang/String;)Ljava/util/Formatter$Flags;", false);
        map.put("java.util.prefs.AbstractPreferences.parent()Ljava/util/prefs/Preferences;", false);
        map.put("java.util.jar.JarFile$3.hasMoreElements()Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter.<init>(Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;)V", false);
        map.put("java.util.WeakHashMap.transfer([Ljava/util/WeakHashMap$Entry;[Ljava/util/WeakHashMap$Entry;Z)V", false);
        map.put("java.util.zip.ZipEntry.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedWriterThreads()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.compareAndSetRaw(JII)Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.getQueueLength()I", false);
        map.put("java.util.IdentityHashMap$ValueIterator.nextIndex()I", false);
        map.put("java.util.IdentityHashMap$EntryIterator.nextIndex()I", false);
        map.put("java.util.concurrent.ConcurrentHashMap$HashIterator.nextEntry()Ljava/util/concurrent/ConcurrentHashMap$HashEntry;", false);
        map.put("java.util.jar.Manifest$FastInputStream.read()I", false);
        map.put("java.util.Currency.getAvailableCurrencies()Ljava/util/Set;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetTail(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z", false);
        map.put("java.util.zip.InflaterInputStream.ensureOpen()V", false);
        map.put("java.util.BitSet.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.fullCheck(Ljava/lang/Object;)V", false);
        map.put("java.util.EnumMap$EnumMapIterator.remove()V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.BlockingDeque.offerFirst(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$10.<init>()V", false);
        map.put("java.util.IllegalFormatFlagsException.getMessage()Ljava/lang/String;", false);
        map.put("java.util.AbstractMap$SimpleEntry.<init>(Ljava/util/Map$Entry;)V", false);
        map.put("java.util.concurrent.TimeUnit$7.convert(JLjava/util/concurrent/TimeUnit;)J", false);
        map.put("java.util.ArrayDeque.remove()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Executors.<init>()V", true);
        map.put("java.util.concurrent.BlockingDeque.addLast(Ljava/lang/Object;)V", false);
        map.put("java.util.StringTokenizer.nextToken(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.JapaneseImperialCalendar.getMinimum(I)I", true);
        map.put("java.util.ServiceLoader.access$400(Ljava/util/ServiceLoader;)Ljava/util/LinkedHashMap;", true);
        map.put("java.util.JapaneseImperialCalendar.getActualMinimum(I)I", false);
        map.put("java.util.Collections.zeroLengthArray(Ljava/lang/Class;)[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ThreadLocalRandom.nextDouble()D", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>()V", true);
        map.put("java.util.GregorianCalendar.getActualMinimum(I)I", true);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.size()I", false);
        map.put("java.util.prefs.WindowsPreferences.toJavaValueString([B)Ljava/lang/String;", false);
        map.put("java.util.Arrays.equals([I[I)Z", true);
        map.put("java.util.PriorityQueue.siftUp(ILjava/lang/Object;)V", false);
        map.put("java.util.prefs.XmlSupport.loadPrefsDoc(Ljava/io/InputStream;)Lorg/w3c/dom/Document;", false);
        map.put("java.util.Locale.getDisplayScript(Ljava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.TimSort.gallopLeft(Ljava/lang/Object;[Ljava/lang/Object;IIILjava/util/Comparator;)I", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.getWaitingThreads(Ljava/util/concurrent/locks/Condition;)Ljava/util/Collection;", false);
        map.put("java.util.concurrent.ForkJoinPool.postBlock()V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.<init>(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)V", false);
        map.put("java.util.logging.Logger.getResourceBundle()Ljava/util/ResourceBundle;", false);
        map.put("java.util.prefs.WindowsPreferences.logger()Lsun/util/logging/PlatformLogger;", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.add(Ljava/util/Map$Entry;)Z", false);
        map.put("java.util.regex.Pattern$Pos.<init>(Ljava/util/regex/Pattern$Node;)V", false);
        map.put("java.util.UUID.clockSequence()I", false);
        map.put("java.util.Collection.clear()V", false);
        map.put("java.util.WeakHashMap.<init>()V", false);
        map.put("java.util.Collections$EmptyMap.size()I", true);
        map.put("java.util.concurrent.TimeUnit$3.toMicros(J)J", false);
        map.put("java.util.logging.LogRecord.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.TreeMap$DescendingSubMap.absCeiling(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.concurrent.locks.ReentrantLock.tryLock()Z", false);
        map.put("java.util.Currency.access$000(Ljava/io/DataInputStream;I)[I", false);
        map.put("java.util.zip.Inflater.end(J)V", false);
        map.put("java.util.NavigableMap.isEmpty()Z", false);
        map.put("java.util.Collections$UnmodifiableCollection.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.TimeUnit.toMicros(J)J", false);
        map.put("java.util.logging.FileHandler$MeteredStream.flush()V", true);
        map.put("java.util.EnumMap.hashCode()I", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.weakCompareAndSet(III)Z", false);
        map.put("java.util.ArrayList.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.jar.JarVerifier$VerifierStream.read([BII)I", false);
        map.put("java.util.Properties.size()I", false);
        map.put("java.util.prefs.Preferences.userRoot()Ljava/util/prefs/Preferences;", false);
        map.put("java.util.concurrent.atomic.AtomicMarkableReference.set(Ljava/lang/Object;Z)V", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.removeEQ(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.DelayQueue.drainTo(Ljava/util/Collection;I)I", false);
        map.put("java.util.TreeMap.getEntryUsingComparator(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.LinkedList.removeFirstOccurrence(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentMap.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater.<init>()V", true);
        map.put("java.util.concurrent.ConcurrentHashMap$Segment.replace(Ljava/lang/Object;ILjava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.LinkedHashMap.newValueIterator()Ljava/util/Iterator;", false);
        map.put("java.util.Objects.hashCode(Ljava/lang/Object;)I", false);
        map.put("java.util.NavigableMap.firstEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.GregorianCalendar.monthLength(II)I", false);
        map.put("java.util.JumboEnumSet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.EnumMap.typeCheck(Ljava/lang/Enum;)V", false);
        map.put("java.util.StringTokenizer.setMaxDelimCodePoint()V", false);
        map.put("java.util.Formatter.<clinit>()V", false);
        map.put("java.util.concurrent.atomic.AtomicLong.intValue()I", true);
        map.put("java.util.Vector.ensureCapacityHelper(I)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Iter.<init>(Ljava/util/concurrent/ConcurrentSkipListMap;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.<init>([Ljava/lang/Object;)V", false);
        map.put("java.util.Locale.getCountry()Ljava/lang/String;", true);
        map.put("java.util.concurrent.Phaser.queueFor(I)Ljava/util/concurrent/atomic/AtomicReference;", true);
        map.put("java.util.EnumMap$1.<init>()V", true);
        map.put("java.util.concurrent.ThreadPoolExecutor.isRunningOrShutdown(Z)Z", true);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.checkInterruptWhileWaiting(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)I", false);
        map.put("java.util.prefs.XmlSupport$EH.error(Lorg/xml/sax/SAXParseException;)V", true);
        map.put("java.util.AbstractMap$1$1.hasNext()Z", false);
        map.put("java.util.regex.Pattern.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.jar.JarVerifier.mapSignersToCodeSource(Ljava/net/URL;[Ljava/security/CodeSigner;)Ljava/security/CodeSource;", false);
        map.put("java.util.regex.Pattern$Node.study(Ljava/util/regex/Pattern$TreeInfo;)Z", true);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicMarkableReference.getReference()Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ThreadPoolExecutor.getMaximumPoolSize()I", true);
        map.put("java.util.logging.LogManager$LoggerWeakRef.get()Ljava/lang/Object;", false);
        map.put("java.util.Formatter$FormatSpecifier.print(ILjava/util/Locale;)V", false);
        map.put("java.util.ResourceBundle.putBundleInCache(Ljava/util/ResourceBundle$CacheKey;Ljava/util/ResourceBundle;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;", false);
        map.put("java.util.Scanner.nextInt()I", false);
        map.put("java.util.regex.Pattern.mark(I)V", true);
        map.put("java.util.TreeMap$NavigableSubMap.lowerKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.logging.MemoryHandler.init()V", false);
        map.put("java.util.regex.Matcher.end()I", false);
        map.put("java.util.BitSet.hashCode()I", true);
        map.put("java.util.concurrent.ConcurrentMap.isEmpty()Z", false);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegEnumValue1(III)[B", false);
        map.put("java.util.HashMap$Holder.<clinit>()V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.checkShutdownAccess()V", false);
        map.put("java.util.zip.Deflater.setLevel(I)V", false);
        map.put("java.util.zip.ZipEntry.getCompressedSize()J", true);
        map.put("java.util.concurrent.ConcurrentNavigableMap.headMap(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.GregorianCalendar.getZone()Ljava/util/TimeZone;", false);
        map.put("java.util.Hashtable.access$400(Ljava/util/Hashtable;)[Ljava/util/Hashtable$Entry;", true);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(Z)V", false);
        map.put("java.util.Collections$SetFromMap.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.readLock()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;", true);
        map.put("java.util.Calendar.invalidateWeekFields()V", true);
        map.put("java.util.logging.LogManager$SystemLoggerContext.findLogger(Ljava/lang/String;)Ljava/util/logging/Logger;", false);
        map.put("java.util.Collections$SynchronizedSet.<init>(Ljava/util/Set;)V", false);
        map.put("java.util.TreeMap$DescendingSubMap.keyIterator()Ljava/util/Iterator;", false);
        map.put("java.util.UUID.nameUUIDFromBytes([B)Ljava/util/UUID;", false);
        map.put("java.util.logging.FileHandler.<init>(Ljava/lang/String;IIZ)V", false);
        map.put("java.util.concurrent.ForkJoinPool.submit(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.SortedMap.isEmpty()Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Values.size()I", false);
        map.put("java.util.Collections.newSetFromMap(Ljava/util/Map;)Ljava/util/Set;", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(ILjava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.Hashtable.keys()Ljava/util/Enumeration;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$12.isSatisfiedBy(I)Z", false);
        map.put("java.util.jar.Pack200$Packer.addPropertyChangeListener(Ljava/beans/PropertyChangeListener;)V", false);
        map.put("java.util.Properties$LineReader.<init>(Ljava/util/Properties;Ljava/io/InputStream;)V", false);
        map.put("java.util.ResourceBundle$CacheKey.access$500(Ljava/util/ResourceBundle$CacheKey;Ljava/lang/Throwable;)V", false);
        map.put("java.util.WeakHashMap$EntryIterator.<init>(Ljava/util/WeakHashMap;Ljava/util/WeakHashMap$1;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.remainingCapacity()I", true);
        map.put("java.util.RegularEnumSet.typeCheck(Ljava/lang/Enum;)V", false);
        map.put("java.util.ArrayDeque.access$300(Ljava/util/ArrayDeque;)I", true);
        map.put("java.util.regex.Pattern$CharPropertyNames.defCategory(Ljava/lang/String;I)V", false);
        map.put("java.util.concurrent.Future.get(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipFile.getInputStream(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;", false);
        map.put("java.util.Hashtable.<init>(I)V", false);
        map.put("java.util.Collections$UnmodifiableCollection$1.<init>(Ljava/util/Collections$UnmodifiableCollection;)V", false);
        map.put("java.util.Collections$SynchronizedList.add(ILjava/lang/Object;)V", false);
        map.put("java.util.concurrent.ForkJoinPool.getPoolSize()I", true);
        map.put("java.util.concurrent.CopyOnWriteArrayList.clear()V", false);
        map.put("java.util.concurrent.ForkJoinPool.pollSubmission()Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.Arrays.fill([FF)V", true);
        map.put("java.util.concurrent.LinkedTransferQueue.remainingCapacity()I", true);
        map.put("java.util.IdentityHashMap$EntryIterator$Entry.<init>(Ljava/util/IdentityHashMap$EntryIterator;ILjava/util/IdentityHashMap$1;)V", false);
        map.put("java.util.GregorianCalendar.isFieldSet(II)Z", false);
        map.put("java.util.concurrent.locks.ReentrantLock$FairSync.getState()I", false);
        map.put("java.util.Hashtable.hashCode()I", false);
        map.put("java.util.Arrays.copyOf([Ljava/lang/Object;ILjava/lang/Class;)[Ljava/lang/Object;", false);
        map.put("java.util.ArrayDeque.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap.elements()Ljava/util/Enumeration;", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.<clinit>()V", false);
        map.put("java.util.IdentityHashMap$Values.<init>(Ljava/util/IdentityHashMap;Ljava/util/IdentityHashMap$1;)V", false);
        map.put("java.util.Collections.reverseOrder()Ljava/util/Comparator;", true);
        map.put("java.util.logging.LogManager.getFilterProperty(Ljava/lang/String;Ljava/util/logging/Filter;)Ljava/util/logging/Filter;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.tryLock(JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.concurrent.TimeUnit$4.toSeconds(J)J", true);
        map.put("java.util.concurrent.locks.LockSupport.park(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.Phaser.awaitAdvanceInterruptibly(IJLjava/util/concurrent/TimeUnit;)I", false);
        map.put("java.util.TreeMap$NavigableSubMap.subHigher(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.Collections$CopiesList.lastIndexOf(Ljava/lang/Object;)I", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.pollLastEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.Locale.forLanguageTag(Ljava/lang/String;)Ljava/util/Locale;", false);
        map.put("java.util.prefs.Preferences.put(Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.ArrayList$ListItr.add(Ljava/lang/Object;)V", false);
        map.put("java.util.Set.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.Executors$PrivilegedThreadFactory.access$400(Ljava/util/concurrent/Executors$PrivilegedThreadFactory;)Ljava/security/AccessControlContext;", true);
        map.put("java.util.Set.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.getState()I", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.subSet(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/NavigableSet;", false);
        map.put("java.util.jar.JarException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.regex.Pattern.composeOneStep(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.Executors.privilegedCallableUsingCurrentClassLoader(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater.compareAndSet(Ljava/lang/Object;JJ)Z", false);
        map.put("java.util.LinkedHashMap.hash(Ljava/lang/Object;)I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Values.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$5.make()Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.Properties.keys()Ljava/util/Enumeration;", false);
        map.put("java.util.regex.Pattern.access$200(III)Z", true);
        map.put("java.util.concurrent.RejectedExecutionException.<init>(Ljava/lang/Throwable;)V", false);
        map.put("java.util.Hashtable.containsValue(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.findNodeFromTail(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z", true);
        map.put("java.util.concurrent.ConcurrentHashMap$EntrySet.size()I", false);
        map.put("java.util.regex.ASCII.isGraph(I)Z", true);
        map.put("java.util.EnumMap$EntryIterator.next()Ljava/util/Map$Entry;", false);
        map.put("java.util.regex.Pattern.pattern()Ljava/lang/String;", true);
        map.put("java.util.concurrent.SynchronousQueue$TransferQueue.awaitFulfill(Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;Ljava/lang/Object;ZJ)Ljava/lang/Object;", false);
        map.put("java.util.Collections$EmptySet.toArray()[Ljava/lang/Object;", true);
        map.put("java.util.zip.ZipFile$1.<init>(Ljava/util/zip/ZipFile;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.headSet(Ljava/lang/Object;Z)Ljava/util/NavigableSet;", false);
        map.put("java.util.TimeZone.setRawOffset(I)V", false);
        map.put("java.util.SimpleTimeZone.getStart(Lsun/util/calendar/BaseCalendar;Lsun/util/calendar/BaseCalendar$Date;I)J", false);
        map.put("java.util.Set.size()I", false);
        map.put("java.util.Arrays.binarySearch([II)I", true);
        map.put("java.util.concurrent.ThreadPoolExecutor.addWorkerFailed(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V", false);
        map.put("java.util.Formatter$FormatSpecifier.print(Ljava/math/BigInteger;Ljava/util/Locale;)V", false);
        map.put("java.util.GregorianCalendar.setGregorianChange(Ljava/util/Date;)V", false);
        map.put("java.util.List.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.isEmpty()Z", false);
        map.put("java.util.Formatter.<init>(Ljava/io/File;)V", false);
        map.put("java.util.logging.Logger.getFilter()Ljava/util/logging/Filter;", true);
        map.put("java.util.HashMap$Values.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V", false);
        map.put("java.util.Random.initialScramble(J)J", true);
        map.put("java.util.WeakHashMap$EntryIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.Hashtable$Enumerator.next()Ljava/lang/Object;", false);
        map.put("java.util.regex.UnicodeProp$2.is(I)Z", false);
        map.put("java.util.BitSet.<init>()V", false);
        map.put("java.util.Scanner.processFloatToken(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.regex.UnicodeProp$8.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.StringTokenizer.scanToken(I)I", true);
        map.put("java.util.prefs.Preferences.absolutePath()Ljava/lang/String;", false);
        map.put("java.util.jar.Manifest.write(Ljava/io/OutputStream;)V", true);
        map.put("java.util.Locale$LocaleKey.hashCode()I", true);
        map.put("java.util.Formatter$FormatSpecifier$BigDecimalLayout.toCharArray(Ljava/lang/StringBuilder;)[C", false);
        map.put("java.util.GregorianCalendar.add(II)V", false);
        map.put("java.util.concurrent.FutureTask$Sync.tryAcquireShared(I)I", true);
        map.put("java.util.Collections$EmptyListIterator.add(Ljava/lang/Object;)V", false);
        map.put("java.util.jar.Pack200$Unpacker.properties()Ljava/util/SortedMap;", false);
        map.put("java.util.Formatter$FormatSpecifier.precision(Ljava/lang/String;)I", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.addConditionWaiter()Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;", false);
        map.put("java.util.regex.UnicodeProp$17.is(I)Z", false);
        map.put("java.util.spi.LocaleNameProvider.getDisplayLanguage(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Segment.remove(Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.logging.LogManager$LoggerContext.demandLogger(Ljava/lang/String;Ljava/lang/String;)Ljava/util/logging/Logger;", false);
        map.put("java.util.Formatter$FormatSpecifier.checkInteger()V", false);
        map.put("java.util.logging.Logger.getName()Ljava/lang/String;", true);
        map.put("java.util.IdentityHashMap.putForCreate(Ljava/lang/Object;Ljava/lang/Object;)V", true);
        map.put("java.util.prefs.Preferences.childrenNames()[Ljava/lang/String;", false);
        map.put("java.util.ListIterator.set(Ljava/lang/Object;)V", false);
        map.put("java.util.Collections$SingletonMap.get(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ThreadLocalRandom.nextLong(J)J", false);
        map.put("java.util.Calendar.getTimeZone()Ljava/util/TimeZone;", false);
        map.put("java.util.ArrayList$SubList.outOfBoundsMsg(I)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.regex.Pattern$Neg.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicBoolean.<init>()V", true);
        map.put("java.util.concurrent.DelayQueue.peek()Ljava/util/concurrent/Delayed;", false);
        map.put("java.util.regex.Pattern.countCodePoints(Ljava/lang/CharSequence;)I", true);
        map.put("java.util.Vector.firstElement()Ljava/lang/Object;", true);
        map.put("java.util.zip.ZipFile$ZipFileInputStream.skip(J)J", false);
        map.put("java.util.concurrent.ConcurrentHashMap$HashEntry.<init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$Itr.<init>(Ljava/util/concurrent/ConcurrentLinkedDeque;Ljava/util/concurrent/ConcurrentLinkedDeque$1;)V", false);
        map.put("java.util.zip.Deflater.getTotalIn()I", false);
        map.put("java.util.Collections.reverse(Ljava/util/List;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.submit(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.Queue.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.ArrayDeque.clear()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.<init>(Ljava/util/concurrent/ConcurrentNavigableMap;)V", false);
        map.put("java.util.Collections$UnmodifiableList.remove(I)Ljava/lang/Object;", false);
        map.put("java.util.WeakHashMap.removeMapping(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.remove()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.isOwnedBy(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer;)Z", true);
        map.put("java.util.Calendar.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.DelayQueue.add(Ljava/util/concurrent/Delayed;)Z", false);
        map.put("java.util.concurrent.ForkJoinPool.newTaskFor(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/RunnableFuture;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.releaseShared(I)Z", false);
        map.put("java.util.regex.Pattern$BehindS.<init>(Ljava/util/regex/Pattern$Node;II)V", false);
        map.put("java.util.WeakHashMap$EntrySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.logging.Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", true);
        map.put("java.util.IdentityHashMap$EntryIterator$Entry.setValue(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.<init>([Ljava/lang/Object;)V", false);
        map.put("java.util.IdentityHashMap$EntrySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Node.helpDelete(Ljava/util/concurrent/ConcurrentSkipListMap$Node;Ljava/util/concurrent/ConcurrentSkipListMap$Node;)V", false);
        map.put("java.util.NavigableMap.headMap(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.zip.Adler32.update(I)V", false);
        map.put("java.util.regex.UnicodeProp$2.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.Collections$SynchronizedList.lastIndexOf(Ljava/lang/Object;)I", false);
        map.put("java.util.LinkedHashMap.containsValue(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.RecursiveTask.setRawResult(Ljava/lang/Object;)V", false);
        map.put("java.util.zip.CRC32.update(I)V", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.fullyLock()V", false);
        map.put("java.util.regex.Pattern$1.<init>(II)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.casHead(Ljava/util/concurrent/ConcurrentLinkedQueue$Node;Ljava/util/concurrent/ConcurrentLinkedQueue$Node;)Z", false);
        map.put("java.util.Stack.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.jar.JavaUtilJarAccessImpl.getCodeSources(Ljava/util/jar/JarFile;Ljava/net/URL;)[Ljava/security/CodeSource;", false);
        map.put("java.util.Formatter$FormatSpecifier.<init>(Ljava/util/Formatter;Ljava/util/regex/Matcher;)V", false);
        map.put("java.util.Formatter$FormatSpecifier.flags()Ljava/util/Formatter$Flags;", true);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync.readerShouldBlock()Z", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.setState(I)V", false);
        map.put("java.util.zip.DataFormatException.getMessage()Ljava/lang/String;", false);
        map.put("java.util.jar.JarFile.getManEntry()Ljava/util/jar/JarEntry;", false);
        map.put("java.util.BitSet.flip(I)V", false);
        map.put("java.util.Hashtable$Enumerator.<init>(Ljava/util/Hashtable;IZ)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue()Ljava/util/concurrent/locks/ReentrantReadWriteLock$Sync$HoldCounter;", false);
        map.put("java.util.ResourceBundle$CacheKey.getName()Ljava/lang/String;", true);
        map.put("java.util.LinkedHashMap.removeEldestEntry(Ljava/util/Map$Entry;)Z", true);
        map.put("java.util.concurrent.LinkedTransferQueue.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.concurrent.CyclicBarrier$Generation.<init>(Ljava/util/concurrent/CyclicBarrier$1;)V", false);
        map.put("java.util.concurrent.CyclicBarrier.<init>(I)V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$23.isSatisfiedBy(I)Z", false);
        map.put("java.util.zip.InflaterInputStream.<init>(Ljava/io/InputStream;)V", false);
        map.put("java.util.TreeSet.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.prefs.AbstractPreferences.cachedChildren()[Ljava/util/prefs/AbstractPreferences;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$17.isSatisfiedBy(I)Z", false);
        map.put("java.util.Arrays.binarySearch([Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.tryReduceLevel()V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.removeFirst()Ljava/lang/Object;", false);
        map.put("java.util.LinkedList.pollLast()Ljava/lang/Object;", false);
        map.put("java.util.EnumMap$Values.<init>(Ljava/util/EnumMap;Ljava/util/EnumMap$1;)V", false);
        map.put("java.util.TreeMap$KeyIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.IdentityHashMap.<init>(Ljava/util/Map;)V", false);
        map.put("java.util.prefs.Preferences.name()Ljava/lang/String;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.InvalidPropertiesFormatException.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.jar.Attributes.<init>(Ljava/util/jar/Attributes;)V", false);
        map.put("java.util.concurrent.ForkJoinTask.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.siftDownUsingComparator(ILjava/lang/Object;[Ljava/lang/Object;ILjava/util/Comparator;)V", false);
        map.put("java.util.Formatter$FormatSpecifier.toString()Ljava/lang/String;", false);
        map.put("java.util.logging.Level.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.prefs.Base64.byteArrayToBase64([BZ)Ljava/lang/String;", false);
        map.put("java.util.Collections$SynchronizedMap.toString()Ljava/lang/String;", false);
        map.put("java.util.Collections$EmptyMap.isEmpty()Z", true);
        map.put("java.util.ArrayList$Itr.next()Ljava/lang/Object;", false);
    }

    private static void m5() {

        map.put("java.util.jar.Attributes$Name.hashCode()I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$ComparableUsingComparator.compareTo(Ljava/lang/Object;)I", false);
        map.put("java.util.Formatter$FormatString.index()I", false);
        map.put("java.util.concurrent.ExecutorService.isTerminated()Z", false);
        map.put("java.util.AbstractMap$2.isEmpty()Z", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.poll(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.Formatter$FormatSpecifier$BigDecimalLayout.hasDot()Z", true);
        map.put("java.util.TreeMap.lastKey()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.ReentrantLock$NonfairSync.compareAndSetState(II)Z", false);
        map.put("java.util.prefs.WindowsPreferences.toWindowsAlt64Name(Ljava/lang/String;)[B", true);
        map.put("java.util.concurrent.ForkJoinWorkerThread.growQueue()V", false);
        map.put("java.util.Collections$EmptyMap.get(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.EnumMap.equals(Ljava/util/EnumMap;)Z", true);
        map.put("java.util.UUID.hashCode()I", true);
        map.put("java.util.Scanner.<init>(Ljava/io/InputStream;Ljava/lang/String;)V", false);
        map.put("java.util.Objects.<init>()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.SubList.access$210(Ljava/util/SubList;)I", false);
        map.put("java.util.SimpleTimeZone.<init>(ILjava/lang/String;IIIIIIIII)V", false);
        map.put("java.util.concurrent.CyclicBarrier.getNumberWaiting()I", false);
        map.put("java.util.Formatter$Flags.contains(Ljava/util/Formatter$Flags;)Z", true);
        map.put("java.util.Collections$CheckedSortedSet.last()Ljava/lang/Object;", false);
        map.put("java.util.TreeSet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.TimeZone.parseCustomTimeZone(Ljava/lang/String;)Ljava/util/TimeZone;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.poll(JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/RunnableScheduledFuture;", false);
        map.put("java.util.Collections$UnmodifiableList$1.nextIndex()I", false);
        map.put("java.util.jar.JarInputStream.getBytes(Ljava/io/InputStream;)[B", false);
        map.put("java.util.Collections$AsLIFOQueue.poll()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy.<init>()V", true);
        map.put("java.util.logging.LogManager.readPrimordialConfiguration()V", false);
        map.put("java.util.LinkedHashMap$Entry.remove()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.logging.Level.access$200(Ljava/util/logging/Level;)Ljava/lang/String;", true);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.poll()Ljava/util/concurrent/RunnableScheduledFuture;", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.getAndIncrement(I)J", false);
        map.put("java.util.Collections$CopiesList.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.ArrayDeque.poll()Ljava/lang/Object;", false);
        map.put("java.util.Locale.<init>(Lsun/util/locale/BaseLocale;Lsun/util/locale/LocaleExtensions;)V", false);
        map.put("java.util.FormatFlagsConversionMismatchException.getFlags()Ljava/lang/String;", true);
        map.put("java.util.Locale.getUnicodeLocaleType(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.Collections$SynchronizedMap.<init>(Ljava/util/Map;Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.offerLast(Ljava/lang/Object;)Z", false);
        map.put("java.util.JumboEnumSet.<init>(Ljava/lang/Class;[Ljava/lang/Enum;)V", false);
        map.put("java.util.logging.FileHandler.getLevel()Ljava/util/logging/Level;", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.LinkedHashSet.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.regex.Pattern$SliceNode.<init>([I)V", false);
        map.put("java.util.concurrent.ConcurrentHashMap.ensureSegment(I)Ljava/util/concurrent/ConcurrentHashMap$Segment;", false);
        map.put("java.util.zip.Inflater.setDictionary(J[BII)V", false);
        map.put("java.util.TreeMap.buildFromSorted(ILjava/util/Iterator;Ljava/io/ObjectInputStream;Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock.getOwner()Ljava/lang/Thread;", false);
        map.put("java.util.Objects.toString(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.ListIterator.hasNext()Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$FairSync.hasQueuedPredecessors()Z", false);
        map.put("java.util.concurrent.ForkJoinPool.addWorker()V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.onShutdown()V", true);
        map.put("java.util.jar.Manifest$FastInputStream.skip(J)J", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.setArray([Ljava/lang/Object;)V", false);
        map.put("java.util.logging.ConsoleHandler.setLevel(Ljava/util/logging/Level;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquire(J)V", false);
        map.put("java.util.PriorityQueue.siftDown(ILjava/lang/Object;)V", false);
        map.put("java.util.concurrent.DelayQueue.access$100(Ljava/util/concurrent/DelayQueue;)Ljava/util/PriorityQueue;", true);
        map.put("java.util.logging.FileHandler$InitializationErrorManager.<init>(Ljava/util/logging/FileHandler$1;)V", false);
        map.put("java.util.regex.Matcher.appendReplacement(Ljava/lang/StringBuffer;Ljava/lang/String;)Ljava/util/regex/Matcher;", false);
        map.put("java.util.ResourceBundle$Control.getTimeToLive(Ljava/lang/String;Ljava/util/Locale;)J", false);
        map.put("java.util.Hashtable.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.IllegalFormatException.<init>()V", false);
        map.put("java.util.ServiceLoader$LazyIterator.remove()V", false);
        map.put("java.util.EnumMap$Values.<init>(Ljava/util/EnumMap;)V", false);
        map.put("java.util.zip.ZipEntry.getMethod()I", true);
        map.put("java.util.ResourceBundle.findBundleInCache(Ljava/util/ResourceBundle$CacheKey;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;", false);
        map.put("java.util.Stack.removeElementAt(I)V", false);
        map.put("java.util.IdentityHashMap.<init>(I)V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$6.isSatisfiedBy(I)Z", true);
        map.put("java.util.logging.LoggingProxyImpl.getLevelName(Ljava/lang/Object;)Ljava/lang/String;", true);
        map.put("java.util.concurrent.PriorityBlockingQueue$Itr.<init>(Ljava/util/concurrent/PriorityBlockingQueue;[Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ForkJoinTask$AdaptedCallable.exec()Z", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.higherKey(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.skipDeletedSuccessors(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)V", false);
        map.put("java.util.AbstractMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Currency$CurrencyNameGetter.getObject(Ljava/util/spi/CurrencyNameProvider;Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;", false);
        map.put("java.util.GregorianCalendar.<init>(III)V", false);
        map.put("java.util.zip.ZipOutputStream.writeEND(JJ)V", false);
        map.put("java.util.concurrent.RunnableScheduledFuture.compareTo(Ljava/lang/Object;)I", false);
        map.put("java.util.ResourceBundle.getBundle(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/ResourceBundle;", false);
        map.put("java.util.regex.Pattern.u()I", false);
        map.put("java.util.Scanner.radix()I", true);
        map.put("java.util.zip.Deflater.getBytesWritten(J)J", false);
        map.put("java.util.prefs.AbstractPreferences.removeNodeSpi()V", false);
        map.put("java.util.HashSet.size()I", true);
        map.put("java.util.WeakHashMap$EntrySet.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.Calendar.getFieldName(I)Ljava/lang/String;", true);
        map.put("java.util.ComparableTimSort.mergeLo(IIII)V", false);
        map.put("java.util.TreeSet.size()I", false);
        map.put("java.util.Arrays.fill([IIII)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWIterator.hasNext()Z", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter.ascend()V", false);
        map.put("java.util.AbstractMap$1.size()I", false);
        map.put("java.util.Formatter$FormatSpecifier.precision()I", true);
        map.put("java.util.regex.Pattern.union(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;)Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.concurrent.ForkJoinTask.quietlyInvoke()V", false);
        map.put("java.util.Formatter$FormatSpecifier.checkGeneral()V", false);
        map.put("java.util.concurrent.CyclicBarrier$Generation.<init>()V", false);
        map.put("java.util.logging.LogManager.access$800(Ljava/util/logging/Logger;Ljava/util/logging/Level;)V", false);
        map.put("java.util.zip.Inflater.getBytesRead()J", false);
        map.put("java.util.TreeMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.concurrent.TransferQueue.getWaitingConsumerCount()I", false);
        map.put("java.util.Collections.synchronizedCollection(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/Collection;", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.getAndIncrement(I)I", false);
        map.put("java.util.concurrent.ForkJoinPool.isTerminating()Z", true);
        map.put("java.util.Collections$SingletonMap.isEmpty()Z", true);
        map.put("java.util.logging.LogRecord.getMillis()J", true);
        map.put("java.util.Collections$SynchronizedMap.putAll(Ljava/util/Map;)V", false);
        map.put("java.util.ArrayDeque.removeLastOccurrence(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeSet.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.IdentityHashMap.isEmpty()Z", true);
        map.put("java.util.concurrent.ConcurrentHashMap$Segment.unlock()V", false);
        map.put("java.util.PriorityQueue.hugeCapacity(I)I", false);
        map.put("java.util.DualPivotQuicksort.sort([CIIZ)V", true);
        map.put("java.util.EnumMap$EntryIterator$Entry.checkIndexForEntryUse()V", false);
        map.put("java.util.concurrent.Semaphore.tryAcquire(I)Z", false);
        map.put("java.util.Collections$UnmodifiableCollection.size()I", false);
        map.put("java.util.regex.Matcher.useAnchoringBounds(Z)Ljava/util/regex/Matcher;", false);
        map.put("java.util.zip.ZipFile.access$500(JI)J", false);
        map.put("java.util.jar.Manifest$FastInputStream.read([BII)I", false);
        map.put("java.util.TreeMap$SubMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.Collections$EmptyListIterator.hasPrevious()Z", true);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.compareTo(Ljava/lang/Object;)I", false);
        map.put("java.util.SortedMap.putAll(Ljava/util/Map;)V", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.regex.Pattern$SliceIS.toLower(I)I", true);
        map.put("java.util.concurrent.FutureTask.set(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.Semaphore$Sync.tryReleaseShared(I)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.awaitUninterruptibly()V", false);
        map.put("java.util.concurrent.AbstractExecutorService.newTaskFor(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/RunnableFuture;", false);
        map.put("java.util.Hashtable.size()I", true);
        map.put("java.util.Locale.composeList(Ljava/text/MessageFormat;[Ljava/lang/String;)[Ljava/lang/String;", false);
        map.put("java.util.TaskQueue.heapify()V", true);
        map.put("java.util.Vector.set(ILjava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ForkJoinTask.isCompletedNormally()Z", true);
        map.put("java.util.Dictionary.isEmpty()Z", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.peek()Ljava/util/concurrent/RunnableScheduledFuture;", false);
        map.put("java.util.zip.ZipFile.getEntrySize(J)J", false);
        map.put("java.util.RegularEnumSet$EnumSetIterator.remove()V", false);
        map.put("java.util.concurrent.SynchronousQueue.iterator()Ljava/util/Iterator;", true);
        map.put("java.util.IdentityHashMap.maskNull(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ExecutorService.shutdown()V", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferQueue.transfer(Ljava/lang/Object;ZJ)Ljava/lang/Object;", false);
        map.put("java.util.logging.StreamHandler.<init>()V", false);
        map.put("java.util.logging.Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V", true);
        map.put("java.util.Calendar.getLeastMaximum(I)I", false);
        map.put("java.util.zip.ZipFile.<clinit>()V", false);
        map.put("java.util.ArrayList$SubList.<init>(Ljava/util/ArrayList;Ljava/util/AbstractList;III)V", false);
        map.put("java.util.RegularEnumSet.access$000(Ljava/util/RegularEnumSet;)J", true);
        map.put("java.util.LinkedHashMap.init()V", false);
        map.put("java.util.Arrays.binarySearch([BIIB)I", true);
        map.put("java.util.Collections$UnmodifiableRandomAccessList.writeReplace()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.tryGrow([Ljava/lang/Object;I)V", false);
        map.put("java.util.Map.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.logging.LogManager$LoggerWeakRef.setNode(Ljava/util/logging/LogManager$LogNode;)V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.getState()I", false);
        map.put("java.util.concurrent.ConcurrentHashMap$WriteThroughEntry.getKey()Ljava/lang/Object;", false);
        map.put("java.util.NavigableMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$NavigableSubMap.absHighFence()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.concurrent.FutureTask$Sync.innerGet(J)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.DelayQueue.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock$FairSync.compareAndSetState(II)Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.remove()V", false);
        map.put("java.util.LinkedList.pollFirst()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.TimeUnit$3.toMillis(J)J", true);
        map.put("java.util.concurrent.ConcurrentMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Scanner.nextInt(I)I", false);
        map.put("java.util.Locale.clone()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.lastKey()Ljava/lang/Object;", false);
        map.put("java.util.jar.JarVerifier.processEntry(Lsun/security/util/ManifestEntryVerifier;)V", false);
        map.put("java.util.ServiceLoader.access$300(Ljava/lang/Class;Ljava/lang/String;)V", false);
        map.put("java.util.jar.JarEntry.getName()Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.comparable(Ljava/lang/Object;)Ljava/lang/Comparable;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator.<init>(Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.getQueueLength()I", false);
        map.put("java.util.HashMap.transfer([Ljava/util/HashMap$Entry;Z)V", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.getAndSet(ILjava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.HashMap$KeySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.WeakHashMap$ValueIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.LinkedHashMap.getEntry(Ljava/lang/Object;)Ljava/util/HashMap$Entry;", false);
        map.put("java.util.regex.Matcher.end(I)I", false);
        map.put("java.util.TreeMap$AscendingSubMap$AscendingEntrySetView.<init>(Ljava/util/TreeMap$AscendingSubMap;)V", false);
        map.put("java.util.concurrent.TimeUnit.toMillis(J)J", false);
        map.put("java.util.Collections$UnmodifiableCollection.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Locale.getDisplayString(Ljava/lang/String;Ljava/util/Locale;I)Ljava/lang/String;", false);
        map.put("java.util.concurrent.locks.ReentrantLock.hasWaiters(Ljava/util/concurrent/locks/Condition;)Z", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.triggerTime(JLjava/util/concurrent/TimeUnit;)J", false);
        map.put("java.util.Vector$ListItr.nextIndex()I", true);
        map.put("java.util.Stack.addElement(Ljava/lang/Object;)V", false);
        map.put("java.util.regex.Pattern$GroupRef.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.zip.ZipFile.getZipMessage(J)Ljava/lang/String;", false);
        map.put("java.util.concurrent.locks.ReentrantLock.isLocked()Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.release(I)Z", false);
        map.put("java.util.zip.Inflater.<clinit>()V", false);
        map.put("java.util.Collections$EmptySet.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", true);
        map.put("java.util.Properties.elements()Ljava/util/Enumeration;", false);
        map.put("java.util.Formatter$Conversion.isGeneral(C)Z", true);
        map.put("java.util.Arrays.copyOf([Ljava/lang/Object;I)[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.Lock.lock()V", false);
        map.put("java.util.concurrent.TimeUnit.compareTo(Ljava/lang/Enum;)I", false);
        map.put("java.util.Calendar.setTimeZone(Ljava/util/TimeZone;)V", false);
        map.put("java.util.Collections$CheckedMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$Node.casItem(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.regex.Pattern.access$300(Ljava/lang/CharSequence;II)I", true);
        map.put("java.util.jar.Manifest$FastInputStream.<init>(Ljava/io/InputStream;)V", false);
        map.put("java.util.Date.setMinutes(I)V", false);
        map.put("java.util.Arrays.copyOf([CI)[C", false);
        map.put("java.util.Hashtable.reconstitutionPut([Ljava/util/Hashtable$Entry;Ljava/lang/Object;Ljava/lang/Object;)V", false);
        map.put("java.util.zip.InflaterInputStream.markSupported()Z", true);
        map.put("java.util.ArrayList$SubList.listIterator()Ljava/util/ListIterator;", false);
        map.put("java.util.Vector.indexOf(Ljava/lang/Object;I)I", true);
        map.put("java.util.XMLUtils$Resolver.<init>(Ljava/util/XMLUtils$1;)V", true);
        map.put("java.util.TreeMap.size()I", true);
        map.put("java.util.Calendar.internalSet(II)V", true);
        map.put("java.util.concurrent.ThreadPoolExecutor.getThreadFactory()Ljava/util/concurrent/ThreadFactory;", true);
        map.put("java.util.PropertyPermission.implies(Ljava/security/Permission;)Z", true);
        map.put("java.util.concurrent.DelayQueue$Itr.next()Ljava/lang/Object;", false);
        map.put("java.util.Calendar.getDisplayNamesImpl(IILjava/util/Locale;)Ljava/util/Map;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.<init>(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;Ljava/util/concurrent/RejectedExecutionHandler;)V", false);
        map.put("java.util.Properties.containsKey(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.tailMap(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.TimeZone.getDisplayNames(Ljava/lang/String;Ljava/util/Locale;)[Ljava/lang/String;", false);
        map.put("java.util.Collections$CheckedList$1.previousIndex()I", false);
        map.put("java.util.AbstractMap.containsKey(Ljava/lang/Object;)Z", true);
        map.put("java.util.jar.JarVerifier$VerifierCodeSource.getPrivateSigners()[Ljava/security/CodeSigner;", true);
        map.put("java.util.jar.Attributes$Name.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Ljava/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask;)Z", false);
        map.put("java.util.concurrent.Phaser.getUnarrivedParties()I", true);
        map.put("java.util.TreeMap.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.get(Ljava/lang/Object;)J", false);
        map.put("java.util.UUID.compareTo(Ljava/lang/Object;)I", true);
        map.put("java.util.BitSet.valueOf(Ljava/nio/LongBuffer;)Ljava/util/BitSet;", false);
        map.put("java.util.Formatter$FormatSpecifier.justify(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.TreeMap$DescendingKeyIterator.<init>(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.IdentityHashMap$KeySet.size()I", true);
        map.put("java.util.concurrent.Phaser.phaseOf(J)I", true);
        map.put("java.util.jar.JarFile.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.BlockingQueue.offer(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.TreeMap$DescendingKeyIterator.prevEntry()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.Arrays$ArrayList.<init>([Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue.awaitMatch(Ljava/util/concurrent/LinkedTransferQueue$Node;Ljava/util/concurrent/LinkedTransferQueue$Node;Ljava/lang/Object;ZJ)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter.hasNext()Z", true);
        map.put("java.util.EnumMap$EntryIterator$Entry.access$1502(Ljava/util/EnumMap$EntryIterator$Entry;I)I", false);
        map.put("java.util.concurrent.ForkJoinTask$AdaptedCallable.run()V", false);
        map.put("java.util.Collections$CheckedList$1.set(Ljava/lang/Object;)V", false);
        map.put("java.util.logging.LogRecord.setParameters([Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.locks.LockSupport.park()V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.IdentityHashMap$ValueIterator.<init>(Ljava/util/IdentityHashMap;Ljava/util/IdentityHashMap$1;)V", false);
        map.put("java.util.TreeMap$AscendingSubMap.absLowFence()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.LinkedList.indexOf(Ljava/lang/Object;)I", true);
        map.put("java.util.Arrays.copyOf([ZI)[Z", false);
        map.put("java.util.concurrent.Executors$PrivilegedCallableUsingCurrentClassLoader$1.run()Ljava/lang/Object;", false);
        map.put("java.util.LinkedList.getFirst()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.FutureTask$Sync.getState()I", false);
        map.put("java.util.logging.LogManager$SystemLoggerContext.<init>()V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$1.<init>(I)V", false);
        map.put("java.util.logging.LogRecord.getResourceBundleName()Ljava/lang/String;", true);
        map.put("java.util.Formatter.<init>(Ljava/io/File;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.ceiling(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.addLast(Ljava/lang/Object;)V", false);
        map.put("java.util.regex.Pattern.isSupplementary(I)Z", true);
        map.put("java.util.concurrent.ThreadLocalRandom.next(I)I", false);
        map.put("java.util.Set.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.getAndAdd(I)I", false);
        map.put("java.util.concurrent.FutureTask.get()Ljava/lang/Object;", false);
        map.put("java.util.zip.Checksum.update([BII)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubList.listIterator(I)Ljava/util/ListIterator;", false);
        map.put("java.util.TreeMap.access$000(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.TreeMap$NavigableSubMap.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.ComparableTimSort.mergeAt(I)V", false);
        map.put("java.util.MissingResourceException.toString()Ljava/lang/String;", false);
        map.put("java.util.zip.GZIPInputStream.readUShort(Ljava/io/InputStream;)I", false);
        map.put("java.util.zip.ZStreamRef.<init>(J)V", false);
        map.put("java.util.regex.Matcher.<init>()V", false);
        map.put("java.util.Scanner.hasNextFloat()Z", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.ensurePrestart()V", false);
        map.put("java.util.zip.Inflater.ended()Z", true);
        map.put("java.util.concurrent.TimeUnit.values()[Ljava/util/concurrent/TimeUnit;", false);
        map.put("java.util.concurrent.SynchronousQueue.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.logging.SocketHandler.configure()V", false);
        map.put("java.util.JapaneseImperialCalendar.getWeekNumber(JJ)I", true);
        map.put("java.util.NavigableMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$NavigableSubMap.descendingKeySet()Ljava/util/NavigableSet;", false);
        map.put("java.util.Collections$UnmodifiableList.add(ILjava/lang/Object;)V", false);
        map.put("java.util.Arrays.sort([SII)V", true);
        map.put("java.util.concurrent.ForkJoinWorkerThread.deqTask()Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.WeakHashMap$Entry.toString()Ljava/lang/String;", false);
        map.put("java.util.Timer$1.<init>(Ljava/util/Timer;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.toList(Ljava/util/Collection;)Ljava/util/List;", false);
        map.put("java.util.prefs.PreferenceChangeEvent.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.HashSet.<init>()V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.last()Ljava/util/concurrent/ConcurrentLinkedDeque$Node;", false);
        map.put("java.util.TreeSet.<clinit>()V", false);
        map.put("java.util.PriorityQueue.clear()V", false);
        map.put("java.util.zip.Deflater.reset(J)V", false);
        map.put("java.util.Collections$SynchronizedMap.clear()V", false);
        map.put("java.util.Hashtable.access$600(Ljava/util/Hashtable;)I", true);
        map.put("java.util.Objects.equals(Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.EnumSet.of(Ljava/lang/Enum;)Ljava/util/EnumSet;", false);
        map.put("java.util.AbstractMap$2.size()I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.ceilingEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.Formatter.<init>(Ljava/util/Locale;)V", false);
        map.put("java.util.Deque.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.AbstractList.remove(I)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Semaphore$NonfairSync.nonfairTryAcquireShared(I)I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator.<init>(Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;)V", false);
        map.put("java.util.TreeMap$NavigableSubMap.ceilingKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.GregorianCalendar.complete()V", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;", false);
        map.put("java.util.Formatter$FormatSpecifier.printBoolean(Ljava/lang/Object;)V", false);
        map.put("java.util.IdentityHashMap$IdentityHashMapIterator.hasNext()Z", false);
        map.put("java.util.regex.Pattern$Script.isSatisfiedBy(I)Z", true);
        map.put("java.util.TreeMap.predecessor(Ljava/util/TreeMap$Entry;)Ljava/util/TreeMap$Entry;", true);
        map.put("java.util.Vector.listIterator()Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.RecursiveTask.compute()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireShared(J)J", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.addFirst(Ljava/lang/Object;)V", false);
        map.put("java.util.Collections$UnmodifiableList.subList(II)Ljava/util/List;", false);
        map.put("java.util.concurrent.ConcurrentHashMap$HashEntry.<clinit>()V", false);
        map.put("java.util.concurrent.SynchronousQueue.drainTo(Ljava/util/Collection;)I", false);
        map.put("java.util.regex.Pattern.groupname(I)Ljava/lang/String;", false);
        map.put("java.util.concurrent.LinkedTransferQueue.unsplice(Ljava/util/concurrent/LinkedTransferQueue$Node;Ljava/util/concurrent/LinkedTransferQueue$Node;)V", false);
        map.put("java.util.logging.LogManager.doSetLevel(Ljava/util/logging/Logger;Ljava/util/logging/Level;)V", false);
        map.put("java.util.AbstractMap.size()I", false);
        map.put("java.util.regex.MatchResult.start(I)I", false);
        map.put("java.util.PriorityQueue.peek()Ljava/lang/Object;", true);
        map.put("java.util.JapaneseImperialCalendar.getTransitionEraIndex(Lsun/util/calendar/LocalGregorianCalendar$Date;)I", false);
        map.put("java.util.Hashtable.isEmpty()Z", true);
        map.put("java.util.regex.Pattern$Ques.<init>(Ljava/util/regex/Pattern$Node;I)V", false);
        map.put("java.util.Scanner.findPatternInBuffer(Ljava/util/regex/Pattern;I)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.keyIterator()Ljava/util/Iterator;", false);
        map.put("java.util.Calendar.setTime(Ljava/util/Date;)V", false);
        map.put("java.util.EnumMap$1.hashCode()I", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.tailSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.concurrent.Exchanger.spinWait(Ljava/util/concurrent/Exchanger$Node;Ljava/util/concurrent/Exchanger$Slot;)Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$Entry.toString()Ljava/lang/String;", false);
        map.put("java.util.List.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.Arrays.legacyMergeSort([Ljava/lang/Object;)V", false);
        map.put("java.util.HashSet.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getWriteHoldCount()I", true);
        map.put("java.util.logging.Level.getLevelName()Ljava/lang/String;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.prefs.BackingStoreException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.Vector$Itr.<init>(Ljava/util/Vector;)V", false);
        map.put("java.util.concurrent.TimeUnit.toDays(J)J", false);
        map.put("java.util.WeakHashMap$HashIterator.remove()V", false);
        map.put("java.util.GregorianCalendar.<init>(IIIII)V", false);
        map.put("java.util.TimeZone.getRawOffset()I", false);
        map.put("java.util.concurrent.atomic.AtomicBoolean.compareAndSet(ZZ)Z", false);
        map.put("java.util.regex.Pattern$CharPropertyNames.<init>()V", true);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.<init>(I)V", false);
        map.put("java.util.SubList$1.previousIndex()I", true);
        map.put("java.util.logging.LogRecord.<clinit>()V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque$AbstractItr.succ(Ljava/util/concurrent/LinkedBlockingDeque$Node;)Ljava/util/concurrent/LinkedBlockingDeque$Node;", false);
        map.put("java.util.regex.Pattern.access$400(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.regex.Matcher.reset(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;", false);
        map.put("java.util.TreeMap$SubMap.lastKey()Ljava/lang/Object;", false);
        map.put("java.util.Calendar.setLenient(Z)V", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.set(I)V", false);
        map.put("java.util.regex.Pattern.namedGroups()Ljava/util/Map;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.isTerminating()Z", true);
        map.put("java.util.jar.Attributes.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$NavigableSubMap.pollLastEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.ListIterator.remove()V", false);
        map.put("java.util.regex.Pattern$Bound.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.isRunningOrShutdown(Z)Z", false);
        map.put("java.util.HashMap$EntrySet.<init>(Ljava/util/HashMap;)V", false);
        map.put("java.util.TreeMap.rotateRight(Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.concurrent.AbstractExecutorService.<init>()V", true);
        map.put("java.util.concurrent.CopyOnWriteArrayList.eq(Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.Collections$CheckedList$1.next()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$6.isSatisfiedBy(I)Z", false);
        map.put("java.util.LinkedList.node(I)Ljava/util/LinkedList$Node;", true);
        map.put("java.util.ResourceBundle$RBClassLoader.getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream;", false);
        map.put("java.util.concurrent.SynchronousQueue.remove(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.headSet(Ljava/lang/Object;)Ljava/util/NavigableSet;", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.compareAndSet(II)Z", false);
        map.put("java.util.PriorityQueue.removeEq(Ljava/lang/Object;)Z", false);
        map.put("java.util.jar.JarInputStream.getNextEntry()Ljava/util/zip/ZipEntry;", false);
        map.put("java.util.Date.convertToAbbr(Ljava/lang/StringBuilder;Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
        map.put("java.util.Collections$AsLIFOQueue.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.jar.Manifest.getAttributes(Ljava/lang/String;)Ljava/util/jar/Attributes;", false);
        map.put("java.util.HashMap.getEntry(Ljava/lang/Object;)Ljava/util/HashMap$Entry;", true);
        map.put("java.util.Formatter$Flags.add(Ljava/util/Formatter$Flags;)Ljava/util/Formatter$Flags;", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Segment.put(Ljava/lang/Object;ILjava/lang/Object;Z)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireNanos(IJ)Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap$HashIterator.hasNext()Z", true);
        map.put("java.util.zip.InflaterOutputStream.ensureOpen()V", false);
        map.put("java.util.List.subList(II)Ljava/util/List;", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.<clinit>()V", false);
        map.put("java.util.jar.JavaUtilJarAccessImpl.getManifestDigests(Ljava/util/jar/JarFile;)Ljava/util/List;", false);
        map.put("java.util.AbstractCollection.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.regex.Matcher.regionEnd()I", true);
        map.put("java.util.SortedSet.clear()V", false);
        map.put("java.util.regex.Matcher.replaceAll(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.PriorityQueue.siftDownComparable(ILjava/lang/Object;)V", false);
        map.put("java.util.Collections$SetFromMap.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.prefs.AbstractPreferences.enqueuePreferenceChangeEvent(Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.subSet(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.<init>()V", false);
        map.put("java.util.IdentityHashMap.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.regex.Pattern$Utype.isSatisfiedBy(I)Z", false);
        map.put("java.util.TreeMap$DescendingSubMap.comparator()Ljava/util/Comparator;", true);
        map.put("java.util.Set.isEmpty()Z", false);
        map.put("java.util.ResourceBundle.getLoader(Ljava/lang/Class;)Ljava/lang/ClassLoader;", true);
        map.put("java.util.ComparableTimSort.gallopLeft(Ljava/lang/Comparable;[Ljava/lang/Object;III)I", false);
        map.put("java.util.GregorianCalendar.getWeeksInWeekYear()I", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubList.<init>(Ljava/util/concurrent/CopyOnWriteArrayList;II)V", false);
        map.put("java.util.logging.LogManager.<clinit>()V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.clone()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$DescendingSubMap.tailMap(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.concurrent.Executors.newFixedThreadPool(I)Ljava/util/concurrent/ExecutorService;", false);
        map.put("java.util.SimpleTimeZone.decodeStartRule()V", false);
        map.put("java.util.Scanner.buildIntegerPatternString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.Executors$PrivilegedThreadFactory$1.run()V", false);
        map.put("java.util.HashMap.get(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.logging.Level$KnownLevel.findByLocalizedName(Ljava/lang/String;)Ljava/util/logging/Level$KnownLevel;", true);
        map.put("java.util.concurrent.RunnableScheduledFuture.isPeriodic()Z", false);
        map.put("java.util.Formatter$Flags.toString(Ljava/util/Formatter$Flags;)Ljava/lang/String;", false);
        map.put("java.util.Scanner.setRadix(I)V", false);
        map.put("java.util.TreeSet.clear()V", false);
        map.put("java.util.logging.ConsoleHandler.configure()V", false);
        map.put("java.util.EnumMap.removeMapping(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.logging.LogManager.getLoggerNames()Ljava/util/Enumeration;", false);
        map.put("java.util.jar.JarFile.<init>(Ljava/io/File;)V", false);
        map.put("java.util.List.set(ILjava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.TreeMap.floorEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.zip.Checksum.getValue()J", false);
        map.put("java.util.Properties.store(Ljava/io/OutputStream;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.triggerTime(J)J", false);
        map.put("java.util.Collections$SetFromMap.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.logging.LogManager.getStringProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.HashMap.size()I", true);
        map.put("java.util.concurrent.ForkJoinPool.forkOrSubmit(Ljava/util/concurrent/ForkJoinTask;)V", false);
        map.put("java.util.JumboEnumSet.complement()V", false);
        map.put("java.util.EnumMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.Arrays.binarySearch0([BIIB)I", true);
        map.put("java.util.logging.LogManager$LoggerContext.removeLogger(Ljava/lang/String;)V", false);
        map.put("java.util.Collections$EmptyMap.keySet()Ljava/util/Set;", true);
        map.put("java.util.concurrent.CompletionService.poll(JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.ArrayDeque$DeqIterator.hasNext()Z", true);
        map.put("java.util.regex.Pattern$CharPropertyNames$16.<init>()V", false);
        map.put("java.util.SimpleTimeZone.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.TreeMap.descendingKeyIterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ThreadLocalRandom.<clinit>()V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.writeLock()Ljava/util/concurrent/locks/Lock;", true);
        map.put("java.util.Date.getMonth()I", false);
        map.put("java.util.concurrent.TimeUnit$1.toMillis(J)J", true);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet$1.remove()V", false);
        map.put("java.util.Collections$SynchronizedList.get(I)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.access$000(Ljava/util/concurrent/LinkedBlockingQueue;)Ljava/util/concurrent/LinkedBlockingQueue$Node;", true);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.jar.JarFile$1.nextElement()Ljava/util/jar/JarFile$JarFileEntry;", false);
        map.put("java.util.regex.Pattern$BackRef.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.SortedMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.Collections.enumeration(Ljava/util/Collection;)Ljava/util/Enumeration;", false);
        map.put("java.util.jar.Attributes.values()Ljava/util/Collection;", false);
        map.put("java.util.regex.Matcher.find(I)Z", false);
        map.put("java.util.regex.Pattern.access$600(II)Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.regex.Pattern$First.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.zip.Deflater.end()V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isQueued(Ljava/lang/Thread;)Z", false);
        map.put("java.util.TaskQueue.rescheduleMin(J)V", false);
        map.put("java.util.ResourceBundle$Control.toResourceName(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.jar.JarVerifier.getCerts(Ljava/lang/String;)[Ljava/security/cert/Certificate;", false);
        map.put("java.util.StringTokenizer.countTokens()I", true);
        map.put("java.util.XMLUtils.emitDocument(Lorg/w3c/dom/Document;Ljava/io/OutputStream;Ljava/lang/String;)V", false);
        map.put("java.util.NavigableMap.higherKey(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Phaser.arrivedOf(J)I", true);
        map.put("java.util.concurrent.LinkedBlockingDeque.offerLast(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.Properties.load0(Ljava/util/Properties$LineReader;)V", false);
        map.put("java.util.IdentityHashMap.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.concurrent.ExecutorService.submit(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.Currency.readStringArray(Ljava/io/DataInputStream;I)[Ljava/lang/String;", false);
        map.put("java.util.spi.CurrencyNameProvider.<init>()V", true);
        map.put("java.util.Deque.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.logging.LogManager$LoggerContext.ensureRootLogger(Ljava/util/logging/Logger;)V", true);
        map.put("java.util.Calendar.selectFields()I", true);
        map.put("java.util.concurrent.LinkedBlockingQueue.size()I", true);
        map.put("java.util.IdentityHashMap$EntryIterator$Entry.getKey()Ljava/lang/Object;", true);
        map.put("java.util.jar.Attributes.getValue(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.jar.JarFile.unsignedEntryNames()Ljava/util/Enumeration;", false);
        map.put("java.util.ArrayList.indexOf(Ljava/lang/Object;)I", true);
        map.put("java.util.regex.Pattern$UnixCaret.<init>()V", false);
        map.put("java.util.ArrayList.rangeCheckForAdd(I)V", false);
        map.put("java.util.prefs.Preferences.exportNode(Ljava/io/OutputStream;)V", false);
        map.put("java.util.regex.UnicodeProp$7.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.jar.Manifest.hashCode()I", false);
        map.put("java.util.ArrayList$SubList.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.IdentityHashMap.clone()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.isHeldExclusively()Z", false);
        map.put("java.util.Calendar.getInstance(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar;", false);
        map.put("java.util.Collections$UnmodifiableCollection.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.HashMap$KeySet.clear()V", false);
        map.put("java.util.regex.Matcher.matches()Z", false);
        map.put("java.util.NavigableSet.higher(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.LinkedList.toString()Ljava/lang/String;", false);
        map.put("java.util.Collections$SingletonList.get(I)Ljava/lang/Object;", false);
        map.put("java.util.Vector.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.AbstractList$Itr.remove()V", false);
        map.put("java.util.concurrent.TimeUnit$1.toHours(J)J", true);
        map.put("java.util.logging.Logger.<clinit>()V", false);
        map.put("java.util.LinkedHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.compareAndSetState(JJ)Z", false);
        map.put("java.util.TreeMap$AscendingSubMap.absFloor(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.logging.StreamHandler.checkPermission()V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames.charPropertyFor(Ljava/lang/String;)Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.regex.UnicodeProp$1.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.concurrent.ConcurrentHashMap$KeyIterator.<init>(Ljava/util/concurrent/ConcurrentHashMap;)V", false);
        map.put("java.util.ArrayDeque.push(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock.newCondition()Ljava/util/concurrent/locks/Condition;", false);
        map.put("java.util.Collections$CheckedList.listIterator()Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.locks.ReentrantLock.getHoldCount()I", false);
        map.put("java.util.ArrayDeque.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.compareAndSetWaitStatus(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;II)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.HashMap$Values.<init>(Ljava/util/HashMap;)V", false);
        map.put("java.util.logging.Logger.log(Ljava/util/logging/Level;Ljava/lang/String;)V", true);
        map.put("java.util.concurrent.Future.isDone()Z", false);
        map.put("java.util.logging.LogManager.access$102(Ljava/util/logging/LogManager;)Ljava/util/logging/LogManager;", false);
        map.put("java.util.regex.Pattern$Prolog.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.ResourceBundle$CacheKey.access$602(Ljava/util/ResourceBundle$CacheKey;J)J", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Collections$SynchronizedList.<init>(Ljava/util/List;)V", false);
        map.put("java.util.Collections$CheckedCollection$1.next()Ljava/lang/Object;", false);
        map.put("java.util.EnumMap$ValueIterator.hasNext()Z", false);
        map.put("java.util.PriorityQueue$Itr.remove()V", false);
        map.put("java.util.logging.Level.intValue()I", true);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync.<init>()V", false);
        map.put("java.util.Collections$CheckedCollection.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.EnumSet.copyOf(Ljava/util/EnumSet;)Ljava/util/EnumSet;", false);
        map.put("java.util.prefs.AbstractPreferences.addPreferenceChangeListener(Ljava/util/prefs/PreferenceChangeListener;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.setNextRunTime()V", false);
        map.put("java.util.PriorityQueue.<init>(ILjava/util/Comparator;)V", false);
        map.put("java.util.jar.JarVerifier.findMatchingSigners(Ljava/security/CodeSource;)[Ljava/security/CodeSigner;", true);
        map.put("java.util.prefs.PreferenceChangeEvent.getNewValue()Ljava/lang/String;", true);
        map.put("java.util.ComparableTimSort.<init>([Ljava/lang/Object;)V", false);
        map.put("java.util.TreeMap$DescendingSubMap.subHigher(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.Calendar.isWeekDateSupported()Z", true);
        map.put("java.util.concurrent.Exchanger.doExchange(Ljava/lang/Object;ZJ)Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$9.isSatisfiedBy(I)Z", true);
        map.put("java.util.Collections$UnmodifiableList$1.previous()Ljava/lang/Object;", false);
        map.put("java.util.Date.setSeconds(I)V", false);
        map.put("java.util.concurrent.ArrayBlockingQueue$Itr.<init>(Ljava/util/concurrent/ArrayBlockingQueue;)V", false);
        map.put("java.util.concurrent.TimeUnit$3.toSeconds(J)J", true);
        map.put("java.util.IllegalFormatFlagsException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.ListIterator.nextIndex()I", false);
        map.put("java.util.jar.JarOutputStream.putNextEntry(Ljava/util/zip/ZipEntry;)V", false);
        map.put("java.util.concurrent.atomic.AtomicLong.getAndIncrement()J", false);
        map.put("java.util.HashSet.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Scanner.nextDouble()D", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubList.subList(II)Ljava/util/List;", false);
        map.put("java.util.GregorianCalendar.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.concurrent.Executors$FinalizableDelegatedExecutorService.finalize()V", false);
        map.put("java.util.PriorityQueue$Itr.<init>(Ljava/util/PriorityQueue;)V", false);
        map.put("java.util.regex.Pattern$CharProperty$1.<init>(Ljava/util/regex/Pattern$CharProperty;)V", false);
        map.put("java.util.ResourceBundle$NoFallbackControl.access$1200()Ljava/util/ResourceBundle$Control;", true);
        map.put("java.util.Collections$SetFromMap.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.Locale.toString()Ljava/lang/String;", false);
        map.put("java.util.logging.Logger.getPlatformLogger(Ljava/lang/String;)Ljava/util/logging/Logger;", false);
        map.put("java.util.logging.XMLFormatter.getTail(Ljava/util/logging/Handler;)Ljava/lang/String;", true);
        map.put("java.util.concurrent.Semaphore.tryAcquire()Z", false);
        map.put("java.util.regex.Pattern.skip()I", false);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapEntryIterator.remove()V", false);
        map.put("java.util.EnumMap$KeyIterator.<init>(Ljava/util/EnumMap;Ljava/util/EnumMap$1;)V", false);
        map.put("java.util.LinkedList.add(ILjava/lang/Object;)V", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.unpushTask(Ljava/util/concurrent/ForkJoinTask;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.last()Ljava/lang/Object;", false);
        map.put("java.util.jar.JarFile.getName()Ljava/lang/String;", false);
        map.put("java.util.logging.LogManager$Cleaner.run()V", false);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegDeleteKey(I[B)I", false);
        map.put("java.util.TimSort.reverseRange([Ljava/lang/Object;II)V", true);
        map.put("java.util.WeakHashMap.<clinit>()V", false);
        map.put("java.util.prefs.Preferences.systemRoot()Ljava/util/prefs/Preferences;", false);
        map.put("java.util.Collections$SynchronizedMap.values()Ljava/util/Collection;", false);
        map.put("java.util.AbstractMap.clear()V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.incrementAndGet(I)I", false);
        map.put("java.util.Collections$AsLIFOQueue.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections.indexedBinarySearch(Ljava/util/List;Ljava/lang/Object;Ljava/util/Comparator;)I", false);
        map.put("java.util.EnumMap.size()I", true);
        map.put("java.util.prefs.Preferences.putDouble(Ljava/lang/String;D)V", false);
        map.put("java.util.ArrayDeque.offerFirst(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.FutureTask$Sync.innerGet()Ljava/lang/Object;", false);
        map.put("java.util.zip.GZIPInputStream.readTrailer()Z", false);
        map.put("java.util.Collections$CheckedSortedSet.<init>(Ljava/util/SortedSet;Ljava/lang/Class;)V", false);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapIterator.nextEntry()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.TreeMap$NavigableSubMap.lastEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.Collections$SynchronizedMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.IdentityHashMap.removeMapping(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.Scanner.saveState()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.inOpenRange(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.StringTokenizer.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.TimeUnit$5.toNanos(J)J", false);
    }

    private static void m6() {

        map.put("java.util.EnumMap.containsKey(Ljava/lang/Object;)Z", true);
        map.put("java.util.zip.Deflater.getTotalOut()I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.spi.LocaleNameProvider.<init>()V", true);
        map.put("java.util.LinkedList.linkFirst(Ljava/lang/Object;)V", false);
        map.put("java.util.WeakHashMap$KeySet.<init>(Ljava/util/WeakHashMap;Ljava/util/WeakHashMap$1;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.inHalfOpenRange(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap$EntryIterator.next()Ljava/util/Map$Entry;", false);
        map.put("java.util.Date.<init>(J)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.<init>(Ljava/util/concurrent/ScheduledThreadPoolExecutor$DelayedWorkQueue;[Ljava/util/concurrent/RunnableScheduledFuture;)V", false);
        map.put("java.util.Hashtable$Entry.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.SortedMap.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.RegularEnumSet.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.SubList.add(ILjava/lang/Object;)V", false);
        map.put("java.util.jar.JarVerifier$4.nextElement()Ljava/lang/String;", false);
        map.put("java.util.prefs.InvalidPreferencesFormatException.<init>(Ljava/lang/Throwable;)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue.casHead(Ljava/util/concurrent/LinkedTransferQueue$Node;Ljava/util/concurrent/LinkedTransferQueue$Node;)Z", false);
        map.put("java.util.Locale$LocaleNameGetter.getObject(Ljava/lang/Object;Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.lastKey()Ljava/lang/Object;", false);
        map.put("java.util.jar.JarVerifier$VerifierCodeSource.getPrivateCertificates()[Ljava/security/cert/Certificate;", true);
        map.put("java.util.Collections$UnmodifiableSortedMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.concurrent.ConcurrentHashMap.values()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.<init>(ILjava/util/Comparator;)V", false);
        map.put("java.util.Formatter.access$202(D)D", false);
        map.put("java.util.Scanner.<init>(Ljava/lang/Readable;)V", false);
        map.put("java.util.Map$Entry.setValue(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Semaphore$Sync.<init>(I)V", false);
        map.put("java.util.Collections.indexedBinarySearch(Ljava/util/List;Ljava/lang/Object;)I", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue$Itr.advance()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedTransferQueue.drainTo(Ljava/util/Collection;I)I", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$23.<init>()V", false);
        map.put("java.util.zip.InflaterOutputStream.flush()V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.drainQueue()Ljava/util/List;", false);
        map.put("java.util.Arrays.fill([DIID)V", false);
        map.put("java.util.concurrent.TimeUnit$6.convert(JLjava/util/concurrent/TimeUnit;)J", false);
        map.put("java.util.ResourceBundle.getBundleImpl(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;", false);
        map.put("java.util.Collection.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.toString()Ljava/lang/String;", false);
        map.put("java.util.ArrayDeque.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.Executors$DelegatedExecutorService.execute(Ljava/lang/Runnable;)V", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.tryDeqAndExec(Ljava/util/concurrent/ForkJoinTask;)I", false);
        map.put("java.util.TooManyListenersException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.UUID.variant()I", true);
        map.put("java.util.Arrays.copyOfRange([CII)[C", false);
        map.put("java.util.zip.DeflaterOutputStream.write([BII)V", false);
        map.put("java.util.Formatter$FormatSpecifier.failMismatch(Ljava/util/Formatter$Flags;C)V", false);
        map.put("java.util.concurrent.ForkJoinPool.getQueuedTaskCount()J", true);
        map.put("java.util.Scanner.hasNextInt(I)Z", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.List.hashCode()I", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.LinkedHashSet.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.jar.JarVerifier$2.nextElement()Ljava/util/jar/JarEntry;", false);
        map.put("java.util.ResourceBundle.setParent(Ljava/util/ResourceBundle;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.offerFirst(Ljava/lang/Object;)Z", false);
        map.put("java.util.Deque.addFirst(Ljava/lang/Object;)V", false);
        map.put("java.util.ComparableTimSort.binarySort([Ljava/lang/Object;III)V", false);
        map.put("java.util.TreeMap$NavigableSubMap.subLower(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.TreeMap$KeySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.jar.JarInputStream.createZipEntry(Ljava/lang/String;)Ljava/util/zip/ZipEntry;", false);
        map.put("java.util.concurrent.Executors.newCachedThreadPool()Ljava/util/concurrent/ExecutorService;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.checkNotNull(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Values.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.WeakHashMap.putAll(Ljava/util/Map;)V", false);
        map.put("java.util.logging.LogManager$RootLogger.<init>(Ljava/util/logging/LogManager;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.addWaiter(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.onShutdown()V", false);
        map.put("java.util.concurrent.LinkedBlockingQueue$Itr.remove()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.containsKey(Ljava/lang/Object;)Z", false);
        map.put("java.util.AbstractList$ListItr.nextIndex()I", true);
        map.put("java.util.jar.JarFile.<init>(Ljava/io/File;Z)V", false);
        map.put("java.util.Collections$AsLIFOQueue.element()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.ArrayList$Itr.<init>(Ljava/util/ArrayList;)V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.shutdown()V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.offer(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.concurrent.SynchronousQueue.offer(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.ReadWriteLock.writeLock()Ljava/util/concurrent/locks/Lock;", false);
        map.put("java.util.TaskQueue.<clinit>()V", false);
        map.put("java.util.concurrent.Phaser.forceTermination()V", false);
        map.put("java.util.ArrayDeque.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedReaderThreads()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;", false);
        map.put("java.util.SimpleTimeZone.setEndRule(III)V", false);
        map.put("java.util.TreeSet.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.concurrent.LinkedTransferQueue.firstDataItem()Ljava/lang/Object;", true);
        map.put("java.util.IdentityHashMap.hash(Ljava/lang/Object;I)I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$EntrySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.ResourceBundle$CacheKey.access$400(Ljava/util/ResourceBundle$CacheKey;)Ljava/lang/Throwable;", true);
        map.put("java.util.Queue.peek()Ljava/lang/Object;", false);
        map.put("java.util.JapaneseImperialCalendar.getFixedDateMonth1(Lsun/util/calendar/LocalGregorianCalendar$Date;J)J", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.isEmpty()Z", true);
        map.put("java.util.TreeMap$AscendingSubMap.subCeiling(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.putFirst(Ljava/lang/Object;)V", false);
        map.put("java.util.Collection.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.Properties$LineReader.readLine()I", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue$Node.lazySetNext(Ljava/util/concurrent/ConcurrentLinkedQueue$Node;)V", false);
        map.put("java.util.logging.ConsoleHandler.close()V", false);
        map.put("java.util.concurrent.TimeUnit$1.excessNanos(JJ)I", true);
        map.put("java.util.regex.Matcher.start()I", false);
        map.put("java.util.concurrent.Phaser.abortWait(I)I", false);
        map.put("java.util.WeakHashMap.eq(Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.TreeMap$DescendingSubMap.absHigher(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.concurrent.atomic.AtomicBoolean.get()Z", true);
        map.put("java.util.TimeZone.getDefault()Ljava/util/TimeZone;", false);
        map.put("java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread()Ljava/lang/Thread;", true);
        map.put("java.util.concurrent.TimeUnit$5.toHours(J)J", true);
        map.put("java.util.Scanner$1.hasName(Ljava/util/regex/Pattern;Ljava/lang/String;)Z", true);
        map.put("java.util.jar.JarFile$1.hasMoreElements()Z", false);
        map.put("java.util.concurrent.Exchanger.createSlot(I)V", true);
        map.put("java.util.regex.Pattern$4.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", true);
        map.put("java.util.IllegalFormatFlagsException.getFlags()Ljava/lang/String;", true);
        map.put("java.util.ServiceLoader.access$500(Ljava/util/ServiceLoader;)Ljava/util/ServiceLoader$LazyIterator;", true);
        map.put("java.util.logging.LoggingMXBean.getLoggerNames()Ljava/util/List;", false);
        map.put("java.util.LinkedHashSet.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.itemAt(I)Ljava/lang/Object;", true);
        map.put("java.util.Vector.ensureCapacity(I)V", false);
        map.put("java.util.prefs.Preferences.<init>()V", true);
        map.put("java.util.regex.ASCII.isHexDigit(I)Z", true);
        map.put("java.util.PriorityQueue.access$300(Ljava/util/PriorityQueue;)[Ljava/lang/Object;", true);
        map.put("java.util.concurrent.PriorityBlockingQueue.put(Ljava/lang/Object;)V", false);
        map.put("java.util.LocaleISOData.<init>()V", true);
        map.put("java.util.jar.JarFile.access$000(Ljava/util/jar/JarFile;)V", false);
        map.put("java.util.Collections$SynchronizedSortedSet.headSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.concurrent.ForkJoinPool$InvokeAll.invokeAll(Ljava/util/Collection;)Ljava/util/Collection;", false);
        map.put("java.util.logging.Logger.info(Ljava/lang/String;)V", true);
        map.put("java.util.concurrent.locks.ReentrantLock$FairSync.setExclusiveOwnerThread(Ljava/lang/Thread;)V", false);
        map.put("java.util.TreeMap$KeySet.pollLast()Ljava/lang/Object;", false);
        map.put("java.util.Locale$LocaleKey.access$300(Ljava/util/Locale$LocaleKey;)Lsun/util/locale/LocaleExtensions;", true);
        map.put("java.util.Deque.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.AbstractList.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.AbstractSet.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap$NavigableSubMap.size()I", false);
        map.put("java.util.zip.ZipInputStream.<init>(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V", false);
        map.put("java.util.Arrays.<init>()V", true);
        map.put("java.util.TreeMap$SubMap.<init>(Ljava/util/TreeMap;)V", false);
        map.put("java.util.zip.GZIPInputStream.close()V", false);
        map.put("java.util.WeakHashMap$EntrySet.<init>(Ljava/util/WeakHashMap;)V", false);
        map.put("java.util.concurrent.AbstractExecutorService.invokeAll(Ljava/util/Collection;)Ljava/util/List;", false);
        map.put("java.util.IdentityHashMap$Values.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.AbstractList$ListItr.hasPrevious()Z", true);
        map.put("java.util.EnumSet.complement()V", false);
        map.put("java.util.RegularEnumSet.add(Ljava/lang/Enum;)Z", false);
        map.put("java.util.concurrent.Semaphore$Sync.getQueuedThreads()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.access$100(Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;)Z", true);
        map.put("java.util.MissingResourceException.getMessage()Ljava/lang/String;", false);
        map.put("java.util.SortedSet.tailSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.isRunning(I)Z", true);
        map.put("java.util.Collections$CheckedCollection$1.hasNext()Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.findLast()Ljava/util/concurrent/ConcurrentSkipListMap$Node;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWIterator.hasPrevious()Z", true);
        map.put("java.util.GregorianCalendar.getWeekYear()I", false);
        map.put("java.util.concurrent.ForkJoinTask$ExceptionNode.<init>(Ljava/util/concurrent/ForkJoinTask;Ljava/lang/Throwable;Ljava/util/concurrent/ForkJoinTask$ExceptionNode;)V", false);
        map.put("java.util.regex.Pattern$GroupHead.<init>(I)V", false);
        map.put("java.util.JapaneseImperialCalendar.getEraIndex(Lsun/util/calendar/LocalGregorianCalendar$Date;)I", false);
        map.put("java.util.logging.StreamHandler.flush()V", false);
        map.put("java.util.Collections$UnmodifiableList$1.<init>(Ljava/util/Collections$UnmodifiableList;I)V", false);
        map.put("java.util.EnumMap$EntryIterator.<init>(Ljava/util/EnumMap;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubList.size()I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.remove(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.remainingCapacity()I", true);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.casHead(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Z", false);
        map.put("java.util.TreeMap$AscendingSubMap.subHighest()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.logging.LogManager$2.<init>(Ljava/util/logging/LogManager;)V", false);
        map.put("java.util.AbstractSet.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.regex.Pattern.closure(Ljava/util/regex/Pattern$Node;)Ljava/util/regex/Pattern$Node;", false);
        map.put("java.util.LinkedHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.zip.Deflater.setStrategy(I)V", false);
        map.put("java.util.JapaneseImperialCalendar.getTimeZone()Ljava/util/TimeZone;", false);
        map.put("java.util.logging.Handler.setEncoding(Ljava/lang/String;)V", false);
        map.put("java.util.IdentityHashMap$KeySet.clear()V", false);
        map.put("java.util.concurrent.ConcurrentMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferQueue.advanceTail(Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;)V", false);
        map.put("java.util.LinkedHashMap.access$000(Ljava/util/LinkedHashMap;)Z", true);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.acquire(I)V", false);
        map.put("java.util.regex.UnicodeProp$12.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.zip.GZIPInputStream.skipBytes(Ljava/io/InputStream;I)V", false);
        map.put("java.util.Collections$SynchronizedCollection.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.logging.SimpleFormatter.formatMessage(Ljava/util/logging/LogRecord;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.incrementAndGet(I)J", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.nonfairTryAcquire(I)Z", false);
        map.put("java.util.Collections$CheckedMap.badKeyMsg(Ljava/lang/Object;)Ljava/lang/String;", false);
        map.put("java.util.jar.JarOutputStream.setComment(Ljava/lang/String;)V", false);
        map.put("java.util.BitSet.cardinality()I", true);
        map.put("java.util.NavigableMap.lastKey()Ljava/lang/Object;", false);
        map.put("java.util.ArrayList$Itr.checkForComodification()V", false);
        map.put("java.util.Scanner.nextBigDecimal()Ljava/math/BigDecimal;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.tailMap(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.prefs.PreferenceChangeEvent.<init>(Ljava/util/prefs/Preferences;Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.TaskQueue.fixDown(I)V", true);
        map.put("java.util.jar.JarVerifier.getCodeSources(Ljava/util/jar/JarFile;Ljava/net/URL;)[Ljava/security/CodeSource;", false);
        map.put("java.util.Collections$SynchronizedSet.hashCode()I", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.setExclusiveOwnerThread(Ljava/lang/Thread;)V", false);
        map.put("java.util.regex.UnicodeProp$18.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.ResourceBundle.containsKey(Ljava/lang/String;)Z", false);
        map.put("java.util.Hashtable$EntrySet.clear()V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$Node.lazySetPrev(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)V", false);
        map.put("java.util.regex.Pattern$SingleU.isSatisfiedBy(I)Z", false);
        map.put("java.util.ResourceBundle.isValidBundle(Ljava/util/ResourceBundle;)Z", true);
        map.put("java.util.concurrent.SynchronousQueue.retainAll(Ljava/util/Collection;)Z", true);
        map.put("java.util.logging.Handler.getFilter()Ljava/util/logging/Filter;", true);
        map.put("java.util.Formatter$FormatSpecifier.mantissa([CI)[C", false);
        map.put("java.util.TimerThread.<init>(Ljava/util/TaskQueue;)V", false);
        map.put("java.util.concurrent.Phaser.arrive()I", false);
        map.put("java.util.regex.Pattern$BnMS.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.Properties.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$SingleI.<init>(II)V", false);
        map.put("java.util.Collections$CheckedList.hashCode()I", false);
        map.put("java.util.concurrent.atomic.AtomicBoolean.<clinit>()V", false);
        map.put("java.util.ArrayList.grow(I)V", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.poll(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.Lock.newCondition()Ljava/util/concurrent/locks/Condition;", false);
        map.put("java.util.TreeMap$EntryIterator.next()Ljava/util/Map$Entry;", false);
        map.put("java.util.EnumMap$EntryIterator$Entry.setValue(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.removeHighest()Ljava/util/Map$Entry;", false);
        map.put("java.util.Collections$CheckedSet.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.ResourceBundle$CacheKey.getCause()Ljava/lang/Throwable;", true);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireInterruptibly(I)V", false);
        map.put("java.util.logging.FileHandler.<init>(Ljava/lang/String;II)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.tailMap(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.WeakHashMap$EntryIterator.next()Ljava/util/Map$Entry;", false);
        map.put("java.util.TreeMap$DescendingSubMap.absLowFence()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.concurrent.ForkJoinPool.getActiveThreadCount()I", true);
        map.put("java.util.regex.Pattern$Single.<init>(I)V", false);
        map.put("java.util.concurrent.Phaser$QNode.isReleasable()Z", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater.fullCheck(Ljava/lang/Object;)V", false);
        map.put("java.util.HashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentHashMap.randomHashSeed(Ljava/util/concurrent/ConcurrentHashMap;)I", true);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(I)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(Z)V", false);
        map.put("java.util.prefs.XmlSupport.putPreferencesInXml(Lorg/w3c/dom/Element;Lorg/w3c/dom/Document;Ljava/util/prefs/Preferences;Z)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.floorEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.EventListenerProxy.getListener()Ljava/util/EventListener;", true);
        map.put("java.util.concurrent.SynchronousQueue$TransferQueue$QNode.casItem(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.setHeadAndPropagate(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;J)V", false);
        map.put("java.util.JumboEnumSet.containsAll(Ljava/util/Collection;)Z", true);
        map.put("java.util.TimeZone.hasSameRules(Ljava/util/TimeZone;)Z", false);
        map.put("java.util.Deque.removeLastOccurrence(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.getHoldCount()I", false);
        map.put("java.util.regex.Matcher.<init>(Ljava/util/regex/Pattern;Ljava/lang/CharSequence;)V", false);
        map.put("java.util.concurrent.atomic.AtomicMarkableReference.compareAndSet(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z", false);
        map.put("java.util.EnumSet.of(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.decrementWorkerCount()V", false);
        map.put("java.util.AbstractSet.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitQueueLength(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)I", false);
        map.put("java.util.XMLUtils$EH.<init>()V", true);
        map.put("java.util.Date.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.AbstractList.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.atomic.AtomicLong.lazySet(J)V", false);
        map.put("java.util.Collections$EmptyIterator.<init>(Ljava/util/Collections$1;)V", true);
        map.put("java.util.logging.Logger.demandLogger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;)Ljava/util/logging/Logger;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.terminated()V", true);
        map.put("java.util.Collections.unmodifiableMap(Ljava/util/Map;)Ljava/util/Map;", false);
        map.put("java.util.NavigableSet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.siftUpComparable(ILjava/lang/Object;[Ljava/lang/Object;)V", false);
        map.put("java.util.Deque.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicMarkableReference.get([Z)Ljava/lang/Object;", true);
        map.put("java.util.EnumMap$KeySet.size()I", true);
        map.put("java.util.logging.Handler.isLoggable(Ljava/util/logging/LogRecord;)Z", false);
        map.put("java.util.Collections.emptyListIterator()Ljava/util/ListIterator;", true);
        map.put("java.util.logging.MemoryHandler.setPushLevel(Ljava/util/logging/Level;)V", false);
        map.put("java.util.ListResourceBundle.getString(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator.nextIndex()I", false);
        map.put("java.util.Scanner.<init>(Ljava/io/InputStream;)V", false);
        map.put("java.util.regex.MatchResult.groupCount()I", false);
        map.put("java.util.concurrent.atomic.AtomicReference.<init>()V", true);
        map.put("java.util.Arrays.sort([S)V", true);
        map.put("java.util.regex.Matcher.regionStart()I", true);
        map.put("java.util.AbstractCollection.clear()V", false);
        map.put("java.util.Stack.elementAt(I)Ljava/lang/Object;", false);
        map.put("java.util.HashSet.<init>(IF)V", false);
        map.put("java.util.concurrent.ConcurrentHashMap$KeySet.size()I", false);
        map.put("java.util.LinkedList.isPositionIndex(I)Z", true);
        map.put("java.util.Currency.<clinit>()V", false);
        map.put("java.util.Scanner.toString()Ljava/lang/String;", false);
        map.put("java.util.Calendar.getActualMaximum(I)I", true);
        map.put("java.util.concurrent.ArrayBlockingQueue.poll()Ljava/lang/Object;", false);
        map.put("java.util.ResourceBundle$Control$1.run()Ljava/lang/Object;", false);
        map.put("java.util.jar.JarVerifier$VerifierCodeSource.<init>(Ljava/lang/Object;Ljava/net/URL;[Ljava/security/CodeSigner;)V", false);
        map.put("java.util.GregorianCalendar.getTimeZone()Ljava/util/TimeZone;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.writeLock()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;", true);
        map.put("java.util.concurrent.ForkJoinWorkerThread.cancelTasks()V", false);
        map.put("java.util.TreeMap$NavigableSubMap.floorEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.BitSet.previousSetBit(I)I", true);
        map.put("java.util.Collections.singletonMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;", false);
        map.put("java.util.Hashtable.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.PropertyPermissionCollection.add(Ljava/security/Permission;)V", false);
        map.put("java.util.Collections$UnmodifiableSortedSet.<init>(Ljava/util/SortedSet;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.getState()I", true);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.isQueued(Ljava/lang/Thread;)Z", false);
        map.put("java.util.zip.Deflater.end(J)V", false);
        map.put("java.util.concurrent.CountDownLatch$Sync.setState(I)V", false);
        map.put("java.util.IllegalFormatConversionException.getConversion()C", true);
        map.put("java.util.concurrent.AbstractExecutorService.submit(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.Scanner$1.<init>(Ljava/util/Scanner;I)V", false);
        map.put("java.util.concurrent.atomic.AtomicStampedReference.compareAndSet(Ljava/lang/Object;Ljava/lang/Object;II)Z", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.<init>(Ljava/util/concurrent/ThreadPoolExecutor;Ljava/lang/Runnable;)V", false);
        map.put("java.util.jar.JarFile.entries()Ljava/util/Enumeration;", false);
        map.put("java.util.Vector.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.navigableKeySet()Ljava/util/NavigableSet;", false);
        map.put("java.util.logging.LogManager$5.<init>(Ljava/util/logging/Logger;Ljava/util/logging/Level;)V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$15.<init>()V", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.Collections$SingletonSet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.HashMap.loadFactor()F", true);
        map.put("java.util.concurrent.ForkJoinPool.awaitBlocker(Ljava/util/concurrent/ForkJoinPool$ManagedBlocker;)V", false);
        map.put("java.util.regex.Pattern$CIBackRef.<init>(IZ)V", false);
        map.put("java.util.concurrent.atomic.AtomicStampedReference.attemptStamp(Ljava/lang/Object;I)Z", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.comparator()Ljava/util/Comparator;", true);
        map.put("java.util.Collections$UnmodifiableCollection.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.LinkedList.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.peekTask()Ljava/util/concurrent/ForkJoinTask;", true);
        map.put("java.util.prefs.Preferences.get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.WeakHashMap$KeySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.BlockingQueue.put(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.TimeUnit$5.convert(JLjava/util/concurrent/TimeUnit;)J", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.access$100(Ljava/util/concurrent/ScheduledThreadPoolExecutor;)Z", true);
        map.put("java.util.List.listIterator(I)Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync.apparentlyFirstQueuedIsExclusive()Z", false);
        map.put("java.util.TimeZone.getOffsets(J[I)I", false);
        map.put("java.util.concurrent.locks.Lock.tryLock()Z", false);
        map.put("java.util.prefs.XmlSupport$EH.<init>(Ljava/util/prefs/XmlSupport$1;)V", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.firstKey()Ljava/lang/Object;", false);
        map.put("java.util.AbstractList.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.logging.Logger.setUseParentHandlers(Z)V", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.getPool()Ljava/util/concurrent/ForkJoinPool;", true);
        map.put("java.util.Hashtable$KeySet.clear()V", false);
        map.put("java.util.zip.ZipFile$ZipFileInputStream.read()I", false);
        map.put("java.util.HashSet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.prefs.Preferences.putByteArray(Ljava/lang/String;[B)V", false);
        map.put("java.util.PriorityQueue.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.TreeMap$KeySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.LinkedList.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.Collections$SynchronizedMap.<init>(Ljava/util/Map;)V", false);
        map.put("java.util.regex.Pattern$Slice.<init>([I)V", false);
        map.put("java.util.SortedMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.concurrent.ForkJoinPool.shutdownNow()Ljava/util/List;", false);
        map.put("java.util.IdentityHashMap.size()I", true);
        map.put("java.util.prefs.XmlSupport.ImportSubtree(Ljava/util/prefs/Preferences;Lorg/w3c/dom/Element;)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue.casTail(Ljava/util/concurrent/LinkedTransferQueue$Node;Ljava/util/concurrent/LinkedTransferQueue$Node;)Z", false);
        map.put("java.util.jar.Manifest.getMainAttributes()Ljava/util/jar/Attributes;", true);
        map.put("java.util.GregorianCalendar.getDisplayName(IILjava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.regex.Matcher.replaceFirst(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.regex.Matcher.find()Z", false);
        map.put("java.util.concurrent.Executors$FinalizableDelegatedExecutorService.<init>(Ljava/util/concurrent/ExecutorService;)V", false);
        map.put("java.util.LinkedList$ListItr.previousIndex()I", true);
        map.put("java.util.IdentityHashMap.containsMapping(Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.ThreadLocalRandom.nextInt(I)I", false);
        map.put("java.util.concurrent.ConcurrentHashMap.setEntryAt([Ljava/util/concurrent/ConcurrentHashMap$HashEntry;ILjava/util/concurrent/ConcurrentHashMap$HashEntry;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.AbstractList.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.subMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.concurrent.ConcurrentMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.TimeZone.getTimeZone(Ljava/lang/String;)Ljava/util/TimeZone;", false);
        map.put("java.util.spi.TimeZoneNameProvider.<init>()V", true);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.updateHead(Ljava/util/concurrent/ConcurrentLinkedQueue$Node;Ljava/util/concurrent/ConcurrentLinkedQueue$Node;)V", false);
        map.put("java.util.Vector.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.logging.LogManager.getLoggingMXBean()Ljava/util/logging/LoggingMXBean;", false);
        map.put("java.util.concurrent.DelayQueue$Itr.next()Ljava/util/concurrent/Delayed;", false);
        map.put("java.util.logging.LogManager.checkAccess()V", false);
        map.put("java.util.jar.JarVerifier.getUnsignedCS(Ljava/net/URL;)Ljava/security/CodeSource;", false);
        map.put("java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.removeDescending()V", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.incrementAndGet()I", false);
        map.put("java.util.ResourceBundle$Control.access$300()Ljava/util/ResourceBundle$Control;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.access$500(Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections$SynchronizedMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.zip.ZipEntry.hashCode()I", false);
        map.put("java.util.concurrent.LinkedTransferQueue.peek()Ljava/lang/Object;", true);
        map.put("java.util.ServiceLoader.loadInstalled(Ljava/lang/Class;)Ljava/util/ServiceLoader;", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.insert(Ljava/lang/Object;)V", false);
        map.put("java.util.zip.ZipFile$1.nextElement()Ljava/util/zip/ZipEntry;", false);
        map.put("java.util.concurrent.Exchanger.awaitNanos(Ljava/util/concurrent/Exchanger$Node;Ljava/util/concurrent/Exchanger$Slot;J)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.DelayQueue.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndSet(Ljava/lang/Object;I)I", false);
        map.put("java.util.concurrent.ConcurrentHashMap.keys()Ljava/util/Enumeration;", false);
        map.put("java.util.Arrays.fill([SIIS)V", false);
        map.put("java.util.regex.Pattern$BranchConn.study(Ljava/util/regex/Pattern$TreeInfo;)Z", true);
        map.put("java.util.zip.ZipEntry.toString()Ljava/lang/String;", true);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.submit(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.TreeMap$NavigableSubMap.descendingMap()Ljava/util/NavigableMap;", false);
        map.put("java.util.Locale.getDisplayVariantArray(Lsun/util/resources/OpenListResourceBundle;Ljava/util/Locale;)[Ljava/lang/String;", false);
        map.put("java.util.TreeSet.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.ForkJoinTask.adapt(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.SimpleTimeZone.makeRulesCompatible()V", false);
        map.put("java.util.BitSet.checkRange(II)V", false);
        map.put("java.util.Formatter$Conversion.isInteger(C)Z", true);
        map.put("java.util.zip.ZipFile.getEntry(Ljava/lang/String;)Ljava/util/zip/ZipEntry;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Node.isBaseHeader()Z", true);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getSharedQueuedThreads()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.BlockingDeque.offerFirst(Ljava/lang/Object;)Z", false);
        map.put("java.util.AbstractList.indexOf(Ljava/lang/Object;)I", false);
        map.put("java.util.Formatter$FormatSpecifier.print(Ljava/util/Calendar;CLjava/util/Locale;)V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.get(I)I", false);
        map.put("java.util.Scanner.hasNextByte()Z", false);
        map.put("java.util.logging.FileHandler$MeteredStream.<init>(Ljava/util/logging/FileHandler;Ljava/io/OutputStream;I)V", false);
        map.put("java.util.ArrayList$Itr.hasNext()Z", true);
        map.put("java.util.concurrent.Phaser.getPhase()I", true);
        map.put("java.util.Collections$SynchronizedMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.jar.JarFile.ensureInitialization()V", false);
        map.put("java.util.WeakHashMap$ValueIterator.nextEntry()Ljava/util/WeakHashMap$Entry;", false);
        map.put("java.util.concurrent.TimeUnit$2.toMinutes(J)J", true);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.enq(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;", false);
        map.put("java.util.IdentityHashMap.access$600(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.EnumMap$EntryIterator$Entry.access$1500(Ljava/util/EnumMap$EntryIterator$Entry;)I", true);
        map.put("java.util.concurrent.ExecutorService.execute(Ljava/lang/Runnable;)V", false);
        map.put("java.util.EnumMap.access$500(Ljava/util/EnumMap;Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ConcurrentNavigableMap.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Date.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator.advance()V", false);
        map.put("java.util.concurrent.BlockingQueue.clear()V", false);
        map.put("java.util.Formatter$FormatSpecifier.print(JLjava/util/Locale;)V", false);
        map.put("java.util.prefs.Base64.base64toInt(C[B)I", false);
        map.put("java.util.concurrent.atomic.AtomicReference.<init>(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.TimeUnit$7.toDays(J)J", true);
        map.put("java.util.concurrent.Executors.privilegedThreadFactory()Ljava/util/concurrent/ThreadFactory;", false);
        map.put("java.util.Collections$SynchronizedRandomAccessList.subList(II)Ljava/util/List;", false);
        map.put("java.util.StringTokenizer.<init>(Ljava/lang/String;Ljava/lang/String;Z)V", false);
        map.put("java.util.concurrent.ExecutorCompletionService.access$000(Ljava/util/concurrent/ExecutorCompletionService;)Ljava/util/concurrent/BlockingQueue;", true);
        map.put("java.util.regex.Pattern$3.isSatisfiedBy(I)Z", true);
        map.put("java.util.Vector.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.ResourceBundle.getStringArray(Ljava/lang/String;)[Ljava/lang/String;", false);
        map.put("java.util.jar.Pack200$Packer.pack(Ljava/util/jar/JarFile;Ljava/io/OutputStream;)V", false);
        map.put("java.util.TreeMap$NavigableSubMap$EntrySetView.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.InvalidPropertiesFormatException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.TreeMap$KeySet.descendingIterator()Ljava/util/Iterator;", false);
        map.put("java.util.zip.DeflaterOutputStream.close()V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.hasWaiters(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z", false);
        map.put("java.util.concurrent.ForkJoinPool$DefaultForkJoinWorkerThreadFactory.newThread(Ljava/util/concurrent/ForkJoinPool;)Ljava/util/concurrent/ForkJoinWorkerThread;", false);
        map.put("java.util.concurrent.ConcurrentHashMap.remove(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.TransferQueue.tryTransfer(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.TreeMap$DescendingSubMap$DescendingEntrySetView.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.AbstractList$Itr.checkForComodification()V", false);
        map.put("java.util.LinkedHashMap$Entry.recordRemoval(Ljava/util/HashMap;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.size()I", false);
        map.put("java.util.BitSet.<clinit>()V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater.incrementAndGet(Ljava/lang/Object;)I", false);
        map.put("java.util.HashMap.isEmpty()Z", true);
        map.put("java.util.Collections$CheckedList.remove(I)Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$Ctype.<init>(I)V", false);
        map.put("java.util.concurrent.Executors$PrivilegedCallable$1.run()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.<init>()V", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.descendingKeySet()Ljava/util/NavigableSet;", false);
        map.put("java.util.logging.LoggingProxyImpl.getLogger(Ljava/lang/String;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.size()I", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.take()Ljava/lang/Object;", false);
        map.put("java.util.AbstractCollection.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.jar.JarVerifier.isSigningRelated(Ljava/lang/String;)Z", true);
        map.put("java.util.HashMap$KeyIterator.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V", false);
        map.put("java.util.Formatter$FormatSpecifier.print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;)Ljava/lang/Appendable;", false);
        map.put("java.util.WeakHashMap$Entry.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.atomic.AtomicLong.get()J", true);
        map.put("java.util.Locale.setDefault(Ljava/util/Locale$Category;Ljava/util/Locale;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.access$000()V", false);
        map.put("java.util.Collections$SynchronizedRandomAccessList.writeReplace()Ljava/lang/Object;", false);
        map.put("java.util.logging.Logger.findResourceBundleFromStack(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;", false);
        map.put("java.util.LinkedHashMap$LinkedHashIterator.hasNext()Z", true);
        map.put("java.util.zip.DeflaterInputStream.<init>(Ljava/io/InputStream;Ljava/util/zip/Deflater;)V", false);
        map.put("java.util.List.remove(I)Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.TreeMap$AscendingSubMap.descendingMap()Ljava/util/NavigableMap;", false);
        map.put("java.util.concurrent.ForkJoinTask.setCompletion(I)I", false);
        map.put("java.util.regex.Pattern.append(II)V", false);
        map.put("java.util.concurrent.ForkJoinPool.hasQueuedSubmissions()Z", true);
        map.put("java.util.concurrent.ArrayBlockingQueue.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.Exchanger$Node.<init>(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.TimeUnit$2.toDays(J)J", true);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.toString()Ljava/lang/String;", false);
        map.put("java.util.regex.Pattern$GroupCurly.match1(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(IJ)Z", false);
        map.put("java.util.IdentityHashMap$KeySet.remove(Ljava/lang/Object;)Z", true);
        map.put("java.util.EnumMap$EnumMapIterator.checkLastReturnedIndex()V", false);
        map.put("java.util.LinkedHashSet.<init>(I)V", false);
        map.put("java.util.EnumSet.<clinit>()V", false);
        map.put("java.util.concurrent.ConcurrentHashMap$EntrySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.signalAll()V", false);
        map.put("java.util.logging.FileHandler.openFiles()V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$4.make()Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.AbstractList.add(ILjava/lang/Object;)V", false);
        map.put("java.util.prefs.WindowsPreferencesFactory.systemRoot()Ljava/util/prefs/Preferences;", true);
        map.put("java.util.concurrent.LinkedBlockingDeque.toString()Ljava/lang/String;", false);
        map.put("java.util.Arrays.mergeSort([Ljava/lang/Object;[Ljava/lang/Object;IIILjava/util/Comparator;)V", false);
        map.put("java.util.Collections.copy(Ljava/util/List;Ljava/util/List;)V", false);
        map.put("java.util.regex.Pattern$All.<init>()V", false);
        map.put("java.util.concurrent.Semaphore.drainPermits()I", false);
        map.put("java.util.HashMap$Entry.toString()Ljava/lang/String;", false);
        map.put("java.util.Random.nextBytes([B)V", true);
        map.put("java.util.concurrent.SynchronousQueue$TransferQueue$QNode.isCancelled()Z", true);
        map.put("java.util.TreeMap.ceilingKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.Properties.load(Ljava/io/Reader;)V", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.clone()Ljava/lang/Object;", false);
        map.put("java.util.IllegalFormatConversionException.getMessage()Ljava/lang/String;", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.lazySet(Ljava/lang/Object;J)V", false);
        map.put("java.util.Currency.setMainTableEntry(CCI)V", false);
        map.put("java.util.TreeMap$NavigableSubMap.absLower(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.MissingFormatArgumentException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.ArrayList.get(I)Ljava/lang/Object;", true);
        map.put("java.util.prefs.WindowsPreferences.<init>(Ljava/util/prefs/WindowsPreferences;Ljava/lang/String;)V", false);
        map.put("java.util.HashMap.<init>(I)V", false);
        map.put("java.util.Map.hashCode()I", false);
        map.put("java.util.TreeMap.clone()Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipFile.getInflater()Ljava/util/zip/Inflater;", false);
        map.put("java.util.Scanner.buildFloatAndDecimalPattern()V", false);
        map.put("java.util.Formatter.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.IdentityHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.valueIterator()Ljava/util/Iterator;", false);
        map.put("java.util.ConcurrentModificationException.<init>()V", false);
        map.put("java.util.EnumMap$KeySet.clear()V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock()V", false);
        map.put("java.util.GregorianCalendar.getTime()Ljava/util/Date;", false);
        map.put("java.util.Queue.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.Locale$Cache.<init>(Ljava/util/Locale$1;)V", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getKey()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentHashMap$EntrySet.isEmpty()Z", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubList.add(ILjava/lang/Object;)V", false);
        map.put("java.util.GregorianCalendar.internalGetEra()I", false);
        map.put("java.util.XMLUtils$EH.error(Lorg/xml/sax/SAXParseException;)V", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.access$700(Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;Ljava/lang/Object;)Z", false);
        map.put("java.util.logging.Level.readResolve()Ljava/lang/Object;", false);
        map.put("java.util.Arrays.equals([B[B)Z", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.findNear(Ljava/lang/Object;I)Ljava/util/concurrent/ConcurrentSkipListMap$Node;", true);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.unlinkLast(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)V", false);
        map.put("java.util.Collections$2.hasMoreElements()Z", false);
        map.put("java.util.regex.Pattern$Start.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.AbstractSet.hashCode()I", false);
        map.put("java.util.regex.Pattern$Bound.isWord(I)Z", false);
        map.put("java.util.Deque.offerFirst(Ljava/lang/Object;)Z", false);
        map.put("java.util.zip.ZipFile.getEntryMethod(J)I", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.remove(Ljava/lang/Runnable;)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>()V", false);
        map.put("java.util.zip.GZIPOutputStream.finish()V", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.TreeMap$KeySet.headSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.pollLast()Ljava/lang/Object;", false);
        map.put("java.util.prefs.PreferenceChangeEvent.getKey()Ljava/lang/String;", true);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.transferAfterCancelledWait(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z", false);
        map.put("java.util.ResourceBundle$RBClassLoader$1.<init>()V", true);
        map.put("java.util.Date.compareTo(Ljava/lang/Object;)I", false);
        map.put("java.util.logging.Handler.checkPermission()V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitingThreads(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Ljava/util/Collection;", false);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapKeyIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.ResourceBundle$Control$CandidateListCache.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.spi.CurrencyNameProvider.getSymbol(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.IdentityHashMap.resize(I)V", false);
        map.put("java.util.logging.FileHandler$MeteredStream.write([B)V", false);
        map.put("java.util.jar.JarVerifier.mapSignersToCodeSources(Ljava/net/URL;Ljava/util/List;Z)[Ljava/security/CodeSource;", false);
        map.put("java.util.Locale$LocaleNameGetter.<init>()V", true);
        map.put("java.util.Vector.setSize(I)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator.hasNext()Z", false);
        map.put("java.util.Collections$CheckedMap.containsValue(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.drainTo(Ljava/util/Collection;)I", false);
        map.put("java.util.prefs.AbstractPreferences.flush()V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.unlock()V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.advanceRunState(I)V", false);
        map.put("java.util.Locale.getDisplayCountry(Ljava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.Executors$DelegatedScheduledExecutorService.<init>(Ljava/util/concurrent/ScheduledExecutorService;)V", false);
        map.put("java.util.Arrays.swap([Ljava/lang/Object;II)V", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.size()I", true);
        map.put("java.util.concurrent.ArrayBlockingQueue.inc(I)I", true);
        map.put("java.util.jar.JarVerifier.getCodeSource(Ljava/net/URL;Ljava/lang/String;)Ljava/security/CodeSource;", false);
        map.put("java.util.Date.getHours()I", false);
        map.put("java.util.Currency.<init>(Ljava/lang/String;II)V", false);
        map.put("java.util.Vector.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.PriorityQueue.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections$UnmodifiableMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.prefs.AbstractPreferences.addNodeChangeListener(Ljava/util/prefs/NodeChangeListener;)V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$11.<init>()V", false);
        map.put("java.util.concurrent.Executors$DelegatedExecutorService.submit(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.zip.ZipOutputStream.putNextEntry(Ljava/util/zip/ZipEntry;)V", false);
        map.put("java.util.logging.LogRecord.setLoggerName(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.Phaser.partiesOf(J)I", true);
        map.put("java.util.jar.Attributes$Name.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.LinkedHashSet.isEmpty()Z", false);
        map.put("java.util.jar.JarEntry.getCodeSigners()[Ljava/security/CodeSigner;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames.defClone(Ljava/lang/String;Ljava/util/regex/Pattern$CharPropertyNames$CloneableProperty;)V", false);
        map.put("java.util.EnumMap$ValueIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.Calendar.set(IIIII)V", false);
        map.put("java.util.IdentityHashMap$KeySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.Vector.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater.lazySet(Ljava/lang/Object;I)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitQueueLength(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)I", false);
        map.put("java.util.AbstractList$Itr.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.SynchronousQueue.isEmpty()Z", true);
        map.put("java.util.regex.MatchResult.start()I", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.tailMap(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.Collections$SingletonMap.size()I", true);
        map.put("java.util.Formattable.formatTo(Ljava/util/Formatter;III)V", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.onStart()V", false);
        map.put("java.util.JapaneseImperialCalendar.getZone()Ljava/util/TimeZone;", false);
        map.put("java.util.Scanner.<init>(Ljava/lang/Readable;Ljava/util/regex/Pattern;)V", false);
        map.put("java.util.Collections$CheckedList$1.<init>(Ljava/util/Collections$CheckedList;Ljava/util/ListIterator;)V", false);
        map.put("java.util.Collections$UnmodifiableSortedSet.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.zip.Deflater.deflate([B)I", false);
        map.put("java.util.Collections$EmptyList.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.pushTask(Ljava/util/concurrent/ForkJoinTask;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetNext(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z", false);
        map.put("java.util.WeakHashMap.getEntry(Ljava/lang/Object;)Ljava/util/WeakHashMap$Entry;", true);
        map.put("java.util.concurrent.ConcurrentLinkedQueue$Node.casItem(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.Hashtable$Holder.<clinit>()V", false);
        map.put("java.util.BitSet.and(Ljava/util/BitSet;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.pollLast()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.headMap(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.Arrays.binarySearch([SS)I", true);
        map.put("java.util.TaskQueue.add(Ljava/util/TimerTask;)V", false);
        map.put("java.util.jar.JarFile.<init>(Ljava/io/File;ZI)V", false);
        map.put("java.util.Properties.<init>(Ljava/util/Properties;)V", false);
        map.put("java.util.regex.Pattern$Script.<init>(Ljava/lang/Character$UnicodeScript;)V", false);
        map.put("java.util.Collections$CheckedList.typeCheck(Ljava/lang/Object;)V", false);
        map.put("java.util.logging.FileHandler.isLoggable(Ljava/util/logging/LogRecord;)Z", false);
        map.put("java.util.zip.Deflater.getAdler(J)I", false);
        map.put("java.util.PriorityQueue.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$GroupHead.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.prefs.AbstractPreferences.<clinit>()V", false);
        map.put("java.util.zip.GZIPInputStream.<init>(Ljava/io/InputStream;I)V", false);
        map.put("java.util.logging.Level.findLevel(Ljava/lang/String;)Ljava/util/logging/Level;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.removeLowest()Ljava/util/Map$Entry;", false);
        map.put("java.util.LinkedHashMap$EntryIterator.next()Ljava/util/Map$Entry;", false);
        map.put("java.util.regex.Pattern.x()I", false);
        map.put("java.util.prefs.WindowsPreferences.name()Ljava/lang/String;", false);
        map.put("java.util.Stack.clear()V", false);
        map.put("java.util.regex.Pattern$GroupCurly.match2(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.clear()V", false);
        map.put("java.util.Collections$CheckedCollection.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.Formatter.close()V", false);
        map.put("java.util.logging.LogManager$LoggerContext.getNode(Ljava/lang/String;)Ljava/util/logging/LogManager$LogNode;", false);
        map.put("java.util.Arrays.binarySearch([BB)I", true);
        map.put("java.util.ComparableTimSort.ensureCapacity(I)[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run()V", false);
        map.put("java.util.TreeMap$DescendingSubMap.descendingKeyIterator()Ljava/util/Iterator;", false);
        map.put("java.util.regex.Pattern$CharProperty.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.ForkJoinTask.exec()Z", false);
        map.put("java.util.Date.getDay()I", false);
        map.put("java.util.HashMap$KeyIterator.next()Ljava/lang/Object;", true);
        map.put("java.util.concurrent.TimeUnit.ordinal()I", false);
        map.put("java.util.GregorianCalendar.getGreatestMinimum(I)I", true);
        map.put("java.util.TreeMap$NavigableSubMap.absHigher(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.Arrays.copyOfRange([III)[I", false);
        map.put("java.util.zip.Inflater.needsDictionary()Z", true);
        map.put("java.util.Hashtable$EntrySet.<init>(Ljava/util/Hashtable;)V", false);
        map.put("java.util.Collections$SynchronizedSet.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections$EmptyIterator.remove()V", false);
        map.put("java.util.EnumMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.ArrayDeque.clone()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.lock()V", false);
        map.put("java.util.Vector.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.TimeUnit$1.toMinutes(J)J", true);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.unlinkFirst(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)V", false);
        map.put("java.util.zip.ZipInputStream.available()I", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getFirstQueuedThread()Ljava/lang/Thread;", true);
        map.put("java.util.concurrent.ConcurrentHashMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.JapaneseImperialCalendar.isSet(I)Z", false);
        map.put("java.util.concurrent.SynchronousQueue.poll(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferQueue.<init>()V", false);
        map.put("java.util.zip.ZipOutputStream.writeEXT(Ljava/util/zip/ZipEntry;)V", false);
        map.put("java.util.Calendar.getSetStateFields()I", true);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getState()I", false);
        map.put("java.util.ResourceBundle.getObject(Ljava/lang/String;)Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$NavigableSubMap.subCeiling(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.getHoldCount()I", true);
        map.put("java.util.regex.Pattern$GroupTail.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.regex.ASCII.isUpper(I)Z", true);
        map.put("java.util.ArrayList.hugeCapacity(I)I", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.tryAcquire(I)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.pollFirstEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.jar.JarVerifier$1.<init>(Ljava/util/jar/JarVerifier;Ljava/util/Iterator;Ljava/util/List;Ljava/util/Enumeration;)V", false);
        map.put("java.util.Collections$SynchronizedCollection.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryRelease(J)Z", false);
        map.put("java.util.TimeZone$1.run()Ljava/lang/Object;", false);
        map.put("java.util.prefs.Preferences.factory()Ljava/util/prefs/PreferencesFactory;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.compareAndDecrementWorkerCount(I)Z", false);
        map.put("java.util.concurrent.SynchronousQueue.drainTo(Ljava/util/Collection;I)I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.higherEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.regex.MatchResult.group(I)Ljava/lang/String;", false);
        map.put("java.util.Timer.<init>(Ljava/lang/String;Z)V", false);
        map.put("java.util.Comparator.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections$SynchronizedList.set(ILjava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.jar.Attributes$Name.isDigit(C)Z", true);
        map.put("java.util.LinkedHashMap.newKeyIterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.tailMap(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.WeakHashMap.containsKey(Ljava/lang/Object;)Z", true);
        map.put("java.util.jar.Attributes.hashCode()I", false);
        map.put("java.util.Properties.save(Ljava/io/OutputStream;Ljava/lang/String;)V", false);
        map.put("java.util.TimerTask.scheduledExecutionTime()J", true);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.getWaitingThreads()Ljava/util/Collection;", false);
        map.put("java.util.logging.Logger.setFilter(Ljava/util/logging/Filter;)V", false);
        map.put("java.util.Arrays.copyOf([II)[I", false);
        map.put("java.util.logging.Logger.getCallersClassLoader()Ljava/lang/ClassLoader;", false);
        map.put("java.util.regex.Pattern$Dot.<init>()V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Values.clear()V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.tryReleaseShared(I)Z", false);
        map.put("java.util.WeakHashMap$KeySet.size()I", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.acquireInterruptibly(I)V", false);
        map.put("java.util.WeakHashMap$Entry.get()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Exchanger.tryCancel(Ljava/util/concurrent/Exchanger$Node;Ljava/util/concurrent/Exchanger$Slot;)Z", false);
        map.put("java.util.EnumSet.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.AbstractList.<init>()V", false);
        map.put("java.util.zip.GZIPOutputStream.<init>(Ljava/io/OutputStream;IZ)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.parkAndCheckInterrupt()Z", false);
        map.put("java.util.concurrent.atomic.AtomicLong.decrementAndGet()J", false);
        map.put("java.util.zip.ZipEntry.setMethod(I)V", false);
        map.put("java.util.Collections.max(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.<clinit>()V", false);
        map.put("java.util.JumboEnumSet.add(Ljava/lang/Enum;)Z", false);
        map.put("java.util.TreeMap$KeySet.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.HashMap$Entry.getValue()Ljava/lang/Object;", true);
        map.put("java.util.HashMap$Holder.<init>()V", true);
        map.put("java.util.WeakHashMap.unmaskNull(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.prefs.Preferences.getLong(Ljava/lang/String;J)J", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.getNearEntry(Ljava/lang/Object;I)Ljava/util/Map$Entry;", false);
        map.put("java.util.RegularEnumSet.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.ForkJoinTask.access$000()Ljava/lang/ref/ReferenceQueue;", true);
        map.put("java.util.regex.ASCII.<clinit>()V", false);
        map.put("java.util.TreeMap$NavigableSubMap.subFloor(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.prefs.XmlSupport$Resolver.<init>(Ljava/util/prefs/XmlSupport$1;)V", true);
        map.put("java.util.SimpleTimeZone.invalidateCache()V", false);
        map.put("java.util.concurrent.ThreadLocalRandom.current()Ljava/util/concurrent/ThreadLocalRandom;", false);
        map.put("java.util.zip.ZipInputStream.getNextEntry()Ljava/util/zip/ZipEntry;", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.length()I", true);
        map.put("java.util.concurrent.TimeUnit$4.toNanos(J)J", false);
        map.put("java.util.logging.LogManager$Cleaner.<init>(Ljava/util/logging/LogManager;Ljava/util/logging/LogManager$1;)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock.hasQueuedThreads()Z", false);
        map.put("java.util.prefs.Preferences.putLong(Ljava/lang/String;J)V", false);
        map.put("java.util.regex.Pattern$Category.isSatisfiedBy(I)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.doPut(Ljava/lang/Object;Ljava/lang/Object;Z)Ljava/lang/Object;", false);
        map.put("java.util.logging.LoggingProxyImpl.isLoggable(Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.HashMap$Entry.setValue(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.HashMap$KeySet.size()I", true);
        map.put("java.util.LinkedHashMap.<init>(IFZ)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock.<init>()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.firstEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.regex.UnicodeProp$3.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.Collections$CheckedList.add(ILjava/lang/Object;)V", false);
        map.put("java.util.ServiceLoader$LazyIterator.hasNext()Z", false);
        map.put("java.util.concurrent.LinkedBlockingDeque$AbstractItr.hasNext()Z", true);
        map.put("java.util.TreeMap$NavigableSubMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.PriorityQueue.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.ArrayDeque.<init>(I)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.logging.ConsoleHandler.<init>()V", false);
        map.put("java.util.Collections.swap(Ljava/util/List;II)V", false);
        map.put("java.util.zip.ZipOutputStream.<init>(Ljava/io/OutputStream;)V", false);
        map.put("java.util.concurrent.atomic.AtomicLong.toString()Ljava/lang/String;", false);
        map.put("java.util.IdentityHashMap$IdentityHashMapIterator.<init>(Ljava/util/IdentityHashMap;Ljava/util/IdentityHashMap$1;)V", false);
        map.put("java.util.concurrent.ForkJoinTask.adapt(Ljava/lang/Runnable;)Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.concurrent.FutureTask$Sync.<init>(Ljava/util/concurrent/FutureTask;Ljava/util/concurrent/Callable;)V", false);
        map.put("java.util.prefs.Preferences.addNodeChangeListener(Ljava/util/prefs/NodeChangeListener;)V", false);
        map.put("java.util.PropertyPermission.getMask()I", true);
        map.put("java.util.regex.Matcher.lookingAt()Z", false);
        map.put("java.util.concurrent.LinkedBlockingDeque$DescendingItr.nextNode(Ljava/util/concurrent/LinkedBlockingDeque$Node;)Ljava/util/concurrent/LinkedBlockingDeque$Node;", true);
        map.put("java.util.logging.LogManager$3.<init>(Ljava/util/logging/LogManager;Ljava/util/logging/Logger;Ljava/util/logging/Logger;)V", false);
        map.put("java.util.Map.values()Ljava/util/Collection;", false);
        map.put("java.util.jar.JarInputStream.getManifest()Ljava/util/jar/Manifest;", true);
        map.put("java.util.Properties.entrySet()Ljava/util/Set;", false);
        map.put("java.util.zip.DeflaterInputStream.mark(I)V", true);
        map.put("java.util.TreeMap$KeySet.<init>(Ljava/util/NavigableMap;)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.getWaitQueueLength(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)I", false);
        map.put("java.util.concurrent.SynchronousQueue.<init>(Z)V", false);
        map.put("java.util.Collections$UnmodifiableMap.hashCode()I", false);
        map.put("java.util.zip.Deflater.initIDs()V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$DescendingItr.startNode()Ljava/util/concurrent/ConcurrentLinkedDeque$Node;", false);
        map.put("java.util.regex.Pattern.peekPastWhitespace(I)I", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.getActiveCount()I", false);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegCreateKeyEx(I[B)[I", false);
        map.put("java.util.logging.Handler.getFormatter()Ljava/util/logging/Formatter;", true);
        map.put("java.util.concurrent.TimeoutException.<init>()V", false);
        map.put("java.util.concurrent.TimeUnit.convert(JLjava/util/concurrent/TimeUnit;)J", false);
        map.put("java.util.concurrent.ConcurrentHashMap$EntrySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap$EntryIterator.<init>(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.regex.Pattern$Conditional.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.zip.InflaterOutputStream.write([BII)V", false);
        map.put("java.util.Collections$SynchronizedSortedSet.subSet(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.Objects.compare(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/Comparator;)I", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getWaitingThreads(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Ljava/util/Collection;", false);
        map.put("java.util.Scanner.nextFloat()F", false);
        map.put("java.util.logging.LogManager.parseClassNames(Ljava/lang/String;)[Ljava/lang/String;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.offer(Ljava/lang/Runnable;)Z", false);
        map.put("java.util.DuplicateFormatFlagsException.getMessage()Ljava/lang/String;", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.onTermination(Ljava/lang/Throwable;)V", false);
        map.put("java.util.GregorianCalendar.getTimeInMillis()J", false);
        map.put("java.util.Scanner.hasNextBoolean()Z", false);
        map.put("java.util.Formatter$FormatSpecifier.checkFloat()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Node.casValue(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.Phaser.register()I", false);
        map.put("java.util.regex.Pattern$SliceIS.<init>([I)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.succ(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Ljava/util/concurrent/ConcurrentLinkedDeque$Node;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator.hasPrevious()Z", false);
        map.put("java.util.Stack.size()I", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.pollLocalTask()Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.GregorianCalendar.<init>(Ljava/util/Locale;)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.peekFirst()Ljava/lang/Object;", false);
        map.put("java.util.Locale$Builder.clear()Ljava/util/Locale$Builder;", false);
        map.put("java.util.Deque.pollFirst()Ljava/lang/Object;", false);
        map.put("java.util.HashMap$KeyIterator.nextEntry()Ljava/util/HashMap$Entry;", false);
        map.put("java.util.AbstractSequentialList.get(I)Ljava/lang/Object;", false);
        map.put("java.util.logging.LogManager$LoggerContext$1.run()Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$EntryIterator.nextEntry()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.Hashtable$EntrySet.<init>(Ljava/util/Hashtable;Ljava/util/Hashtable$1;)V", false);
        map.put("java.util.Collections$CopiesList.<clinit>()V", false);
        map.put("java.util.regex.UnicodeProp$9.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWIterator.previousIndex()I", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.newSubMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.<clinit>()V", false);
        map.put("java.util.SimpleTimeZone.unpackTimes([I)V", false);
        map.put("java.util.Collections$CheckedList.addAll(ILjava/util/Collection;)Z", false);
        map.put("java.util.Scanner.processIntegerToken(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.Collections$UnmodifiableList.indexOf(Ljava/lang/Object;)I", false);
        map.put("java.util.Formatter$Conversion.isCharacter(C)Z", true);
        map.put("java.util.Collections$CheckedList.listIterator(I)Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$FairSync.<init>()V", false);
        map.put("java.util.jar.Attributes.containsValue(Ljava/lang/Object;)Z", false);
        map.put("java.util.SubList$1.set(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.values()Ljava/util/Collection;", false);
        map.put("java.util.Scanner.reset()Ljava/util/Scanner;", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater.incrementAndGet(Ljava/lang/Object;)J", false);
        map.put("java.util.logging.LogManager.access$1100(Ljava/util/logging/LogManager;)Ljava/lang/ref/ReferenceQueue;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.pollFirstEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.Locale$LocaleNameGetter.<clinit>()V", false);
        map.put("java.util.TimeZone.getAvailableIDs(I)[Ljava/lang/String;", false);
        map.put("java.util.logging.LogRecord.setResourceBundle(Ljava/util/ResourceBundle;)V", false);
        map.put("java.util.prefs.Preferences.node(Ljava/lang/String;)Ljava/util/prefs/Preferences;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.loNode()Ljava/util/concurrent/ConcurrentSkipListMap$Node;", true);
        map.put("java.util.Deque.removeLast()Ljava/lang/Object;", false);
        map.put("java.util.logging.LogRecord.setThrown(Ljava/lang/Throwable;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.SimpleTimeZone.setEndRule(IIIIZ)V", false);
        map.put("java.util.prefs.AbstractPreferences.putLong(Ljava/lang/String;J)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getExclusiveQueuedThreads()Ljava/util/Collection;", false);
        map.put("java.util.Collections$UnmodifiableSortedSet.headSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.jar.JarFile.<clinit>()V", false);
        map.put("java.util.regex.Pattern.normalizeCharClass(Ljava/lang/StringBuilder;I)I", false);
        map.put("java.util.ServiceLoader.access$200(Ljava/util/ServiceLoader;Ljava/lang/Class;Ljava/net/URL;)Ljava/util/Iterator;", false);
        map.put("java.util.ResourceBundle$Control$CandidateListCache.createObject(Lsun/util/locale/BaseLocale;)Ljava/util/List;", false);
        map.put("java.util.jar.Attributes.clear()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.prefs.AbstractPreferences.getLong(Ljava/lang/String;J)J", false);
        map.put("java.util.concurrent.LinkedTransferQueue.getWaitingConsumerCount()I", true);
        map.put("java.util.regex.PatternSyntaxException.getMessage()Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.tailMap(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.getAndSet(IJ)J", false);
        map.put("java.util.jar.JarFile$4.<init>(Ljava/util/jar/JarFile;Ljava/util/Enumeration;)V", false);
        map.put("java.util.Hashtable.access$100(Ljava/util/Hashtable;I)Ljava/util/Iterator;", false);
        map.put("java.util.regex.UnicodeProp$14.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.regex.Pattern$SliceS.<init>([I)V", false);
        map.put("java.util.logging.MemoryHandler.<init>(Ljava/util/logging/Handler;ILjava/util/logging/Level;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(II)Z", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.ctlOf(II)I", true);
        map.put("java.util.concurrent.FutureTask.run()V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.offerFirst(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.tryReleaseShared(I)Z", false);
        map.put("java.util.TooManyListenersException.<init>()V", false);
        map.put("java.util.logging.SocketHandler.setFormatter(Ljava/util/logging/Formatter;)V", false);
        map.put("java.util.Collections$EmptyMap.values()Ljava/util/Collection;", true);
        map.put("java.util.AbstractMap.eq(Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.Semaphore.isFair()Z", true);
        map.put("java.util.logging.LogManager.access$200(Ljava/util/logging/LogManager;)Ljava/util/logging/Logger;", true);
        map.put("java.util.ArrayDeque.removeFirstOccurrence(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.TimeUnit.excessNanos(JJ)I", false);
        map.put("java.util.AbstractSet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.put(Ljava/lang/Object;)V", false);
        map.put("java.util.Scanner.close()V", false);
        map.put("java.util.Collections$UnmodifiableMap.values()Ljava/util/Collection;", false);
        map.put("java.util.regex.Pattern$CharProperty.<init>(Ljava/util/regex/Pattern$1;)V", false);
        map.put("java.util.Collections.<init>()V", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.headSet(Ljava/lang/Object;Z)Ljava/util/NavigableSet;", false);
        map.put("java.util.logging.LoggingProxyImpl.getLoggerLevel(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.Semaphore$FairSync.<init>(I)V", false);
        map.put("java.util.zip.ZipFile$ZipFileInflaterInputStream.available()I", false);
        map.put("java.util.Scanner.useLocale(Ljava/util/Locale;)Ljava/util/Scanner;", false);
        map.put("java.util.NavigableSet.tailSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.<init>()V", false);
        map.put("java.util.TreeMap.containsKey(Ljava/lang/Object;)Z", false);
        map.put("java.util.Vector.hugeCapacity(I)I", false);
        map.put("java.util.IdentityHashMap.capacity(I)I", true);
        map.put("java.util.logging.LogManager.addPropertyChangeListener(Ljava/beans/PropertyChangeListener;)V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames.<clinit>()V", false);
        map.put("java.util.logging.Logger.getLogger(Ljava/lang/String;)Ljava/util/logging/Logger;", false);
        map.put("java.util.Formatter$DateTime.<init>()V", true);
        map.put("java.util.ServiceLoader$1.hasNext()Z", false);
        map.put("java.util.concurrent.ForkJoinPool.getAsyncMode()Z", true);
        map.put("java.util.regex.Pattern.uxxxx()I", true);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.checkNotNull(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.first()Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipFile.getTotal(J)I", false);
        map.put("java.util.zip.ZipFile.<init>(Ljava/io/File;ILjava/nio/charset/Charset;)V", false);
        map.put("java.util.Vector$Itr.checkForComodification()V", false);
        map.put("java.util.concurrent.RejectedExecutionException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.doAcquireShared(J)V", false);
        map.put("java.util.Properties.loadFromXML(Ljava/io/InputStream;)V", true);
        map.put("java.util.TaskQueue.getMin()Ljava/util/TimerTask;", true);
        map.put("java.util.EnumMap.getKeyUniverse(Ljava/lang/Class;)[Ljava/lang/Enum;", false);
        map.put("java.util.JumboEnumSet$EnumSetIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$NavigableSubMap$EntrySetView.size()I", false);
        map.put("java.util.Collections.indexOfSubList(Ljava/util/List;Ljava/util/List;)I", false);
        map.put("java.util.EnumMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.prefs.Preferences.getByteArray(Ljava/lang/String;[B)[B", false);
        map.put("java.util.regex.Pattern.sequence(Ljava/util/regex/Pattern$Node;)Ljava/util/regex/Pattern$Node;", false);
        map.put("java.util.Collections$AsLIFOQueue.clear()V", false);
        map.put("java.util.Date.getTime()J", false);
        map.put("java.util.concurrent.ForkJoinPool$DefaultForkJoinWorkerThreadFactory.<init>()V", true);
        map.put("java.util.Formatter$Flags.<clinit>()V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.scheduleAtFixedRate(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", false);
        map.put("java.util.DualPivotQuicksort.doSort([CII)V", true);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.checkedByteOffset(I)J", true);
        map.put("java.util.TreeMap$NavigableSubMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.zip.GZIPInputStream.readHeader(Ljava/io/InputStream;)I", false);
        map.put("java.util.concurrent.ForkJoinTask$AdaptedRunnable.invoke()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueuedThreads()Ljava/util/Collection;", false);
        map.put("java.util.jar.JarFile.getEntry(Ljava/lang/String;)Ljava/util/zip/ZipEntry;", false);
        map.put("java.util.regex.Pattern.split(Ljava/lang/CharSequence;)[Ljava/lang/String;", false);
        map.put("java.util.TimeZone.<init>()V", true);
        map.put("java.util.regex.Pattern$1.isSatisfiedBy(I)Z", true);
        map.put("java.util.logging.LogManager$LogNode.<init>(Ljava/util/logging/LogManager$LogNode;Ljava/util/logging/LogManager$LoggerContext;)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque$Itr.firstNode()Ljava/util/concurrent/LinkedBlockingDeque$Node;", true);
        map.put("java.util.Properties.values()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getQueuedThreads()Ljava/util/Collection;", false);
        map.put("java.util.Collections$SynchronizedMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.getLast()Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$AscendingSubMap.<init>(Ljava/util/TreeMap;ZLjava/lang/Object;ZZLjava/lang/Object;Z)V", false);
        map.put("java.util.EnumMap.access$900(Ljava/util/EnumMap;Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.Scanner.hasNext(Ljava/util/regex/Pattern;)Z", false);
        map.put("java.util.concurrent.CountDownLatch$Sync.acquireSharedInterruptibly(I)V", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.run()V", false);
        map.put("java.util.ArrayDeque.clone()Ljava/util/ArrayDeque;", false);
        map.put("java.util.AbstractQueue.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.logging.Logger.setLevel(Ljava/util/logging/Level;)V", false);
        map.put("java.util.JapaneseImperialCalendar.hashCode()I", false);
        map.put("java.util.IdentityHashMap.access$300(II)I", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.clear()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.higherEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.GregorianCalendar.getActualMaximum(I)I", false);
        map.put("java.util.PropertyResourceBundle.getBundle(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/ResourceBundle;", false);
        map.put("java.util.Properties.saveConvert(Ljava/lang/String;ZZ)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ForkJoinTask$AdaptedRunnable.setRawResult(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.Phaser.<init>(Ljava/util/concurrent/Phaser;)V", false);
        map.put("java.util.ArrayList$SubList.checkForComodification()V", false);
        map.put("java.util.concurrent.Exchanger.scanOnTimeout(Ljava/util/concurrent/Exchanger$Node;)Ljava/lang/Object;", false);
        map.put("java.util.Locale.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.Vector.elementData(I)Ljava/lang/Object;", true);
        map.put("java.util.Collections$SynchronizedList.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections.swap([Ljava/lang/Object;II)V", true);
        map.put("java.util.Collections$UnmodifiableMap.<init>(Ljava/util/Map;)V", false);
        map.put("java.util.concurrent.ForkJoinPool.tryPreBlock()Z", false);
        map.put("java.util.zip.Inflater.inflate([B)I", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.setExclusiveOwnerThread(Ljava/lang/Thread;)V", false);
        map.put("java.util.concurrent.Semaphore$Sync.getPermits()I", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.DelayQueue.access$000(Ljava/util/concurrent/DelayQueue;)Ljava/util/concurrent/locks/ReentrantLock;", true);
        map.put("java.util.Scanner.translateSavedIndexes(I)V", false);
        map.put("java.util.concurrent.FutureTask$Sync.innerIsCancelled()Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Values.<init>(Ljava/util/concurrent/ConcurrentHashMap;)V", false);
        map.put("java.util.concurrent.ConcurrentMap.replace(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.zip.Deflater.finalize()V", false);
        map.put("java.util.zip.GZIPInputStream.read()I", false);
        map.put("java.util.LinkedList.size()I", true);
        map.put("java.util.Arrays.sort([JII)V", true);
        map.put("java.util.concurrent.Executors$DelegatedExecutorService.invokeAll(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/util/List;", false);
        map.put("java.util.concurrent.BlockingQueue.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.WeakHashMap$Entry.getKey()Ljava/lang/Object;", true);
        map.put("java.util.ResourceBundle$RBClassLoader.getResource(Ljava/lang/String;)Ljava/net/URL;", true);
        map.put("java.util.concurrent.ForkJoinPool.drainTasksTo(Ljava/util/Collection;)I", false);
        map.put("java.util.concurrent.Exchanger$Slot.<init>()V", true);
        map.put("java.util.IdentityHashMap$EntryIterator$Entry.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.Scanner.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.CyclicBarrier.reset()V", false);
        map.put("java.util.IllegalFormatCodePointException.getCodePoint()I", true);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndAdd(Ljava/lang/Object;I)I", false);
        map.put("java.util.IdentityHashMap$KeySet.hashCode()I", false);
        map.put("java.util.regex.Pattern$First.<init>(Ljava/util/regex/Pattern$Node;)V", false);
        map.put("java.util.Collections$SynchronizedCollection.clear()V", false);
        map.put("java.util.GregorianCalendar.setLenient(Z)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock$FairSync.<init>()V", true);
        map.put("java.util.concurrent.LinkedBlockingDeque.drainTo(Ljava/util/Collection;)I", false);
        map.put("java.util.HashMap.<init>()V", false);
        map.put("java.util.IdentityHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.EnumMap.clear()V", false);
        map.put("java.util.zip.Inflater.needsInput()Z", true);
        map.put("java.util.JapaneseImperialCalendar.getMaximum(I)I", true);
        map.put("java.util.zip.CRC32.getValue()J", true);
        map.put("java.util.WeakHashMap$KeySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.regex.Pattern$CIBackRef.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.CountDownLatch$Sync.tryAcquireShared(I)I", false);
        map.put("java.util.SimpleTimeZone.useDaylightTime()Z", true);
        map.put("java.util.concurrent.ForkJoinTask.get(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.TimeZone.getDefaultInAppContext()Ljava/util/TimeZone;", false);
        map.put("java.util.jar.JarEntry.getSize()J", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.drainTo(Ljava/util/Collection;)I", false);
        map.put("java.util.Timer.access$000(Ljava/util/Timer;)Ljava/util/TaskQueue;", true);
        map.put("java.util.RegularEnumSet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.SynchronousQueue.put(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.Future.get()Ljava/lang/Object;", false);
        map.put("java.util.EventObject.<init>(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque$Itr.<init>(Ljava/util/concurrent/LinkedBlockingDeque;Ljava/util/concurrent/LinkedBlockingDeque$1;)V", false);
        map.put("java.util.concurrent.Executors$DelegatedScheduledExecutorService.schedule(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", false);
        map.put("java.util.LinkedList.push(Ljava/lang/Object;)V", false);
        map.put("java.util.Collections$EmptyIterator.<init>()V", true);
        map.put("java.util.logging.LogRecord.isLoggerImplFrame(Ljava/lang/String;)Z", true);
        map.put("java.util.SubList$1.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireShared(I)V", false);
        map.put("java.util.ResourceBundle$SingleFormatControl.access$800()Ljava/util/ResourceBundle$Control;", true);
        map.put("java.util.regex.Matcher.hasAnchoringBounds()Z", true);
        map.put("java.util.Calendar$CalendarAccessControlContext.<init>()V", true);
        map.put("java.util.logging.Handler.<init>()V", false);
        map.put("java.util.zip.ZipCoder.toString([BI)Ljava/lang/String;", false);
        map.put("java.util.JapaneseImperialCalendar.isPartiallyNormalized()Z", false);
        map.put("java.util.Collections$EmptyIterator.hasNext()Z", true);
        map.put("java.util.concurrent.TimeUnit$6.excessNanos(JJ)I", true);
        map.put("java.util.TimerTask.<init>()V", false);
        map.put("java.util.HashMap$HashIterator.hasNext()Z", true);
        map.put("java.util.concurrent.SynchronousQueue$TransferStack.<init>()V", true);
        map.put("java.util.EnumMap$EntryIterator$Entry.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.release(I)Z", false);
        map.put("java.util.Date.getDate()I", false);
        map.put("java.util.logging.SocketHandler.close()V", false);
        map.put("java.util.jar.Attributes.writeMain(Ljava/io/DataOutputStream;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.fullyRelease(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)I", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.toString()Ljava/lang/String;", false);
        map.put("java.util.Properties.propertyNames()Ljava/util/Enumeration;", false);
        map.put("java.util.AbstractQueue.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.logging.FileHandler$1.run()Ljava/lang/Object;", false);
        map.put("java.util.IdentityHashMap$EntryIterator$Entry.checkIndexForEntryUse()V", false);
        map.put("java.util.ResourceBundle.getBundle(Ljava/lang/String;Ljava/util/Locale;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;", false);
        map.put("java.util.Collections.eq(Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.regex.ASCII.toLower(I)I", true);
        map.put("java.util.concurrent.BlockingQueue.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.DelayQueue.take()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentHashMap$HashEntry.setNext(Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)V", false);
        map.put("java.util.AbstractList.listIterator(I)Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater.<clinit>()V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.unlinkLast()Ljava/lang/Object;", false);
        map.put("java.util.Calendar.toString()Ljava/lang/String;", false);
        map.put("java.util.WeakHashMap$Entry.getValue()Ljava/lang/Object;", true);
        map.put("java.util.Locale.getDisplayVariant()Ljava/lang/String;", false);
        map.put("java.util.concurrent.ForkJoinPool.idleAwaitWork(Ljava/util/concurrent/ForkJoinWorkerThread;JJI)V", false);
        map.put("java.util.ResourceBundle$CacheKey.getFormat()Ljava/lang/String;", true);
        map.put("java.util.Collections$EmptySet.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndDecrement(Ljava/lang/Object;)J", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.logging.Handler.setLevel(Ljava/util/logging/Level;)V", false);
        map.put("java.util.zip.DeflaterOutputStream.<init>(Ljava/io/OutputStream;Z)V", false);
        map.put("java.util.Calendar.setTimeInMillis(J)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$Node.<clinit>()V", false);
        map.put("java.util.concurrent.Semaphore.availablePermits()I", false);
        map.put("java.util.Collections.checkedSortedSet(Ljava/util/SortedSet;Ljava/lang/Class;)Ljava/util/SortedSet;", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.siftUp(ILjava/util/concurrent/RunnableScheduledFuture;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.access$000()Ljava/util/concurrent/atomic/AtomicLong;", true);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getQueueLength()I", false);
        map.put("java.util.IdentityHashMap$IdentityHashMapIterator.<init>(Ljava/util/IdentityHashMap;)V", false);
        map.put("java.util.concurrent.Executors$DelegatedExecutorService.shutdown()V", false);
        map.put("java.util.jar.Attributes.<init>(I)V", false);
        map.put("java.util.jar.JarFile$3.<init>(Ljava/util/jar/JarFile;Ljava/util/Enumeration;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.higher(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$2.<init>(Ljava/util/regex/Pattern;II)V", false);
        map.put("java.util.logging.LogManager.access$100()Ljava/util/logging/LogManager;", true);
        map.put("java.util.TreeMap$Entry.getValue()Ljava/lang/Object;", true);
        map.put("java.util.prefs.NodeChangeListener.childAdded(Ljava/util/prefs/NodeChangeEvent;)V", false);
        map.put("java.util.concurrent.CountDownLatch$Sync.tryAcquireSharedNanos(IJ)Z", false);
        map.put("java.util.concurrent.LinkedTransferQueue.tryAppend(Ljava/util/concurrent/LinkedTransferQueue$Node;Z)Ljava/util/concurrent/LinkedTransferQueue$Node;", false);
        map.put("java.util.Locale.getISO3Country()Ljava/lang/String;", false);
        map.put("java.util.JumboEnumSet.isEmpty()Z", true);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.hasWaiters(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicReference.compareAndSet(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.regex.Pattern$UnixCaret.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.RunnableScheduledFuture.cancel(Z)Z", false);
        map.put("java.util.logging.LogManager.getIntProperty(Ljava/lang/String;I)I", false);
        map.put("java.util.RegularEnumSet.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.logging.ConsoleHandler.setEncoding(Ljava/lang/String;)V", false);
        map.put("java.util.LinkedList.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.logging.LogManager$LoggerWeakRef.setParentRef(Ljava/lang/ref/WeakReference;)V", false);
        map.put("java.util.ArrayList.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.logging.LogManager.<init>()V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubList.remove(I)Ljava/lang/Object;", false);
        map.put("java.util.IdentityHashMap$Values.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.AbstractExecutorService.invokeAny(Ljava/util/Collection;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.<clinit>()V", false);
        map.put("java.util.concurrent.atomic.AtomicReference.getAndSet(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.DualPivotQuicksort.sort([DIIZ)V", true);
        map.put("java.util.concurrent.TimeUnit$3.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.TimSort.binarySort([Ljava/lang/Object;IIILjava/util/Comparator;)V", false);
        map.put("java.util.Collections$EmptySet.readResolve()Ljava/lang/Object;", true);
        map.put("java.util.Locale.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.TreeSet.subSet(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.Collections.get(Ljava/util/ListIterator;I)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.await(JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.acquireShared(I)V", false);
        map.put("java.util.JapaneseImperialCalendar.getActualMaximum(I)I", false);
        map.put("java.util.logging.MemoryHandler.getPushLevel()Ljava/util/logging/Level;", true);
        map.put("java.util.IdentityHashMap.access$204(Ljava/util/IdentityHashMap;)I", false);
        map.put("java.util.regex.Pattern$SliceS.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.jar.JarOutputStream.hasMagic([B)Z", true);
        map.put("java.util.Queue.poll()Ljava/lang/Object;", false);
        map.put("java.util.TreeSet.clone()Ljava/lang/Object;", false);
        map.put("java.util.HashMap$ValueIterator.<init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)V", false);
        map.put("java.util.Formatter$FormatSpecifier.print(FLjava/util/Locale;)V", false);
        map.put("java.util.Collections$ReverseComparator.<clinit>()V", false);
        map.put("java.util.zip.ZipFile.entries()Ljava/util/Enumeration;", false);
        map.put("java.util.ComparableTimSort.mergeCollapse()V", false);
        map.put("java.util.jar.Pack200$Unpacker.unpack(Ljava/io/InputStream;Ljava/util/jar/JarOutputStream;)V", false);
        map.put("java.util.Collections.replaceAll(Ljava/util/List;Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.spi.LocaleNameProvider.getDisplayVariant(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.prefs.Preferences.flush()V", false);
        map.put("java.util.Scanner.next()Ljava/lang/Object;", false);
        map.put("java.util.SortedSet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.AbstractMap.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.cast(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.Set.hashCode()I", false);
        map.put("java.util.HashSet.clone()Ljava/lang/Object;", false);
        map.put("java.util.Scanner.findInLine(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.Properties.getProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", true);
        map.put("java.util.regex.Pattern$CharPropertyNames$17.<init>()V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.removeFirst()Ljava/lang/Object;", false);
        map.put("java.util.Formatter$Conversion.isText(C)Z", true);
        map.put("java.util.TimeZone.getTimeZone(Ljava/lang/String;Z)Ljava/util/TimeZone;", false);
        map.put("java.util.concurrent.CyclicBarrier.nextGeneration()V", false);
        map.put("java.util.Collections$UnmodifiableCollection.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.logging.LogManager.access$202(Ljava/util/logging/LogManager;Ljava/util/logging/Logger;)Ljava/util/logging/Logger;", false);
        map.put("java.util.TreeMap$NavigableSubMap.higherEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.AbstractCollection.containsAll(Ljava/util/Collection;)Z", true);
        map.put("java.util.ServiceLoader.fail(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Throwable;)V", false);
        map.put("java.util.NavigableMap.clear()V", false);
        map.put("java.util.WeakHashMap$EntryIterator.nextEntry()Ljava/util/WeakHashMap$Entry;", false);
        map.put("java.util.Collections$SynchronizedSet.<init>(Ljava/util/Set;Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater.get(Ljava/lang/Object;)J", false);
        map.put("java.util.concurrent.CountDownLatch.await(JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.TreeMap$KeySet.subSet(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.Date.getMinutes()I", false);
        map.put("java.util.logging.SocketHandler.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.Locale.hashCode()I", false);
        map.put("java.util.Collections$EmptyEnumeration.hasMoreElements()Z", true);
        map.put("java.util.GregorianCalendar.get(I)I", false);
        map.put("java.util.regex.ASCII.isPrint(I)Z", true);
        map.put("java.util.concurrent.PriorityBlockingQueue.extract()Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipFile.access$600(Ljava/util/zip/ZipFile;)Z", true);
        map.put("java.util.Collections$CheckedMap.clear()V", false);
        map.put("java.util.Collections$UnmodifiableList$1.add(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.FutureTask$Sync.innerCancel(Z)Z", true);
        map.put("java.util.jar.JarVerifier$1.nextElement()Ljava/lang/String;", false);
        map.put("java.util.Properties.isEmpty()Z", false);
        map.put("java.util.prefs.PreferencesFactory.systemRoot()Ljava/util/prefs/Preferences;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator.remove()V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getExclusiveQueuedThreads()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getOwner()Ljava/lang/Thread;", false);
        map.put("java.util.zip.ZipFile.close()V", false);
        map.put("java.util.TreeMap$KeySet.descendingSet()Ljava/util/NavigableSet;", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.succ(Ljava/util/concurrent/ConcurrentLinkedQueue$Node;)Ljava/util/concurrent/ConcurrentLinkedQueue$Node;", true);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater.lazySet(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        map.put("java.util.TreeMap$PrivateEntryIterator.nextEntry()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.jar.JarVerifier.entryNames(Ljava/util/jar/JarFile;[Ljava/security/CodeSource;)Ljava/util/Enumeration;", false);
        map.put("java.util.zip.Deflater.setInput([B)V", false);
        map.put("java.util.Collections$SetFromMap.isEmpty()Z", false);
        map.put("java.util.Currency$CurrencyNameGetter.<init>()V", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Values.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.CountDownLatch.await()V", false);
        map.put("java.util.TimSort.rangeCheck(III)V", false);
        map.put("java.util.concurrent.Semaphore$Sync.getState()I", false);
        map.put("java.util.GregorianCalendar.setTimeZone(Ljava/util/TimeZone;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.toString()Ljava/lang/String;", false);
        map.put("java.util.logging.Logging.<clinit>()V", false);
        map.put("java.util.EnumSet.addAll()V", false);
        map.put("java.util.Currency.access$200(Ljava/io/DataInputStream;I)[Ljava/lang/String;", false);
        map.put("java.util.Vector.<init>(II)V", false);
        map.put("java.util.AbstractList$Itr.<init>(Ljava/util/AbstractList;)V", false);
        map.put("java.util.IdentityHashMap.nextKeyIndex(II)I", true);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.getRemoveOnCancelPolicy()Z", true);
        map.put("java.util.GregorianCalendar.setTimeInMillis(J)V", false);
        map.put("java.util.regex.Pattern$Prolog.<init>(Ljava/util/regex/Pattern$Loop;)V", false);
        map.put("java.util.Hashtable.entrySet()Ljava/util/Set;", false);
        map.put("java.util.WeakHashMap$EntrySet.<init>(Ljava/util/WeakHashMap;Ljava/util/WeakHashMap$1;)V", false);
        map.put("java.util.regex.Pattern$Start.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.logging.Handler.reportError(Ljava/lang/String;Ljava/lang/Exception;I)V", false);
        map.put("java.util.AbstractList.size()I", false);
        map.put("java.util.Properties.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections$UnmodifiableMap.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.LinkedList$ListItr.<init>(Ljava/util/LinkedList;I)V", false);
        map.put("java.util.UUID.digits(JI)Ljava/lang/String;", false);
        map.put("java.util.logging.LoggingProxyImpl.getParentLoggerName(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.prestartAllCoreThreads()I", false);
        map.put("java.util.IdentityHashMap$EntrySet.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue$Itr.<init>(Ljava/util/concurrent/ConcurrentLinkedQueue;)V", false);
        map.put("java.util.zip.Adler32.reset()V", false);
        map.put("java.util.ArrayDeque.removeLast()Ljava/lang/Object;", false);
        map.put("java.util.EnumSet.of(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;", false);
        map.put("java.util.regex.Matcher.usePattern(Ljava/util/regex/Pattern;)Ljava/util/regex/Matcher;", false);
        map.put("java.util.Collections$UnmodifiableRandomAccessList.<init>(Ljava/util/List;)V", false);
        map.put("java.util.logging.LogManager.initializeGlobalHandlers()V", false);
        map.put("java.util.concurrent.atomic.AtomicLong.addAndGet(J)J", false);
        map.put("java.util.regex.Pattern.addFlag()V", false);
        map.put("java.util.Formatter$FormatSpecifier$BigDecimalLayout.mantissa()[C", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.clear()V", false);
        map.put("java.util.Formatter.<init>(Ljava/nio/charset/Charset;Ljava/util/Locale;Ljava/io/File;)V", false);
        map.put("java.util.concurrent.RejectedExecutionException.<init>(Ljava/lang/String;Ljava/lang/Throwable;)V", false);
        map.put("java.util.Arrays.equals([S[S)Z", true);
        map.put("java.util.ServiceLoader.load(Ljava/lang/Class;)Ljava/util/ServiceLoader;", false);
        map.put("java.util.logging.LogManager.getLogger(Ljava/lang/String;)Ljava/util/logging/Logger;", false);
        map.put("java.util.TreeMap$KeySet.size()I", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferQueue.advanceHead(Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.set(ILjava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Currency.readResolve()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.put(Ljava/lang/Runnable;)V", false);
        map.put("java.util.concurrent.atomic.AtomicLong.getAndAdd(J)J", false);
        map.put("java.util.Properties.clear()V", false);
        map.put("java.util.regex.Pattern$Behind.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap$EntrySet.clear()V", false);
        map.put("java.util.List.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.List.clear()V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque$Itr.nextNode(Ljava/util/concurrent/LinkedBlockingDeque$Node;)Ljava/util/concurrent/LinkedBlockingDeque$Node;", true);
        map.put("java.util.concurrent.FutureTask$Sync.releaseShared(I)Z", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.size()I", true);
        map.put("java.util.concurrent.ConcurrentHashMap.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.TimeZone.setDefaultZone()Ljava/util/TimeZone;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.skipDeletedPredecessors(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)V", false);
        map.put("java.util.SimpleTimeZone.setStartYear(I)V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.tryRelease(I)Z", false);
        map.put("java.util.Collection.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$CloneableProperty.<init>()V", false);
        map.put("java.util.Collections$CheckedList.checkedCopyOf(Ljava/util/Collection;)Ljava/util/Collection;", false);
        map.put("java.util.concurrent.DelayQueue.drainTo(Ljava/util/Collection;)I", false);
        map.put("java.util.HashMap$KeySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.TreeMap$AscendingSubMap.comparator()Ljava/util/Comparator;", true);
        map.put("java.util.HashMap.indexFor(II)I", true);
        map.put("java.util.PriorityQueue.poll()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.descendingMap()Ljava/util/NavigableMap;", false);
        map.put("java.util.logging.LogRecord.getSourceClassName()Ljava/lang/String;", false);
        map.put("java.util.EventListenerProxy.<init>(Ljava/util/EventListener;)V", false);
        map.put("java.util.concurrent.BlockingQueue.drainTo(Ljava/util/Collection;)I", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.TreeSet.floor(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.HashMap$EntryIterator.next()Ljava/util/Map$Entry;", false);
        map.put("java.util.prefs.XmlSupport$EH.fatalError(Lorg/xml/sax/SAXParseException;)V", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Node.createSnapshot()Ljava/util/AbstractMap$SimpleImmutableEntry;", false);
        map.put("java.util.PropertyPermissionCollection.elements()Ljava/util/Enumeration;", false);
        map.put("java.util.Collections$CheckedCollection.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node.isShared()Z", true);
        map.put("java.util.TreeMap$DescendingSubMap.subHighest()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.Collections$CheckedSortedMap.<init>(Ljava/util/SortedMap;Ljava/lang/Class;Ljava/lang/Class;)V", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.compareAndSet(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.StringTokenizer.nextToken()Ljava/lang/String;", false);
        map.put("java.util.zip.ZStreamRef.clear()V", false);
        map.put("java.util.Deque.addLast(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.<init>()V", false);
        map.put("java.util.WeakHashMap$EntrySet.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.ArrayList.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.prefs.AbstractPreferences.node(Ljava/lang/String;)Ljava/util/prefs/Preferences;", false);
        map.put("java.util.logging.Level.hashCode()I", true);
        map.put("java.util.Collections.unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.hasQueuedThreads()Z", true);
        map.put("java.util.Collections.addAll(Ljava/util/Collection;[Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap$NavigableSubMap.keyIterator()Ljava/util/Iterator;", false);
        map.put("java.util.zip.GZIPInputStream.ensureOpen()V", false);
        map.put("java.util.zip.GZIPInputStream.<init>(Ljava/io/InputStream;)V", false);
        map.put("java.util.regex.Matcher.getSubSequence(II)Ljava/lang/CharSequence;", false);
        map.put("java.util.Vector$1.<init>(Ljava/util/Vector;)V", false);
        map.put("java.util.concurrent.ForkJoinPool$InvokeAll.<init>(Ljava/util/ArrayList;)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync.writerShouldBlock()Z", true);
        map.put("java.util.Collections$CheckedRandomAccessList.<init>(Ljava/util/List;Ljava/lang/Class;)V", false);
        map.put("java.util.Collections$UnmodifiableCollection.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.poll()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.headSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.runStateLessThan(II)Z", true);
        map.put("java.util.WeakHashMap$KeyIterator.next()Ljava/lang/Object;", true);
        map.put("java.util.Properties.list(Ljava/io/PrintWriter;)V", false);
        map.put("java.util.concurrent.locks.Condition.awaitUninterruptibly()V", false);
        map.put("java.util.prefs.XmlSupport.importPreferences(Ljava/io/InputStream;)V", false);
        map.put("java.util.EnumMap$EnumMapIterator.hasNext()Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.tryLock()Z", false);
        map.put("java.util.IdentityHashMap$EntryIterator.remove()V", false);
        map.put("java.util.jar.JarFile$4.nextElement()Ljava/lang/String;", false);
        map.put("java.util.PropertyPermissionCollection.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.concurrent.TimeUnit.valueOf(Ljava/lang/String;)Ljava/util/concurrent/TimeUnit;", false);
        map.put("java.util.ServiceLoader.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.LinkedTransferQueue.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.peekLast()Ljava/lang/Object;", false);
        map.put("java.util.regex.MatchResult.end()I", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.<init>(Ljava/util/concurrent/ForkJoinPool;)V", false);
        map.put("java.util.zip.InflaterInputStream.<init>(Ljava/io/InputStream;Ljava/util/zip/Inflater;)V", false);
        map.put("java.util.zip.CheckedInputStream.read()I", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Ljava/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask;)V", false);
        map.put("java.util.concurrent.AbstractExecutorService.execute(Ljava/lang/Runnable;)V", false);
        map.put("java.util.prefs.Preferences.nodeName(Ljava/lang/Class;)Ljava/lang/String;", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap$AscendingSubMap.subMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.concurrent.ForkJoinPool.tryTerminate(Z)Z", false);
        map.put("java.util.NavigableSet.subSet(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.Scanner.makeSpace()Z", false);
        map.put("java.util.logging.Handler.setErrorManager(Ljava/util/logging/ErrorManager;)V", false);
        map.put("java.util.Vector.removeAllElements()V", false);
        map.put("java.util.Scanner.getCachedResult()Ljava/lang/String;", false);
        map.put("java.util.concurrent.Phaser.<init>(Ljava/util/concurrent/Phaser;I)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.linkLast(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.<init>(Ljava/util/concurrent/Executors$PrivilegedThreadFactory$1;)V", false);
        map.put("java.util.Calendar.roll(IZ)V", false);
        map.put("java.util.concurrent.RecursiveAction.getRawResult()Ljava/lang/Void;", true);
        map.put("java.util.regex.Pattern.group0()Ljava/util/regex/Pattern$Node;", false);
        map.put("java.util.Locale$Builder.setLanguageTag(Ljava/lang/String;)Ljava/util/Locale$Builder;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.doAcquireNanos(JJ)Z", false);
        map.put("java.util.prefs.WindowsPreferences.parent()Ljava/util/prefs/Preferences;", false);
        map.put("java.util.jar.JarVerifier.update(ILsun/security/util/ManifestEntryVerifier;)V", false);
        map.put("java.util.spi.TimeZoneNameProvider.getDisplayName(Ljava/lang/String;ZILjava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.jar.JarFile$JarFileEntry.getName()Ljava/lang/String;", false);
        map.put("java.util.TreeMap$NavigableSubMap.tailMap(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Segment.rehash(Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)V", false);
        map.put("java.util.ResourceBundle$CacheKey.setCause(Ljava/lang/Throwable;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.selfInterrupt()V", false);
        map.put("java.util.Map.containsKey(Ljava/lang/Object;)Z", false);
        map.put("java.util.Calendar.getWeeksInWeekYear()I", false);
        map.put("java.util.zip.ZipOutputStream.setComment(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.canRunInCurrentRunState(Z)Z", false);
        map.put("java.util.concurrent.DelayQueue.poll()Ljava/lang/Object;", false);
        map.put("java.util.ArrayList$SubList.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.RegularEnumSet.<init>(Ljava/lang/Class;[Ljava/lang/Enum;)V", false);
        map.put("java.util.logging.MemoryHandler.<init>()V", false);
        map.put("java.util.NavigableMap.lowerEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.Properties.keySet()Ljava/util/Set;", false);
        map.put("java.util.Arrays.binarySearch([Ljava/lang/Object;IILjava/lang/Object;)I", false);
        map.put("java.util.Collections$UnmodifiableList.get(I)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Phaser.badRegister(J)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ScheduledFuture.cancel(Z)Z", false);
        map.put("java.util.concurrent.TimeUnit$4.toHours(J)J", true);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.unmatchedUnlockException()Ljava/lang/IllegalMonitorStateException;", false);
        map.put("java.util.SubList.removeRange(II)V", false);
        map.put("java.util.Arrays.equals([F[F)Z", false);
        map.put("java.util.concurrent.Semaphore$Sync.releaseShared(I)Z", false);
        map.put("java.util.Formatter.<init>(Ljava/io/PrintStream;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>(Ljava/lang/Thread;I)V", false);
        map.put("java.util.concurrent.TimeUnit$4.excessNanos(JJ)I", true);
        map.put("java.util.logging.Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V", true);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater.get(Ljava/lang/Object;)I", false);
        map.put("java.util.concurrent.locks.ReentrantLock$NonfairSync.setExclusiveOwnerThread(Ljava/lang/Thread;)V", false);
        map.put("java.util.logging.Handler.close()V", false);
        map.put("java.util.prefs.XmlSupport$EH.warning(Lorg/xml/sax/SAXParseException;)V", true);
        map.put("java.util.logging.FileHandler.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.Collections$SynchronizedCollection.size()I", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.pollFirst(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.SortedMap.lastKey()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ThreadLocalRandom.setSeed(J)V", false);
        map.put("java.util.LinkedHashSet.<init>(IF)V", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.<init>(Ljava/util/Collections$UnmodifiableMap$UnmodifiableEntrySet;)V", false);
        map.put("java.util.zip.Deflater.deflate([BII)I", false);
        map.put("java.util.Scanner.makeReadable(Ljava/io/InputStream;Ljava/nio/charset/Charset;)Ljava/lang/Readable;", false);
        map.put("java.util.concurrent.ForkJoinPool.shutdown()V", false);
        map.put("java.util.TimSort.mergeAt(I)V", false);
        map.put("java.util.TimSort.gallopRight(Ljava/lang/Object;[Ljava/lang/Object;IIILjava/util/Comparator;)I", false);
        map.put("java.util.Collections$SynchronizedList.addAll(ILjava/util/Collection;)Z", false);
        map.put("java.util.LinkedList.getLast()Ljava/lang/Object;", false);
        map.put("java.util.Collections$CheckedList$1.hasNext()Z", false);
        map.put("java.util.Collections$UnmodifiableMap.size()I", false);
        map.put("java.util.TimSort.countRunAndMakeAscending([Ljava/lang/Object;IILjava/util/Comparator;)I", false);
        map.put("java.util.ArrayList.size()I", true);
        map.put("java.util.concurrent.RejectedExecutionHandler.rejectedExecution(Ljava/lang/Runnable;Ljava/util/concurrent/ThreadPoolExecutor;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Locale.getExtension(C)Ljava/lang/String;", true);
        map.put("java.util.logging.SocketHandler.publish(Ljava/util/logging/LogRecord;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.atomic.AtomicBoolean.<init>(Z)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.offerLast(Ljava/lang/Object;)Z", false);
        map.put("java.util.prefs.Base64.main([Ljava/lang/String;)V", false);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapEntryIterator.next()Ljava/util/Map$Entry;", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater.ensureProtectedAccess(Ljava/lang/Object;)V", false);
        map.put("java.util.BitSet.previousClearBit(I)I", true);
        map.put("java.util.EnumMap.<clinit>()V", false);
        map.put("java.util.concurrent.BlockingQueue.take()Ljava/lang/Object;", false);
        map.put("java.util.Locale.getInstance(Lsun/util/locale/BaseLocale;Lsun/util/locale/LocaleExtensions;)Ljava/util/Locale;", false);
        map.put("java.util.Calendar.getFieldStrings(IILjava/text/DateFormatSymbols;)[Ljava/lang/String;", false);
        map.put("java.util.ServiceLoader$1.<init>(Ljava/util/ServiceLoader;)V", false);
        map.put("java.util.concurrent.CountDownLatch$Sync.compareAndSetState(II)Z", false);
        map.put("java.util.Formatter$Conversion.isValid(C)Z", true);
        map.put("java.util.GregorianCalendar.getDisplayNames(IILjava/util/Locale;)Ljava/util/Map;", false);
        map.put("java.util.Formatter$FormatSpecifier.printInteger(Ljava/lang/Object;Ljava/util/Locale;)V", false);
        map.put("java.util.concurrent.ForkJoinPool.timedAwaitJoin(Ljava/util/concurrent/ForkJoinTask;J)V", false);
        map.put("java.util.Collections$1.remove()V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.tryLock()Z", false);
        map.put("java.util.Arrays.legacyMergeSort([Ljava/lang/Object;II)V", false);
        map.put("java.util.GregorianCalendar.clone()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.<init>(Ljava/lang/Thread;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)V", false);
        map.put("java.util.DualPivotQuicksort.sort([IIIZ)V", true);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$DescendingItr.<init>(Ljava/util/concurrent/ConcurrentLinkedDeque;)V", false);
        map.put("java.util.concurrent.TimeUnit$6.toMicros(J)J", false);
        map.put("java.util.regex.UnicodeProp.<clinit>()V", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.set(ILjava/lang/Object;)V", false);
        map.put("java.util.logging.Level$KnownLevel.findByName(Ljava/lang/String;)Ljava/util/logging/Level$KnownLevel;", false);
        map.put("java.util.zip.Deflater.finished()Z", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.headMap(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$19.isSatisfiedBy(I)Z", false);
        map.put("java.util.LinkedHashMap.newEntryIterator()Ljava/util/Iterator;", false);
        map.put("java.util.jar.JarVerifier$3.nextElement()Ljava/lang/String;", false);
        map.put("java.util.jar.JarFile$1.<init>(Ljava/util/jar/JarFile;Ljava/util/Enumeration;)V", false);
        map.put("java.util.concurrent.SynchronousQueue$FifoWaitQueue.<init>()V", true);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$AbstractItr.advance()V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.pop()Ljava/lang/Object;", false);
        map.put("java.util.Scanner.toCharset(Ljava/lang/String;)Ljava/nio/charset/Charset;", false);
        map.put("java.util.WeakHashMap.newTable(I)[Ljava/util/WeakHashMap$Entry;", true);
        map.put("java.util.concurrent.CopyOnWriteArrayList.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.concurrent.DelayQueue.size()I", false);
        map.put("java.util.IdentityHashMap.clear()V", false);
        map.put("java.util.Collections$SynchronizedCollection.isEmpty()Z", false);
        map.put("java.util.logging.LoggingProxyImpl.<init>()V", true);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.signalAll()V", false);
        map.put("java.util.concurrent.TransferQueue.transfer(Ljava/lang/Object;)V", false);
        map.put("java.util.regex.UnicodeProp$13.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.Arrays.copyOfRange([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;", false);
        map.put("java.util.JapaneseImperialCalendar.actualMonthLength()I", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$ComparableUsingComparator.<init>(Ljava/lang/Object;Ljava/util/Comparator;)V", false);
        map.put("java.util.concurrent.ForkJoinTask.completeExceptionally(Ljava/lang/Throwable;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.<init>(Ljava/util/Comparator;)V", false);
        map.put("java.util.Collections$SetFromMap.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.EnumSet.of(Ljava/lang/Enum;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;", false);
        map.put("java.util.RegularEnumSet.size()I", true);
        map.put("java.util.TreeMap$DescendingSubMap.subLower(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.zip.ZipEntry.clone()Ljava/lang/Object;", false);
        map.put("java.util.logging.Logger.entering(Ljava/lang/String;Ljava/lang/String;)V", true);
        map.put("java.util.concurrent.Executors$PrivilegedCallableUsingCurrentClassLoader.access$200(Ljava/util/concurrent/Executors$PrivilegedCallableUsingCurrentClassLoader;)Ljava/util/concurrent/Callable;", true);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(Ljava/lang/Object;JJ)Z", false);
        map.put("java.util.GregorianCalendar.actualMonthLength()I", false);
        map.put("java.util.concurrent.locks.LockSupport.getBlocker(Ljava/lang/Thread;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.replace(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.regex.MatchResult.end(I)I", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.ArrayList.<init>(I)V", false);
        map.put("java.util.logging.Logger$LoggerHelper.<clinit>()V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.release(J)Z", false);
        map.put("java.util.Collections.asLifoQueue(Ljava/util/Deque;)Ljava/util/Queue;", false);
        map.put("java.util.ResourceBundle$RBClassLoader.<init>()V", false);
        map.put("java.util.ResourceBundle$SingleFormatControl.getFormats(Ljava/lang/String;)Ljava/util/List;", false);
        map.put("java.util.Deque.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.LinkedList.element()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Exchanger.<init>()V", false);
        map.put("java.util.zip.DataFormatException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.EnumMap$EnumMapIterator.<init>(Ljava/util/EnumMap;Ljava/util/EnumMap$1;)V", false);
        map.put("java.util.zip.ZipCoder.getBytesUTF8(Ljava/lang/String;)[B", false);
        map.put("java.util.UUID$Holder.<clinit>()V", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.take()Ljava/lang/Object;", false);
        map.put("java.util.PriorityQueue.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.SortedMap.containsKey(Ljava/lang/Object;)Z", false);
        map.put("java.util.Locale$Category.<clinit>()V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.getAndSet(II)I", false);
        map.put("java.util.Hashtable.access$210(Ljava/util/Hashtable;)I", false);
        map.put("java.util.regex.Pattern$All.isSatisfiedBy(I)Z", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Node.<clinit>()V", false);
        map.put("java.util.Collections$SingletonMap.<init>(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        map.put("java.util.jar.JarFile.setEagerValidation(Z)V", false);
        map.put("java.util.zip.ZipFile.access$1500(Ljava/util/zip/ZipFile;)Z", true);
        map.put("java.util.ComparableTimSort.pushRun(II)V", false);
        map.put("java.util.Hashtable$Enumerator.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.TimeZone.getAvailableIDs()[Ljava/lang/String;", false);
        map.put("java.util.PropertyPermissionCollection.<init>()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.<init>(Ljava/util/Map;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.initHeadTail(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)V", false);
        map.put("java.util.Formatter$FormatSpecifier.getZero(Ljava/util/Locale;)C", true);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.<init>()V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.poll()Ljava/lang/Object;", false);
        map.put("java.util.logging.Logger.getGlobal()Ljava/util/logging/Logger;", true);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$Node.casPrev(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Z", false);
        map.put("java.util.logging.Level$KnownLevel.add(Ljava/util/logging/Level;)V", false);
        map.put("java.util.SubList.listIterator(I)Ljava/util/ListIterator;", false);
        map.put("java.util.SortedSet.subSet(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Holder.<clinit>()V", false);
        map.put("java.util.Locale.initDefault(Ljava/util/Locale$Category;)V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.set(Ljava/lang/Object;I)V", false);
        map.put("java.util.ArrayDeque.peekLast()Ljava/lang/Object;", true);
        map.put("java.util.Random.<init>(J)V", false);
        map.put("java.util.AbstractMap$SimpleImmutableEntry.getKey()Ljava/lang/Object;", true);
        map.put("java.util.SimpleTimeZone.<init>(ILjava/lang/String;IIIIIIIIIII)V", false);
        map.put("java.util.Collections$CheckedSortedSet.headSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.GregorianCalendar.toString()Ljava/lang/String;", false);
        map.put("java.util.LinkedList.checkPositionIndex(I)V", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater.lazySet(Ljava/lang/Object;J)V", false);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegFlushKey1(I)I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.ceilingEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.Calendar.getTime()Ljava/util/Date;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.subSet(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;", false);
        map.put("java.util.ArrayList.isEmpty()Z", true);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.lazySet(ILjava/lang/Object;)V", false);
        map.put("java.util.logging.MemoryHandler.checkPermission()V", false);
        map.put("java.util.logging.StreamHandler.setFormatter(Ljava/util/logging/Formatter;)V", false);
        map.put("java.util.jar.Manifest.read(Ljava/io/InputStream;)V", true);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.Collections$UnmodifiableSortedMap.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.TreeMap$NavigableSubMap.<init>(Ljava/util/TreeMap;ZLjava/lang/Object;ZZLjava/lang/Object;Z)V", false);
        map.put("java.util.prefs.AbstractPreferences.prefListeners()[Ljava/util/prefs/PreferenceChangeListener;", true);
        map.put("java.util.AbstractCollection.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.Formatter$FormatSpecifier.checkNumeric()V", false);
        map.put("java.util.concurrent.RunnableScheduledFuture.getDelay(Ljava/util/concurrent/TimeUnit;)J", false);
        map.put("java.util.concurrent.ConcurrentHashMap$EntrySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.TreeMap$NavigableSubMap.headMap(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.Collections$SetFromMap.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.WeakHashMap$HashIterator.<init>(Ljava/util/WeakHashMap;)V", false);
        map.put("java.util.regex.Pattern$Dot.isSatisfiedBy(I)Z", true);
        map.put("java.util.concurrent.ArrayBlockingQueue.clear()V", false);
        map.put("java.util.zip.ZipFile.close(J)V", false);
        map.put("java.util.FormatterClosedException.<init>()V", false);
        map.put("java.util.concurrent.LinkedTransferQueue.countOfMode(Z)I", true);
        map.put("java.util.WeakHashMap.<init>(IF)V", false);
        map.put("java.util.TreeSet.<init>()V", false);
        map.put("java.util.zip.Deflater.ensureOpen()V", false);
        map.put("java.util.Scanner.nextLong(I)J", false);
        map.put("java.util.GregorianCalendar.internalSet(II)V", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.drainTo(Ljava/util/Collection;I)I", false);
        map.put("java.util.regex.UnicodeProp$3.is(I)Z", true);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet$1.hasNext()Z", false);
        map.put("java.util.concurrent.SynchronousQueue$WaitQueue.<init>()V", true);
        map.put("java.util.Locale.getBaseLocale()Lsun/util/locale/BaseLocale;", true);
        map.put("java.util.AbstractMap.containsValue(Ljava/lang/Object;)Z", true);
        map.put("java.util.HashMap$ValueIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.BlockingQueue.peek()Ljava/lang/Object;", false);
        map.put("java.util.AbstractList$ListItr.previousIndex()I", true);
        map.put("java.util.regex.Pattern.compile()V", false);
        map.put("java.util.TimeZone.getOffset(J)I", false);
        map.put("java.util.concurrent.ConcurrentHashMap$ValueIterator.<init>(Ljava/util/concurrent/ConcurrentHashMap;)V", false);
        map.put("java.util.Collections$SynchronizedSortedSet.last()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Semaphore.tryAcquire(JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.ArrayDeque.addLast(Ljava/lang/Object;)V", false);
        map.put("java.util.Formatter$Flags.valueOf()I", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.floorKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.PriorityQueue.siftDownUsingComparator(ILjava/lang/Object;)V", false);
        map.put("java.util.logging.Logger.setParent(Ljava/util/logging/Logger;)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue.succ(Ljava/util/concurrent/LinkedTransferQueue$Node;)Ljava/util/concurrent/LinkedTransferQueue$Node;", true);
        map.put("java.util.logging.Level$KnownLevel.<clinit>()V", false);
        map.put("java.util.Arrays.copyOfRange([Ljava/lang/Object;II)[Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$NavigableSubMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubList.clear()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Iter.remove()V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$8.isSatisfiedBy(I)Z", true);
        map.put("java.util.Map.clear()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.doRemoveFirstEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.Locale.getAvailableLocales()[Ljava/util/Locale;", false);
        map.put("java.util.Formatter$FormatSpecifier.leadingSign(Ljava/lang/StringBuilder;Z)Ljava/lang/StringBuilder;", false);
        map.put("java.util.zip.Deflater.reset()V", false);
        map.put("java.util.Queue.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.IdentityHashMap$EntryIterator$Entry.hashCode()I", false);
        map.put("java.util.concurrent.CountDownLatch$Sync.getCount()I", false);
        map.put("java.util.zip.DeflaterInputStream.read([BII)I", false);
        map.put("java.util.LinkedHashMap$ValueIterator.<init>(Ljava/util/LinkedHashMap;)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.getReadHoldCount()I", false);
        map.put("java.util.IdentityHashMap$KeyIterator.nextIndex()I", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$9.<init>()V", false);
        map.put("java.util.concurrent.TimeUnit$4.toMicros(J)J", false);
        map.put("java.util.JumboEnumSet.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.locks.LockSupport.parkNanos(Ljava/lang/Object;J)V", false);
        map.put("java.util.prefs.AbstractPreferences$1.<init>(Ljava/util/prefs/AbstractPreferences;)V", false);
        map.put("java.util.EnumMap$EntrySet.clear()V", false);
        map.put("java.util.logging.LogManager.drainLoggerRefQueueBounded()V", false);
        map.put("java.util.concurrent.atomic.AtomicReference.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.LinkedTransferQueue.casSweepVotes(II)Z", false);
        map.put("java.util.ComparableTimSort.gallopRight(Ljava/lang/Comparable;[Ljava/lang/Object;III)I", false);
        map.put("java.util.TreeMap$PrivateEntryIterator.<init>(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.TreeSet.first()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.set(II)V", false);
        map.put("java.util.Currency.replaceCurrencyData(Ljava/util/regex/Pattern;Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Segment.<init>(FI[Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)V", false);
        map.put("java.util.TreeMap.subMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.Timer.<clinit>()V", false);
        map.put("java.util.Hashtable$ValueCollection.<init>(Ljava/util/Hashtable;Ljava/util/Hashtable$1;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.lowerEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.SubList.remove(I)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferQueue.<clinit>()V", false);
        map.put("java.util.AbstractList$ListItr.<init>(Ljava/util/AbstractList;I)V", false);
        map.put("java.util.Set.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.JumboEnumSet$EnumSetIterator.remove()V", false);
        map.put("java.util.jar.JarOutputStream.<init>(Ljava/io/OutputStream;Ljava/util/jar/Manifest;)V", false);
        map.put("java.util.Collections$SetFromMap.<init>(Ljava/util/Map;)V", false);
        map.put("java.util.regex.Matcher.group(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.Collections.synchronizedSet(Ljava/util/Set;)Ljava/util/Set;", false);
        map.put("java.util.AbstractMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.compareAndSet(IJJ)Z", false);
        map.put("java.util.TreeSet.tailSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.Queue.element()Ljava/lang/Object;", false);
        map.put("java.util.ArrayList$SubList$1.checkForComodification()V", false);
        map.put("java.util.GregorianCalendar.getFirstDayOfWeek()I", false);
        map.put("java.util.GregorianCalendar.isSet(I)Z", false);
        map.put("java.util.EnumSet.clone()Ljava/util/EnumSet;", false);
        map.put("java.util.regex.Pattern$LastNode.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.zip.InflaterInputStream.reset()V", false);
        map.put("java.util.Formatter.<init>(Ljava/io/OutputStream;Ljava/lang/String;)V", false);
        map.put("java.util.Collections$SynchronizedList.hashCode()I", false);
        map.put("java.util.ArrayList$SubList$1.hasPrevious()Z", true);
        map.put("java.util.TaskQueue.<init>()V", false);
        map.put("java.util.Formatter.access$300(Ljava/util/Formatter;)C", true);
        map.put("java.util.jar.JarEntry.setSize(J)V", false);
        map.put("java.util.HashMap.putForCreate(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        map.put("java.util.BitSet.toByteArray()[B", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.peek()Ljava/lang/Object;", false);
        map.put("java.util.JumboEnumSet.clear()V", false);
        map.put("java.util.concurrent.locks.ReentrantLock.getWaitingThreads(Ljava/util/concurrent/locks/Condition;)Ljava/util/Collection;", false);
        map.put("java.util.regex.Pattern$BnM.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.AbstractList.listIterator()Ljava/util/ListIterator;", false);
        map.put("java.util.jar.Attributes$Name.isValid(Ljava/lang/String;)Z", true);
        map.put("java.util.WeakHashMap.<init>(Ljava/util/Map;)V", false);
        map.put("java.util.Locale.getLanguage()Ljava/lang/String;", true);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.enq(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;", false);
        map.put("java.util.regex.Pattern.bitsOrSingle(Ljava/util/regex/Pattern$BitClass;I)Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.getFirst()Ljava/lang/Object;", false);
        map.put("java.util.Properties.enumerateStringProperties(Ljava/util/Hashtable;)V", false);
        map.put("java.util.Collections.singletonIterator(Ljava/lang/Object;)Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferQueue$QNode.<clinit>()V", false);
        map.put("java.util.LinkedList.descendingIterator()Ljava/util/Iterator;", false);
        map.put("java.util.JapaneseImperialCalendar.getTimeInMillis()J", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Values.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.isOwnedBy(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer;)Z", true);
        map.put("java.util.concurrent.Semaphore.reducePermits(I)V", false);
        map.put("java.util.TreeMap$KeySet.floor(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.jar.Attributes.isEmpty()Z", false);
        map.put("java.util.jar.Attributes.read(Ljava/util/jar/Manifest$FastInputStream;[B)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.hasContended()Z", true);
        map.put("java.util.concurrent.Executor.execute(Ljava/lang/Runnable;)V", false);
        map.put("java.util.TreeSet.<init>(Ljava/util/NavigableMap;)V", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.<clinit>()V", false);
        map.put("java.util.logging.Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V", true);
        map.put("java.util.EnumMap.values()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.ForkJoinPool.isShutdown()Z", true);
        map.put("java.util.GregorianCalendar.monthLength(I)I", false);
        map.put("java.util.EnumMap.putAll(Ljava/util/Map;)V", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.getRaw(J)J", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(Ljava/lang/Runnable;Ljava/util/concurrent/RunnableScheduledFuture;)Ljava/util/concurrent/RunnableScheduledFuture;", true);
        map.put("java.util.zip.ZipOutputStream.writeLong(J)V", false);
        map.put("java.util.jar.JarEntry.setMethod(I)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.prevTerminator()Ljava/util/concurrent/ConcurrentLinkedDeque$Node;", true);
        map.put("java.util.concurrent.ConcurrentNavigableMap.containsKey(Ljava/lang/Object;)Z", false);
        map.put("java.util.zip.Inflater.setInput([BII)V", false);
        map.put("java.util.zip.GZIPOutputStream.writeShort(I[BI)V", true);
        map.put("java.util.PropertyPermissionCollection.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.logging.Logger.setLogManager(Ljava/util/logging/LogManager;)V", false);
        map.put("java.util.Collections$SingletonSet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.Arrays.toString([Ljava/lang/Object;)Ljava/lang/String;", false);
        map.put("java.util.ArrayDeque.getFirst()Ljava/lang/Object;", false);
        map.put("java.util.JapaneseImperialCalendar.setTimeZone(Ljava/util/TimeZone;)V", false);
        map.put("java.util.concurrent.ExecutorService.awaitTermination(JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.prefs.PreferenceChangeEvent.getNode()Ljava/util/prefs/Preferences;", false);
        map.put("java.util.Collections$ReverseComparator.compare(Ljava/lang/Comparable;Ljava/lang/Comparable;)I", false);
        map.put("java.util.TimeZone$DisplayNames.access$000()Ljava/util/Map;", true);
        map.put("java.util.ListResourceBundle.<init>()V", false);
        map.put("java.util.EnumMap$EntrySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.regex.Matcher.group()Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.hashCode()I", false);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapIterator.prevEntry()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.TreeMap.navigableKeySet()Ljava/util/NavigableSet;", false);
        map.put("java.util.Collections$UnmodifiableMap.isEmpty()Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.firstKey()Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipCoder.get(Ljava/nio/charset/Charset;)Ljava/util/zip/ZipCoder;", false);
        map.put("java.util.Deque.size()I", false);
        map.put("java.util.Calendar.getMillisOf(Ljava/util/Calendar;)J", false);
        map.put("java.util.ResourceBundle$CacheKey.hashCode()I", true);
        map.put("java.util.Collections.sort(Ljava/util/List;Ljava/util/Comparator;)V", false);
        map.put("java.util.regex.Pattern$6.<init>(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;)V", false);
        map.put("java.util.logging.StreamHandler.isLoggable(Ljava/util/logging/LogRecord;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.findPredecessor(Ljava/lang/Comparable;)Ljava/util/concurrent/ConcurrentSkipListMap$Node;", false);
        map.put("java.util.logging.Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.initialize()V", false);
        map.put("java.util.TreeMap$NavigableSubMap.descendingKeyIterator()Ljava/util/Iterator;", false);
        map.put("java.util.ArrayDeque$DescendingIterator.<init>(Ljava/util/ArrayDeque;)V", false);
        map.put("java.util.concurrent.TimeUnit$4.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.TreeMap$PrivateEntryIterator.prevEntry()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.PropertyPermission.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.zip.Deflater.init(IIZ)J", false);
        map.put("java.util.PropertyPermission.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.Date.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.ResourceBundle$CacheKey.access$702(Ljava/util/ResourceBundle$CacheKey;J)J", false);
        map.put("java.util.LinkedList.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.DelayQueue.put(Ljava/util/concurrent/Delayed;)V", false);
        map.put("java.util.concurrent.CountDownLatch.countDown()V", false);
        map.put("java.util.Collections$UnmodifiableList.listIterator(I)Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.cancelAcquire(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)V", false);
        map.put("java.util.SubList$1.hasPrevious()Z", true);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$AbstractItr.remove()V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.<init>()V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getReadLockCount()I", true);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.finishPoll(Ljava/util/concurrent/RunnableScheduledFuture;)Ljava/util/concurrent/RunnableScheduledFuture;", false);
        map.put("java.util.PriorityQueue.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.AbstractMap$SimpleEntry.setValue(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Formatter.<init>(Ljava/util/Locale;Ljava/lang/Appendable;)V", false);
        map.put("java.util.ArrayList$ListItr.set(Ljava/lang/Object;)V", false);
        map.put("java.util.logging.Logger.entering(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V", true);
        map.put("java.util.LinkedList.removeLast()Ljava/lang/Object;", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.Exchanger.<clinit>()V", false);
        map.put("java.util.concurrent.SynchronousQueue.objectFieldOffset(Lsun/misc/Unsafe;Ljava/lang/String;Ljava/lang/Class;)J", false);
        map.put("java.util.TreeMap.keyOrNull(Ljava/util/TreeMap$Entry;)Ljava/lang/Object;", true);
        map.put("java.util.Properties.storeToXML(Ljava/io/OutputStream;Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.TimeZone.hasPermission()Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap$KeySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.EnumMap.unmaskNull(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.TimeUnit$1.toSeconds(J)J", true);
        map.put("java.util.concurrent.ForkJoinTask.doExec()V", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater.set(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        map.put("java.util.TreeMap$AscendingSubMap.absHighFence()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.Collections$SynchronizedSortedMap.<init>(Ljava/util/SortedMap;)V", false);
        map.put("java.util.jar.JarVerifier.getCerts(Ljava/util/jar/JarFile;Ljava/util/jar/JarEntry;)[Ljava/security/cert/Certificate;", false);
        map.put("java.util.StringTokenizer.skipDelimiters(I)I", true);
        map.put("java.util.TreeMap$ValueIterator.<init>(Ljava/util/TreeMap;Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.Collections$SetFromMap.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections$AsLIFOQueue.<init>(Ljava/util/Deque;)V", false);
        map.put("java.util.Collections$UnmodifiableSortedSet.first()Ljava/lang/Object;", false);
        map.put("java.util.HashMap$Entry.recordRemoval(Ljava/util/HashMap;)V", true);
        map.put("java.util.AbstractMap$1$1.next()Ljava/lang/Object;", false);
        map.put("java.util.TreeMap.higherKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.offer(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.TreeMap$NavigableSubMap.pollFirstEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue$Itr.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.clear()V", false);
        map.put("java.util.PropertyPermission.<init>(Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.HashMap$Entry.recordAccess(Ljava/util/HashMap;)V", true);
        map.put("java.util.zip.Inflater.inflate([BII)I", false);
        map.put("java.util.jar.JarVerifier.getJarCodeSigners()Ljava/util/List;", false);
        map.put("java.util.WeakHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.PriorityQueue.siftUpComparable(ILjava/lang/Object;)V", false);
        map.put("java.util.EnumMap.access$1100(Ljava/util/EnumMap;)[Ljava/lang/Enum;", true);
        map.put("java.util.LinkedList$ListItr.previous()Ljava/lang/Object;", false);
        map.put("java.util.GregorianCalendar.<init>(IIIIIII)V", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.writeSlot([Ljava/util/concurrent/ForkJoinTask;ILjava/util/concurrent/ForkJoinTask;)V", false);
        map.put("java.util.concurrent.locks.AbstractOwnableSynchronizer.<init>()V", true);
        map.put("java.util.Collections$SynchronizedCollection.<init>(Ljava/util/Collection;Ljava/lang/Object;)V", false);
        map.put("java.util.AbstractMap.hashCode()I", false);
        map.put("java.util.Formatter$Flags.parse(C)Ljava/util/Formatter$Flags;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.setCorePoolSize(I)V", false);
        map.put("java.util.ArrayList$SubList$1.hasNext()Z", true);
        map.put("java.util.zip.ZipFile.access$800(Ljava/util/zip/ZipFile;)Ljava/lang/String;", true);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.isOnSyncQueue(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z", true);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.HashMap.containsKey(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.DelayQueue.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.LinkedList$DescendingIterator.<init>(Ljava/util/LinkedList;)V", false);
        map.put("java.util.regex.Pattern$BackRef.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.TreeMap$NavigableSubMap.tooLow(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.indexOf(Ljava/lang/Object;)I", true);
        map.put("java.util.zip.ZipFile.access$100(Ljava/util/zip/ZipFile;Ljava/util/zip/Inflater;)V", false);
        map.put("java.util.prefs.AbstractPreferences.getSpi(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.JumboEnumSet.clone()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ForkJoinPool.addActiveCount(I)V", false);
        map.put("java.util.Arrays.fill([Ljava/lang/Object;IILjava/lang/Object;)V", false);
        map.put("java.util.SortedMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubList.rangeCheck(I)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Index.<clinit>()V", false);
        map.put("java.util.logging.LogManager.getUserContext()Ljava/util/logging/LogManager$LoggerContext;", false);
        map.put("java.util.Properties.toHex(I)C", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.descendingIterator()Ljava/util/Iterator;", false);
        map.put("java.util.GregorianCalendar.pinDayOfMonth()V", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.<init>(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)V", false);
        map.put("java.util.TreeMap$AscendingSubMap.subLower(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.zip.Inflater.getTotalIn()I", false);
        map.put("java.util.zip.ZipFile$ZipFileInputStream.finalize()V", false);
        map.put("java.util.logging.Logger.exiting(Ljava/lang/String;Ljava/lang/String;)V", true);
        map.put("java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy.rejectedExecution(Ljava/lang/Runnable;Ljava/util/concurrent/ThreadPoolExecutor;)V", false);
        map.put("java.util.Locale.getDisplayName()Ljava/lang/String;", false);
        map.put("java.util.Arrays.equals([D[D)Z", false);
        map.put("java.util.Arrays.binarySearch([Ljava/lang/Object;IILjava/lang/Object;Ljava/util/Comparator;)I", false);
        map.put("java.util.concurrent.Exchanger$Slot.<init>(Ljava/util/concurrent/Exchanger$1;)V", true);
        map.put("java.util.logging.LogManager$SystemLoggerContext.demandLogger(Ljava/lang/String;Ljava/lang/String;)Ljava/util/logging/Logger;", false);
        map.put("java.util.ArrayList.listIterator()Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.push(Ljava/lang/Object;)V", false);
        map.put("java.util.JapaneseImperialCalendar.computeTime()V", false);
        map.put("java.util.Collections.iteratorBinarySearch(Ljava/util/List;Ljava/lang/Object;)I", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getReadHoldCount()I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;", false);
        map.put("java.util.EnumMap$Values.size()I", true);
        map.put("java.util.regex.ASCII.isDigit(I)Z", true);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.doSignalAll(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)V", false);
        map.put("java.util.Formatter.<init>(Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.regex.Pattern.<clinit>()V", false);
        map.put("java.util.concurrent.ConcurrentHashMap$ValueIterator.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.hasWaiters()Z", false);
        map.put("java.util.PriorityQueue.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.ArrayDeque.size()I", true);
        map.put("java.util.Collections$UnmodifiableSortedMap.firstKey()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.Calendar.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.Scanner.hasNextLine()Z", false);
        map.put("java.util.Calendar.roll(II)V", false);
        map.put("java.util.BitSet.isEmpty()Z", true);
        map.put("java.util.Properties.store0(Ljava/io/BufferedWriter;Ljava/lang/String;Z)V", false);
        map.put("java.util.GregorianCalendar.set(II)V", false);
        map.put("java.util.Arrays.sort([DII)V", false);
        map.put("java.util.Collections$CheckedSortedMap.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.EnumSet.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.AbstractMap.isEmpty()Z", false);
        map.put("java.util.HashMap.clone()Ljava/lang/Object;", false);
        map.put("java.util.HashMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$3.make()Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.concurrent.ForkJoinTask.doInvoke()I", false);
        map.put("java.util.Scanner.skip(Ljava/lang/String;)Ljava/util/Scanner;", false);
        map.put("java.util.prefs.AbstractPreferences.putDouble(Ljava/lang/String;D)V", false);
        map.put("java.util.Hashtable$ValueCollection.size()I", true);
        map.put("java.util.prefs.AbstractPreferences.get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.logging.Logger.logp(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V", true);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater.weakCompareAndSet(Ljava/lang/Object;II)Z", false);
        map.put("java.util.concurrent.atomic.AtomicStampedReference.getStamp()I", true);
        map.put("java.util.TreeMap$NavigableSubMap.inRange(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.lastEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.AbstractList$ListItr.previous()Ljava/lang/Object;", false);
        map.put("java.util.PriorityQueue.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentMap.replace(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Scanner.<init>(Ljava/nio/file/Path;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.<init>(Ljava/util/SortedSet;)V", false);
        map.put("java.util.regex.Pattern$Loop.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.logging.LogRecord.setResourceBundleName(Ljava/lang/String;)V", false);
        map.put("java.util.regex.UnicodeProp$11.is(I)Z", false);
        map.put("java.util.EnumMap$EntrySet.<init>(Ljava/util/EnumMap;Ljava/util/EnumMap$1;)V", false);
        map.put("java.util.LinkedHashMap$ValueIterator.nextEntry()Ljava/util/LinkedHashMap$Entry;", false);
        map.put("java.util.concurrent.TimeUnit$2.toSeconds(J)J", true);
        map.put("java.util.prefs.XmlSupport.writeDoc(Lorg/w3c/dom/Document;Ljava/io/OutputStream;)V", false);
        map.put("java.util.logging.LogRecord.inferCaller()V", false);
        map.put("java.util.Locale.getISO3Language()Ljava/lang/String;", false);
        map.put("java.util.logging.LogManager$RootLogger.log(Ljava/util/logging/LogRecord;)V", true);
        map.put("java.util.prefs.NodeChangeEvent.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.ArrayList.lastIndexOf(Ljava/lang/Object;)I", true);
        map.put("java.util.Formatter$FormatString.print(Ljava/lang/Object;Ljava/util/Locale;)V", false);
        map.put("java.util.concurrent.ExecutorService.shutdownNow()Ljava/util/List;", false);
        map.put("java.util.Stack.push(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Random.resetSeed(J)V", false);
        map.put("java.util.Vector.addAll(ILjava/util/Collection;)Z", false);
        map.put("java.util.EnumMap.access$1000(Ljava/util/EnumMap;Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.logging.LogManager.loadLoggerHandlers(Ljava/util/logging/Logger;Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.hasWaiters()Z", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.interruptIdleWorkers()V", false);
        map.put("java.util.ArrayDeque.copyElements([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ForkJoinPool.invoke(Ljava/util/concurrent/ForkJoinTask;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.weakCompareAndSet(IJJ)Z", false);
        map.put("java.util.RegularEnumSet.addRange(Ljava/lang/Enum;Ljava/lang/Enum;)V", false);
        map.put("java.util.ResourceBundle.keySet()Ljava/util/Set;", false);
        map.put("java.util.Collections$CheckedCollection.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.ArrayDeque.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock.isFair()Z", true);
        map.put("java.util.Collections$1.next()Ljava/lang/Object;", false);
        map.put("java.util.jar.Attributes$Name.<clinit>()V", false);
        map.put("java.util.Collections$CheckedSet.hashCode()I", false);
        map.put("java.util.ArrayList.add(ILjava/lang/Object;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Iter.advance()V", false);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegOpenKey1(I[BI)[I", false);
        map.put("java.util.XMLUtils$EH.warning(Lorg/xml/sax/SAXParseException;)V", true);
        map.put("java.util.zip.ZipInputStream.get16([BI)I", true);
        map.put("java.util.regex.Pattern$Block.isSatisfiedBy(I)Z", false);
        map.put("java.util.Formatter.<init>()V", false);
        map.put("java.util.SubList.subList(II)Ljava/util/List;", false);
        map.put("java.util.concurrent.LinkedTransferQueue.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.regex.Matcher.region(II)Ljava/util/regex/Matcher;", false);
        map.put("java.util.concurrent.ConcurrentHashMap$ValueIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.EnumMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Deque.peekLast()Ljava/lang/Object;", false);
        map.put("java.util.TreeMap.compare(Ljava/lang/Object;Ljava/lang/Object;)I", false);
        map.put("java.util.concurrent.DelayQueue.offer(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.AbstractList.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.Arrays.toString([C)Ljava/lang/String;", false);
        map.put("java.util.regex.Pattern.next()I", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$8.<init>()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.descendingSet()Ljava/util/NavigableSet;", false);
        map.put("java.util.SubList.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.BitSet.initWords(I)V", false);
        map.put("java.util.LinkedList.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.ArrayList.subListRangeCheck(III)V", false);
        map.put("java.util.SortedMap.containsValue(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.Exchanger$Node.compareAndSet(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections$CheckedSortedSet.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.TreeMap$KeySet.ceiling(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.BlockingDeque.element()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Segment.replace(Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.regex.UnicodeProp$6.is(I)Z", false);
        map.put("java.util.TreeSet.tailSet(Ljava/lang/Object;Z)Ljava/util/NavigableSet;", false);
        map.put("java.util.IdentityHashMap.access$400(Ljava/lang/Object;I)I", false);
        map.put("java.util.ResourceBundle.clearCache()V", false);
        map.put("java.util.Observable.setChanged()V", false);
        map.put("java.util.PropertyResourceBundle.handleKeySet()Ljava/util/Set;", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.logging.LogManager$LogNode.walkAndSetParent(Ljava/util/logging/Logger;)V", false);
        map.put("java.util.concurrent.FutureTask.cancel(Z)Z", true);
        map.put("java.util.JapaneseImperialCalendar.clone()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.size()I", true);
        map.put("java.util.zip.DeflaterInputStream.<init>(Ljava/io/InputStream;)V", false);
        map.put("java.util.prefs.NodeChangeEvent.<init>(Ljava/util/prefs/Preferences;Ljava/util/prefs/Preferences;)V", false);
        map.put("java.util.ResourceBundle.hasValidParentChain(Ljava/util/ResourceBundle;)Z", true);
        map.put("java.util.LinkedHashMap$Entry.<init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Entry;)V", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Holder.<init>()V", true);
        map.put("java.util.JumboEnumSet.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.logging.LogManager$LoggerContext$1.<init>(Ljava/util/logging/LogManager$LoggerContext;Ljava/util/logging/Logger;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.TimeUnit.timedJoin(Ljava/lang/Thread;J)V", false);
        map.put("java.util.zip.ZipFile.access$700(J)Ljava/lang/String;", false);
        map.put("java.util.Collections$SynchronizedRandomAccessList.<init>(Ljava/util/List;)V", false);
        map.put("java.util.Collections$SingletonSet.size()I", true);
        map.put("java.util.Locale$LocaleKey.<init>(Lsun/util/locale/BaseLocale;Lsun/util/locale/LocaleExtensions;)V", false);
        map.put("java.util.Hashtable$KeySet.size()I", true);
        map.put("java.util.regex.Pattern.o()I", false);
        map.put("java.util.RegularEnumSet$EnumSetIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.DualPivotQuicksort.sort([III)V", true);
        map.put("java.util.TimeZone.inDaylightTime(Ljava/util/Date;)Z", false);
        map.put("java.util.concurrent.ForkJoinPool.idlePerActive()I", true);
        map.put("java.util.Collections$CheckedMap.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.TimeUnit$6.toMillis(J)J", false);
        map.put("java.util.Hashtable.<clinit>()V", false);
        map.put("java.util.concurrent.ExecutorCompletionService.poll(JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.Formatter$BigDecimalLayoutForm.values()[Ljava/util/Formatter$BigDecimalLayoutForm;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.replace(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry.setValue(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferQueue$QNode.<init>(Ljava/lang/Object;Z)V", false);
        map.put("java.util.Hashtable$EntrySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.zip.ZipFile.access$1200(J)J", false);
        map.put("java.util.concurrent.ConcurrentHashMap$EntryIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.zip.CheckedOutputStream.getChecksum()Ljava/util/zip/Checksum;", true);
        map.put("java.util.HashMap$EntryIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.EnumMap.access$210(Ljava/util/EnumMap;)I", false);
        map.put("java.util.Collections$SynchronizedSortedSet.<init>(Ljava/util/SortedSet;Ljava/lang/Object;)V", false);
        map.put("java.util.Scanner.match()Ljava/util/regex/MatchResult;", false);
        map.put("java.util.concurrent.atomic.AtomicLong.set(J)V", false);
        map.put("java.util.EnumSet.range(Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;", false);
        map.put("java.util.TreeMap.ceilingEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.Formatter$FormatSpecifier.failConversion(CLjava/lang/Object;)V", false);
        map.put("java.util.logging.LogManager.getLogManager()Ljava/util/logging/LogManager;", false);
        map.put("java.util.TimerTask.cancel()Z", false);
        map.put("java.util.Date.getYear()I", false);
        map.put("java.util.Enumeration.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.TreeMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.Collections.max(Ljava/util/Collection;)Ljava/lang/Object;", false);
        map.put("java.util.logging.FileHandler.close()V", false);
        map.put("java.util.Locale.getDisplayLanguage(Ljava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.Collections$UnmodifiableCollection.isEmpty()Z", false);
        map.put("java.util.TreeMap$DescendingSubMap.subMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.concurrent.SynchronousQueue.peek()Ljava/lang/Object;", true);
        map.put("java.util.StringTokenizer.hasMoreElements()Z", false);
        map.put("java.util.Properties.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.ServiceLoader.access$100(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Throwable;)V", false);
        map.put("java.util.logging.Handler.setFilter(Ljava/util/logging/Filter;)V", false);
        map.put("java.util.TreeMap$NavigableSubMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.ArrayList.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.prefs.WindowsPreferences.toWindowsName(Ljava/lang/String;)[B", true);
        map.put("java.util.concurrent.LinkedBlockingDeque.clear()V", false);
        map.put("java.util.AbstractQueue.remove()Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.regex.PatternSyntaxException.<clinit>()V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.containsAll(Ljava/util/Collection;)Z", true);
        map.put("java.util.regex.Pattern$CharPropertyNames$CloneableProperty.clone()Ljava/lang/Object;", false);
        map.put("java.util.GregorianCalendar.getLastJulianDate()Lsun/util/calendar/BaseCalendar$Date;", false);
        map.put("java.util.jar.Manifest$FastInputStream.available()I", true);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.get()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater.weakCompareAndSet(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.ResourceBundle$LoaderReference.getCacheKey()Ljava/util/ResourceBundle$CacheKey;", true);
        map.put("java.util.logging.ErrorManager.<init>()V", false);
        map.put("java.util.zip.DeflaterOutputStream.finish()V", false);
        map.put("java.util.Stack.empty()Z", false);
        map.put("java.util.concurrent.locks.ReentrantLock$NonfairSync.lock()V", false);
        map.put("java.util.concurrent.atomic.AtomicReference.set(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.ceiling(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.prefs.AbstractPreferences$1.run()Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ThreadPoolExecutor.remove(Ljava/lang/Runnable;)Z", false);
        map.put("java.util.Scanner.cacheResult(Ljava/lang/String;)V", false);
        map.put("java.util.TreeMap$KeySet.isEmpty()Z", false);
        map.put("java.util.concurrent.ThreadLocalRandom$1.initialValue()Ljava/util/concurrent/ThreadLocalRandom;", false);
        map.put("java.util.regex.Matcher.charAt(I)C", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter.<init>()V", false);
        map.put("java.util.NavigableMap.lastEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater.getAndDecrement(Ljava/lang/Object;)I", false);
        map.put("java.util.ArrayDeque.pollFirst()Ljava/lang/Object;", false);
        map.put("java.util.Collections$SetFromMap.hashCode()I", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.setThreadFactory(Ljava/util/concurrent/ThreadFactory;)V", false);
        map.put("java.util.ArrayList.fastRemove(I)V", false);
        map.put("java.util.Formatter$FormatSpecifier$BigDecimalLayout.<init>(Ljava/util/Formatter$FormatSpecifier;Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;)V", false);
        map.put("java.util.logging.Level$KnownLevel.<init>(Ljava/util/logging/Level;)V", false);
        map.put("java.util.prefs.Base64.<clinit>()V", false);
        map.put("java.util.NavigableMap.tailMap(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.zip.ZipFile.<init>(Ljava/io/File;)V", false);
        map.put("java.util.SimpleTimeZone.getID()Ljava/lang/String;", false);
        map.put("java.util.concurrent.Phaser.arriveAndAwaitAdvance()I", false);
        map.put("java.util.Collections$ReverseComparator2.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.tailSet(Ljava/lang/Object;)Ljava/util/NavigableSet;", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.setState(I)V", false);
        map.put("java.util.zip.ZipFile.access$900(Ljava/util/zip/ZipFile;Ljava/lang/String;J)Ljava/util/zip/ZipEntry;", false);
        map.put("java.util.AbstractCollection.toString()Ljava/lang/String;", false);
        map.put("java.util.zip.Adler32$1.update(Ljava/util/zip/Adler32;Ljava/nio/ByteBuffer;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(Z)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.hasNext()Z", true);
        map.put("java.util.logging.LogManager.doSetParent(Ljava/util/logging/Logger;Ljava/util/logging/Logger;)V", false);
        map.put("java.util.Arrays.binarySearch0([CIIC)I", true);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.isWriteLocked()Z", true);
        map.put("java.util.concurrent.SynchronousQueue.toArray()[Ljava/lang/Object;", true);
        map.put("java.util.jar.JarVerifier.setEagerValidation(Z)V", false);
        map.put("java.util.prefs.PreferenceChangeEvent.getSource()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.awaitTermination(JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.Collections.emptyIterator()Ljava/util/Iterator;", true);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.tryAcquire(I)Z", false);
        map.put("java.util.regex.Pattern$SliceU.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.zip.Inflater.end()V", false);
        map.put("java.util.concurrent.ForkJoinTask.clearExceptionalCompletion()V", false);
        map.put("java.util.HashMap.values()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.ConcurrentHashMap$WriteThroughEntry.setValue(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.jar.JarInputStream.<init>(Ljava/io/InputStream;)V", false);
        map.put("java.util.concurrent.RecursiveAction.<init>()V", true);
        map.put("java.util.jar.JarVerifier$VerifierCodeSource.<init>(Ljava/lang/Object;Ljava/net/URL;[Ljava/security/cert/Certificate;)V", false);
        map.put("java.util.Collections$CheckedCollection.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.XMLUtils$Resolver.<init>()V", true);
        map.put("java.util.WeakHashMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.element()Ljava/lang/Object;", false);
        map.put("java.util.AbstractList.toString()Ljava/lang/String;", false);
        map.put("java.util.JumboEnumSet.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.WeakHashMap$EntrySet.size()I", false);
        map.put("java.util.PriorityQueue.<init>(I)V", false);
        map.put("java.util.Arrays.binarySearch([JJ)I", true);
        map.put("java.util.logging.MemoryHandler.push()V", false);
        map.put("java.util.regex.UnicodeProp$18.is(I)Z", false);
        map.put("java.util.WeakHashMap.maskNull(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.SubList$1.nextIndex()I", true);
        map.put("java.util.jar.Attributes.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.isHeldByCurrentThread()Z", false);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapEntryIterator.nextEntry()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.jar.JarEntry.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ForkJoinTask.getSurplusQueuedTaskCount()I", true);
        map.put("java.util.Collections$CheckedSet.<init>(Ljava/util/Set;Ljava/lang/Class;)V", false);
        map.put("java.util.Formatter$FormatSpecifier.print(Ljava/math/BigDecimal;Ljava/util/Locale;)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.getQueuedThreads()Ljava/util/Collection;", false);
        map.put("java.util.PriorityQueue.access$400(Ljava/util/PriorityQueue;I)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.remainingCapacity()I", false);
        map.put("java.util.Scanner.nextByte()B", false);
        map.put("java.util.LinkedList.listIterator()Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.linkLast(Ljava/util/concurrent/LinkedBlockingDeque$Node;)Z", false);
        map.put("java.util.Hashtable$Enumerator.hasMoreElements()Z", false);
        map.put("java.util.AbstractMap$2$1.<init>(Ljava/util/AbstractMap$2;)V", false);
        map.put("java.util.Collections$CheckedCollection.zeroLengthElementArray()[Ljava/lang/Object;", false);
        map.put("java.util.Arrays$LegacyMergeSort.<clinit>()V", false);
        map.put("java.util.SubList$1.<init>(Ljava/util/SubList;I)V", false);
        map.put("java.util.concurrent.BlockingDeque.put(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock.lockInterruptibly()V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.owns(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)Z", true);
        map.put("java.util.EnumMap$KeyIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.Collections.synchronizedList(Ljava/util/List;)Ljava/util/List;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy.rejectedExecution(Ljava/lang/Runnable;Ljava/util/concurrent/ThreadPoolExecutor;)V", false);
        map.put("java.util.logging.Logger.getParent()Ljava/util/logging/Logger;", true);
        map.put("java.util.zip.Deflater.setDictionary([BII)V", false);
        map.put("java.util.Collections$CheckedList.subList(II)Ljava/util/List;", false);
        map.put("java.util.Collections$EmptyList.listIterator()Ljava/util/ListIterator;", true);
        map.put("java.util.GregorianCalendar.<clinit>()V", false);
        map.put("java.util.ResourceBundle$CacheKey.toString()Ljava/lang/String;", false);
        map.put("java.util.SimpleTimeZone.getTransition(Lsun/util/calendar/BaseCalendar;Lsun/util/calendar/BaseCalendar$Date;IIIIII)J", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.siftDown(ILjava/util/concurrent/RunnableScheduledFuture;)V", false);
        map.put("java.util.EnumMap$EntryIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.<init>(Ljava/util/Map$Entry;)V", false);
        map.put("java.util.ArrayDeque.isEmpty()Z", true);
        map.put("java.util.concurrent.ForkJoinPool.<init>(I)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.regex.Pattern$BitClass.add(II)Ljava/util/regex/Pattern$BitClass;", false);
        map.put("java.util.TimeZone.getOffset(IIIIII)I", false);
        map.put("java.util.ResourceBundle$Control.getNoFallbackControl(Ljava/util/List;)Ljava/util/ResourceBundle$Control;", false);
        map.put("java.util.TreeSet.last()Ljava/lang/Object;", false);
        map.put("java.util.EnumMap$1.toString()Ljava/lang/String;", true);
        map.put("java.util.prefs.Preferences.importPreferences(Ljava/io/InputStream;)V", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.updateCheck(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        map.put("java.util.Scanner.<init>(Ljava/nio/channels/ReadableByteChannel;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.BlockingQueue.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.Semaphore.tryAcquire(IJLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.<init>(Ljava/util/concurrent/ConcurrentSkipListMap;Ljava/lang/Object;ZLjava/lang/Object;ZZ)V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.compareAndSet(III)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeyIterator.advance()V", false);
        map.put("java.util.zip.Inflater.<init>()V", false);
        map.put("java.util.logging.Logger.getLogger(Ljava/lang/String;Ljava/lang/String;)Ljava/util/logging/Logger;", false);
        map.put("java.util.concurrent.atomic.AtomicLong.getAndDecrement()J", false);
        map.put("java.util.EnumMap.isEmpty()Z", false);
        map.put("java.util.TreeMap$PrivateEntryIterator.hasNext()Z", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.buildFromSorted(Ljava/util/SortedMap;)V", false);
        map.put("java.util.regex.Pattern.countChars(Ljava/lang/CharSequence;II)I", true);
        map.put("java.util.TreeMap$Entry.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.prefs.Preferences.putInt(Ljava/lang/String;I)V", false);
        map.put("java.util.regex.Pattern$BitClass.<init>([Z)V", false);
        map.put("java.util.Objects.deepEquals(Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.locks.ReentrantLock.unlock()V", false);
        map.put("java.util.logging.SocketHandler.setFilter(Ljava/util/logging/Filter;)V", false);
        map.put("java.util.HashMap.createEntry(ILjava/lang/Object;Ljava/lang/Object;I)V", false);
        map.put("java.util.Arrays.copyOfRange([DII)[D", false);
        map.put("java.util.UUID.<clinit>()V", false);
        map.put("java.util.zip.ZipFile$ZipFileInputStream.read([BII)I", false);
        map.put("java.util.regex.Pattern$UnixDollar.study(Ljava/util/regex/Pattern$TreeInfo;)Z", true);
        map.put("java.util.HashMap$EntryIterator.nextEntry()Ljava/util/HashMap$Entry;", false);
        map.put("java.util.logging.Logger.addHandler(Ljava/util/logging/Handler;)V", false);
        map.put("java.util.SubList$1.remove()V", false);
        map.put("java.util.Collections$UnmodifiableMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.LinkedList.listIterator(I)Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater.compareAndSet(Ljava/lang/Object;II)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.awaitUntil(Ljava/util/Date;)Z", false);
        map.put("java.util.zip.ZipFile.getEntryBytes(JI)[B", false);
        map.put("java.util.regex.Pattern$End.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.TreeMap.firstKey()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.RecursiveTask.exec()Z", false);
        map.put("java.util.SortedSet.isEmpty()Z", false);
        map.put("java.util.regex.Pattern$Bound.check(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)I", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue$Node.<clinit>()V", false);
        map.put("java.util.GregorianCalendar.yearLength(I)I", false);
        map.put("java.util.concurrent.ThreadLocalRandom.nextDouble(D)D", false);
        map.put("java.util.Arrays$ArrayList.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.Phaser.getArrivedParties()I", true);
        map.put("java.util.ArrayDeque.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.Calendar.isPartiallyNormalized()Z", true);
        map.put("java.util.Observable.clearChanged()V", false);
        map.put("java.util.prefs.WindowsPreferences.openKey(I[BII)I", false);
        map.put("java.util.Map.entrySet()Ljava/util/Set;", false);
        map.put("java.util.regex.Pattern$SliceIS.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.prefs.AbstractPreferences$NodeAddedEvent.<init>(Ljava/util/prefs/AbstractPreferences;Ljava/util/prefs/Preferences;Ljava/util/prefs/Preferences;)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.<init>(Ljava/util/concurrent/locks/ReentrantReadWriteLock;)V", false);
        map.put("java.util.concurrent.Phaser.releaseWaiters(I)V", false);
        map.put("java.util.Collections$ReverseComparator2.compare(Ljava/lang/Object;Ljava/lang/Object;)I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.clone()Ljava/util/concurrent/ConcurrentSkipListMap;", false);
        map.put("java.util.prefs.BackingStoreException.<init>(Ljava/lang/Throwable;)V", false);
        map.put("java.util.Scanner.hasNextInt()Z", false);
        map.put("java.util.logging.LoggingProxyImpl.parseLevel(Ljava/lang/String;)Ljava/lang/Object;", false);
        map.put("java.util.IdentityHashMap$EntrySet.size()I", true);
        map.put("java.util.Hashtable.elements()Ljava/util/Enumeration;", false);
        map.put("java.util.logging.Handler.publish(Ljava/util/logging/LogRecord;)V", false);
        map.put("java.util.Collections$CheckedMap.hashCode()I", false);
        map.put("java.util.zip.ZipFile.getEntryCSize(J)J", false);
        map.put("java.util.ResourceBundle$CacheKey.setName(Ljava/lang/String;)Ljava/util/ResourceBundle$CacheKey;", false);
        map.put("java.util.Collections$1.hasNext()Z", true);
        map.put("java.util.JapaneseImperialCalendar.getFirstDayOfWeek()I", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(Ljava/lang/Object;)I", true);
        map.put("java.util.logging.Logger.log(Ljava/util/logging/LogRecord;)V", true);
        map.put("java.util.HashMap$EntryIterator.<init>(Ljava/util/HashMap;)V", false);
        map.put("java.util.Formatter$FormatSpecifier.index()I", true);
        map.put("java.util.Collections$EmptyMap.entrySet()Ljava/util/Set;", true);
        map.put("java.util.prefs.AbstractPreferences.enqueueNodeRemovedEvent(Ljava/util/prefs/Preferences;)V", false);
        map.put("java.util.concurrent.RecursiveAction.getRawResult()Ljava/lang/Object;", true);
        map.put("java.util.Arrays.binarySearch([CIIC)I", true);
        map.put("java.util.AbstractMap$SimpleEntry.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.SynchronousQueue.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.Executors$PrivilegedCallable.<init>(Ljava/util/concurrent/Callable;)V", false);
        map.put("java.util.Arrays.sort([FII)V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$14.isSatisfiedBy(I)Z", false);
        map.put("java.util.Arrays.fill([JIIJ)V", false);
        map.put("java.util.concurrent.TimeUnit.x(JJJ)J", true);
        map.put("java.util.JumboEnumSet.access$000(Ljava/util/JumboEnumSet;)[J", true);
        map.put("java.util.Timer.purge()I", true);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.isEmpty()Z", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.tryTerminate()V", false);
        map.put("java.util.JapaneseImperialCalendar.complete()V", false);
        map.put("java.util.TreeMap$KeySet.subSet(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.transferForSignal(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)Z", false);
        map.put("java.util.AbstractMap.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.Deque.getFirst()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ArrayBlockingQueue$Itr.hasNext()Z", true);
        map.put("java.util.Scanner.getCompleteTokenInBuffer(Ljava/util/regex/Pattern;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubList.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.Collection.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Calendar$1.run()Lsun/util/calendar/ZoneInfo;", false);
        map.put("java.util.PriorityQueue.size()I", true);
        map.put("java.util.concurrent.Executors.newScheduledThreadPool(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;", false);
        map.put("java.util.Map.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.NavigableMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.Locale.getISOLanguages()[Ljava/lang/String;", false);
        map.put("java.util.Collections$CopiesList.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.AbstractMap$1.clear()V", false);
        map.put("java.util.HashMap$Entry.hashCode()I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.TreeSet.subSet(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$20.isSatisfiedBy(I)Z", false);
        map.put("java.util.EnumMap$ValueIterator.<init>(Ljava/util/EnumMap;Ljava/util/EnumMap$1;)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.zip.ZipFile.access$1300(Ljava/util/zip/ZipFile;)V", false);
        map.put("java.util.Arrays$ArrayList.get(I)Ljava/lang/Object;", true);
        map.put("java.util.LinkedList.peekFirst()Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$HeadIndex.<init>(Ljava/util/concurrent/ConcurrentSkipListMap$Node;Ljava/util/concurrent/ConcurrentSkipListMap$Index;Ljava/util/concurrent/ConcurrentSkipListMap$Index;I)V", false);
        map.put("java.util.TreeSet.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.TreeMap$Entry.getKey()Ljava/lang/Object;", true);
        map.put("java.util.regex.Pattern.nextEscaped()I", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.doSignalAll(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)V", false);
        map.put("java.util.HashMap.containsNullValue()Z", true);
        map.put("java.util.concurrent.LinkedBlockingQueue.clear()V", false);
        map.put("java.util.Collections$SingletonMap.containsKey(Ljava/lang/Object;)Z", true);
        map.put("java.util.LinkedList.checkElementIndex(I)V", false);
        map.put("java.util.Formatter$FormatSpecifier.printFloat(Ljava/lang/Object;Ljava/util/Locale;)V", false);
        map.put("java.util.zip.ZipOutputStream.setMethod(I)V", false);
        map.put("java.util.regex.Pattern$GroupCurly.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.zip.ZipFile.getEntryCrc(J)J", false);
        map.put("java.util.concurrent.ForkJoinTask.invoke()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedTransferQueue$Node.casNext(Ljava/util/concurrent/LinkedTransferQueue$Node;Ljava/util/concurrent/LinkedTransferQueue$Node;)Z", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.concurrent.Executors$PrivilegedCallable.call()Ljava/lang/Object;", true);
        map.put("java.util.concurrent.FutureTask$Sync.compareAndSetState(II)Z", false);
        map.put("java.util.TreeSet.descendingIterator()Ljava/util/Iterator;", false);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegQueryInfoKey1(I)[I", false);
        map.put("java.util.TimSort.pushRun(II)V", false);
        map.put("java.util.jar.Pack200.newUnpacker()Ljava/util/jar/Pack200$Unpacker;", false);
        map.put("java.util.Scanner.hasTokenInBuffer()Z", false);
        map.put("java.util.Date.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.Currency.getDisplayName(Ljava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.TreeMap.exportEntry(Ljava/util/TreeMap$Entry;)Ljava/util/Map$Entry;", false);
        map.put("java.util.logging.Logger.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.clear()V", false);
        map.put("java.util.LinkedHashMap$KeyIterator.<init>(Ljava/util/LinkedHashMap;)V", false);
        map.put("java.util.ResourceBundle.getBundle(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;", false);
        map.put("java.util.concurrent.TimeUnit.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory.<init>()V", true);
        map.put("java.util.jar.Attributes$Name.isValid(C)Z", true);
        map.put("java.util.WeakHashMap$HashIterator.nextEntry()Ljava/util/WeakHashMap$Entry;", false);
        map.put("java.util.TimeZone.clone()Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipOutputStream.ensureOpen()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.descendingMap()Ljava/util/NavigableMap;", false);
        map.put("java.util.Scanner.revertState()V", false);
        map.put("java.util.TreeSet.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ForkJoinTask.isCancelled()Z", true);
        map.put("java.util.EnumSet$SerializationProxy.readResolve()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.lock()V", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferQueue$QNode.isOffList()Z", true);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapKeyIterator.remove()V", false);
        map.put("java.util.Collections$AsLIFOQueue.size()I", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireNanos(IJ)Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.getWaitQueueLength(Ljava/util/concurrent/locks/Condition;)I", false);
        map.put("java.util.concurrent.atomic.AtomicMarkableReference.objectFieldOffset(Lsun/misc/Unsafe;Ljava/lang/String;Ljava/lang/Class;)J", false);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegEnumValue(III)[B", false);
        map.put("java.util.Arrays$ArrayList.indexOf(Ljava/lang/Object;)I", true);
        map.put("java.util.TimeZone$DisplayNames.<init>()V", true);
        map.put("java.util.concurrent.atomic.AtomicStampedReference.<init>(Ljava/lang/Object;I)V", false);
        map.put("java.util.concurrent.Executors$DelegatedExecutorService.shutdownNow()Ljava/util/List;", false);
        map.put("java.util.Dictionary.elements()Ljava/util/Enumeration;", false);
        map.put("java.util.SimpleTimeZone.getDSTSavings()I", true);
        map.put("java.util.concurrent.PriorityBlockingQueue.clear()V", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.byteOffset(I)J", true);
        map.put("java.util.concurrent.ForkJoinTask.getThrowableException()Ljava/lang/Throwable;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.descendingSet()Ljava/util/NavigableSet;", false);
        map.put("java.util.Deque.push(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.pollLast(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(I)V", false);
        map.put("java.util.Calendar.complete()V", false);
        map.put("java.util.concurrent.atomic.AtomicMarkableReference.<clinit>()V", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.remainingCapacity()I", false);
        map.put("java.util.concurrent.Executors$PrivilegedThreadFactory.access$300(Ljava/util/concurrent/Executors$PrivilegedThreadFactory;)Ljava/lang/ClassLoader;", true);
        map.put("java.util.Deque.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.regex.Pattern$CharProperty$1.isSatisfiedBy(I)Z", false);
        map.put("java.util.JapaneseImperialCalendar.getDisplayNames(IILjava/util/Locale;)Ljava/util/Map;", false);
        map.put("java.util.JapaneseImperialCalendar.isLenient()Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.Collections$UnmodifiableList$1.set(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.poll()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.<init>(ILjava/util/concurrent/RejectedExecutionHandler;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.getLast()Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$KeySet.first()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.randomLevel()I", false);
        map.put("java.util.ResourceBundle.clearCache(Ljava/lang/ClassLoader;)V", false);
        map.put("java.util.zip.ZipFile.read(JJJ[BII)I", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.screenNullResult(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isHeldExclusively()Z", false);
        map.put("java.util.IllegalFormatWidthException.getWidth()I", true);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater.addAndGet(Ljava/lang/Object;I)I", false);
        map.put("java.util.Locale.createConstant(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Locale;", false);
        map.put("java.util.Locale.getISO2Table(Ljava/lang/String;)[Ljava/lang/String;", false);
        map.put("java.util.Formatter$FormatSpecifier.print(Ljava/lang/Object;Ljava/util/Locale;)V", false);
        map.put("java.util.Arrays.copyOf([SI)[S", false);
        map.put("java.util.jar.JavaUtilJarAccessImpl.<init>()V", true);
        map.put("java.util.concurrent.PriorityBlockingQueue.offer(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.UUID.randomUUID()Ljava/util/UUID;", false);
        map.put("java.util.TreeMap$NavigableSubMap.firstEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.PriorityQueue.access$100(Ljava/util/PriorityQueue;)I", true);
        map.put("java.util.regex.Pattern.accept(ILjava/lang/String;)V", false);
        map.put("java.util.regex.Matcher.useTransparentBounds(Z)Ljava/util/regex/Matcher;", false);
        map.put("java.util.Collection.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Stack.search(Ljava/lang/Object;)I", false);
        map.put("java.util.Enumeration.hasMoreElements()Z", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.linkFirst(Ljava/lang/Object;)V", false);
        map.put("java.util.regex.Pattern$Node.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.SortedMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.GregorianCalendar.getCalendarDate(J)Lsun/util/calendar/BaseCalendar$Date;", false);
        map.put("java.util.JumboEnumSet.clone()Ljava/util/EnumSet;", false);
        map.put("java.util.prefs.XmlSupport.exportMap(Ljava/io/OutputStream;Ljava/util/Map;)V", false);
        map.put("java.util.concurrent.TimeUnit$5.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Node.getValidValue()Ljava/lang/Object;", true);
        map.put("java.util.Collections$EmptySet.<init>()V", true);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.isQueued(Ljava/lang/Thread;)Z", false);
        map.put("java.util.Date.<init>()V", false);
        map.put("java.util.Calendar.getMinimum(I)I", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.predecessor()Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;", false);
        map.put("java.util.HashSet.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.logging.StreamHandler.setEncoding(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$EntrySet.size()I", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$13.isSatisfiedBy(I)Z", false);
        map.put("java.util.Map.isEmpty()Z", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.fullyUnlock()V", false);
        map.put("java.util.TreeMap.getFloorEntry(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.<init>(ILjava/util/concurrent/ThreadFactory;)V", false);
        map.put("java.util.PropertyResourceBundle.handleGetObject(Ljava/lang/String;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.compareAndSet(Ljava/lang/Object;II)Z", false);
        map.put("java.util.DualPivotQuicksort.sort([BII)V", true);
        map.put("java.util.concurrent.LinkedBlockingDeque.removeFirstOccurrence(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next()Ljava/util/Map$Entry;", false);
        map.put("java.util.TreeMap$EntrySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.Formatter.locale()Ljava/util/Locale;", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.get(I)J", false);
        map.put("java.util.concurrent.BrokenBarrierException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.Deque.peekFirst()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ForkJoinPool.work(Ljava/util/concurrent/ForkJoinWorkerThread;)V", false);
        map.put("java.util.EnumSet.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Collections.synchronizedSet(Ljava/util/Set;Ljava/lang/Object;)Ljava/util/Set;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubList.get(I)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.tailMap(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.await()V", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.lowerKey(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.TimeUnit.toSeconds(J)J", false);
        map.put("java.util.regex.Pattern$Dollar.study(Ljava/util/regex/Pattern$TreeInfo;)Z", true);
        map.put("java.util.concurrent.AbstractExecutorService.<clinit>()V", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Values.isEmpty()Z", false);
        map.put("java.util.Collections$EmptySet.isEmpty()Z", true);
        map.put("java.util.Collections$AsLIFOQueue.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Arrays.deepToString([Ljava/lang/Object;)Ljava/lang/String;", false);
        map.put("java.util.ArrayDeque.peekFirst()Ljava/lang/Object;", true);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater.decrementAndGet(Ljava/lang/Object;)I", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator.previousIndex()I", false);
        map.put("java.util.Collections$AsLIFOQueue.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections$CheckedMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipError.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.Executors.callable(Ljava/security/PrivilegedExceptionAction;)Ljava/util/concurrent/Callable;", false);
        map.put("java.util.zip.ZipCoder.<init>(Ljava/nio/charset/Charset;)V", false);
        map.put("java.util.Calendar.after(Ljava/lang/Object;)Z", false);
        map.put("java.util.DualPivotQuicksort.sort([SIIZ)V", true);
        map.put("java.util.regex.ASCII.getType(I)I", true);
        map.put("java.util.concurrent.Exchanger$Slot.compareAndSet(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.JapaneseImperialCalendar.roll(II)V", false);
        map.put("java.util.logging.LoggingProxyImpl.getProperty(Ljava/lang/String;)Ljava/lang/String;", true);
        map.put("java.util.logging.FileHandler$MeteredStream.write(I)V", false);
        map.put("java.util.prefs.AbstractPreferences.name()Ljava/lang/String;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$EntrySet.isEmpty()Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.reportInterruptAfterWait(I)V", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.toString()Ljava/lang/String;", false);
        map.put("java.util.ComparableTimSort.mergeForceCollapse()V", false);
        map.put("java.util.TreeMap.key(Ljava/util/TreeMap$Entry;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.ReentrantLock$NonfairSync.acquire(I)V", false);
        map.put("java.util.zip.Deflater.finish()V", false);
        map.put("java.util.concurrent.ConcurrentHashMap.hash(Ljava/lang/Object;)I", false);
        map.put("java.util.IdentityHashMap$EntryIterator.next()Ljava/util/Map$Entry;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.<init>(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/RejectedExecutionHandler;)V", false);
        map.put("java.util.Hashtable$Enumerator.hasNext()Z", false);
        map.put("java.util.jar.JarEntry.getCertificates()[Ljava/security/cert/Certificate;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.acquireInterruptibly(I)V", false);
        map.put("java.util.prefs.AbstractPreferences.getChild(Ljava/lang/String;)Ljava/util/prefs/AbstractPreferences;", false);
        map.put("java.util.Collections$SynchronizedMap.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.logging.Logger.findResourceBundle(Ljava/lang/String;Z)Ljava/util/ResourceBundle;", false);
        map.put("java.util.AbstractSequentialList.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.jar.JarVerifier$3.hasMoreElements()Z", true);
        map.put("java.util.concurrent.Semaphore$Sync.drainPermits()I", false);
        map.put("java.util.Calendar$1.<init>(Ljava/util/Calendar;Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.prefs.WindowsPreferences.byteArrayToString([B)Ljava/lang/String;", false);
        map.put("java.util.HashMap$Values.clear()V", false);
        map.put("java.util.Collections$UnmodifiableList.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.jar.Manifest.<init>(Ljava/util/jar/Manifest;)V", false);
        map.put("java.util.Collection.isEmpty()Z", false);
        map.put("java.util.logging.SimpleFormatter.<init>()V", false);
        map.put("java.util.AbstractList$Itr.hasNext()Z", false);
        map.put("java.util.concurrent.CancellationException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.Currency.toString()Ljava/lang/String;", true);
        map.put("java.util.Hashtable.putAll(Ljava/util/Map;)V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$12.<init>()V", false);
        map.put("java.util.Collections$SingletonMap.values()Ljava/util/Collection;", false);
        map.put("java.util.Collections$EmptyList.isEmpty()Z", true);
        map.put("java.util.Collections$SingletonMap.containsValue(Ljava/lang/Object;)Z", true);
        map.put("java.util.Set.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.atomic.AtomicLong.<clinit>()V", false);
        map.put("java.util.Collections.binarySearch(Ljava/util/List;Ljava/lang/Object;Ljava/util/Comparator;)I", false);
        map.put("java.util.ResourceBundle$NoFallbackControl.access$1000()Ljava/util/ResourceBundle$Control;", true);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.pollFirst()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$StartS.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.TreeMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.jar.JarVerifier$1.hasMoreElements()Z", false);
        map.put("java.util.Vector$Itr.<init>(Ljava/util/Vector;Ljava/util/Vector$1;)V", false);
        map.put("java.util.Collections.emptyList()Ljava/util/List;", true);
        map.put("java.util.logging.FileHandler.reportError(Ljava/lang/String;Ljava/lang/Exception;I)V", false);
        map.put("java.util.concurrent.FutureTask.setException(Ljava/lang/Throwable;)V", false);
        map.put("java.util.Formatter.ensureOpen()V", false);
        map.put("java.util.UUID.<init>([B)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.subMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;", false);
        map.put("java.util.Collections$UnmodifiableSortedMap.<init>(Ljava/util/SortedMap;)V", false);
        map.put("java.util.Scanner.makeReadable(Ljava/nio/channels/ReadableByteChannel;)Ljava/lang/Readable;", false);
        map.put("java.util.regex.Pattern$Conditional.<init>(Ljava/util/regex/Pattern$Node;Ljava/util/regex/Pattern$Node;Ljava/util/regex/Pattern$Node;)V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.getTaskCount()J", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.firstKey()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.Condition.awaitUntil(Ljava/util/Date;)Z", false);
        map.put("java.util.Formatter.checkText(Ljava/lang/String;II)V", false);
        map.put("java.util.RegularEnumSet$EnumSetIterator.next()Ljava/lang/Enum;", false);
        map.put("java.util.Locale$LocaleKey.<init>(Lsun/util/locale/BaseLocale;Lsun/util/locale/LocaleExtensions;Ljava/util/Locale$1;)V", false);
        map.put("java.util.regex.Pattern$Ques.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.TreeMap.getLowerEntry(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.zip.DeflaterInputStream.read()I", false);
        map.put("java.util.concurrent.DelayQueue.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.element()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.reExecutePeriodic(Ljava/util/concurrent/RunnableScheduledFuture;)V", false);
        map.put("java.util.concurrent.ForkJoinPool.signalWork()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.valueIterator()Ljava/util/Iterator;", false);
        map.put("java.util.logging.FileHandler.publish(Ljava/util/logging/LogRecord;)V", false);
        map.put("java.util.TimSort.minRunLength(I)I", false);
        map.put("java.util.concurrent.BlockingQueue.poll()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.isShutdown()Z", true);
        map.put("java.util.EnumMap.<init>(Ljava/util/Map;)V", false);
        map.put("java.util.HashSet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.IllformedLocaleException.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.ArrayList.elementData(I)Ljava/lang/Object;", true);
        map.put("java.util.Collections$CheckedList.get(I)Ljava/lang/Object;", false);
        map.put("java.util.AbstractSequentialList.add(ILjava/lang/Object;)V", false);
        map.put("java.util.TimSort.mergeHi(IIII)V", false);
        map.put("java.util.Collections.shuffle(Ljava/util/List;Ljava/util/Random;)V", false);
        map.put("java.util.ResourceBundle$CacheKey.setFormat(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.zip.ZipOutputStream.deflate()V", false);
        map.put("java.util.Stack.isEmpty()Z", false);
        map.put("java.util.Hashtable.access$500(Ljava/util/Hashtable;Ljava/lang/Object;)I", false);
        map.put("java.util.AbstractSet.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.LinkedList$Node.<init>(Ljava/util/LinkedList$Node;Ljava/lang/Object;Ljava/util/LinkedList$Node;)V", false);
        map.put("java.util.regex.Pattern$LazyLoop.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.WeakHashMap$Values.<init>(Ljava/util/WeakHashMap;)V", false);
        map.put("java.util.RegularEnumSet.addAll()V", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.ensureProtectedAccess(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.setHeadAndPropagate(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;I)V", false);
        map.put("java.util.concurrent.PriorityBlockingQueue$Itr.remove()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.getNearKey(Ljava/lang/Object;I)Ljava/lang/Object;", true);
        map.put("java.util.prefs.Preferences.exportSubtree(Ljava/io/OutputStream;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$ValueIterator.advance()V", false);
        map.put("java.util.Locale$Cache.createObject(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.EnumMap$EntrySet.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.access$000()Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.submit(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.tryTerminate()V", false);
        map.put("java.util.WeakHashMap$Values.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry.hashCode()I", false);
        map.put("java.util.concurrent.Semaphore$Sync.setState(I)V", false);
        map.put("java.util.logging.Logging.<init>()V", true);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.weakCompareAndSet(ILjava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Collections.synchronizedSortedMap(Ljava/util/SortedMap;)Ljava/util/SortedMap;", false);
        map.put("java.util.TreeMap$KeySet.tailSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.prefs.Preferences$2.run()Ljava/util/prefs/PreferencesFactory;", false);
        map.put("java.util.Collections$SetFromMap.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.keySet()Ljava/util/NavigableSet;", false);
        map.put("java.util.ResourceBundle$Control$CandidateListCache.<init>()V", false);
        map.put("java.util.concurrent.ThreadLocalRandom.nextLong(JJ)J", false);
        map.put("java.util.Collections$UnmodifiableList$1.remove()V", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.put(Ljava/lang/Object;)V", false);
        map.put("java.util.IdentityHashMap$Values.size()I", true);
        map.put("java.util.SortedMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.set(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.Exchanger.exchange(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubList.set(ILjava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.UnknownFormatConversionException.getConversion()Ljava/lang/String;", true);
        map.put("java.util.Formatter$BigDecimalLayoutForm.<clinit>()V", false);
        map.put("java.util.Collections$CheckedCollection.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.logging.Logger.log(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V", true);
        map.put("java.util.concurrent.TimeUnit$7.toSeconds(J)J", false);
        map.put("java.util.ArrayList$ListItr.hasPrevious()Z", true);
        map.put("java.util.logging.MemoryHandler.configure()V", false);
        map.put("java.util.AbstractMap$SimpleImmutableEntry.hashCode()I", false);
        map.put("java.util.concurrent.Executors$1.call()Ljava/lang/Object;", false);
        map.put("java.util.Timer.<init>(Z)V", false);
        map.put("java.util.logging.LogManager$LoggerContext$1.run()Ljava/lang/Void;", false);
        map.put("java.util.regex.ASCII.isWord(I)Z", true);
        map.put("java.util.Deque.element()Ljava/lang/Object;", false);
        map.put("java.util.RegularEnumSet.access$074(Ljava/util/RegularEnumSet;J)J", false);
        map.put("java.util.ResourceBundle$CacheKey.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.Locale.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.TreeMap.values()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.drainTo(Ljava/util/Collection;I)I", false);
        map.put("java.util.Arrays.legacyMergeSort([Ljava/lang/Object;IILjava/util/Comparator;)V", false);
        map.put("java.util.concurrent.Executors$DelegatedScheduledExecutorService.schedule(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", false);
        map.put("java.util.logging.Logger$LoggerHelper$1.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferStack.snode(Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;Ljava/lang/Object;Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;I)Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;", false);
        map.put("java.util.IdentityHashMap$EntrySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.DelayQueue$Itr.hasNext()Z", true);
        map.put("java.util.Collections$SetFromMap.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.shouldParkAfterFailedAcquire(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)Z", false);
        map.put("java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()Ljava/lang/Void;", false);
        map.put("java.util.Formatter.<init>(Ljava/lang/Appendable;)V", false);
        map.put("java.util.regex.ASCII.isSpace(I)Z", true);
        map.put("java.util.jar.Manifest.<init>()V", false);
        map.put("java.util.concurrent.Phaser$QNode.<init>(Ljava/util/concurrent/Phaser;IZZJ)V", false);
        map.put("java.util.concurrent.ForkJoinTask.getQueuedTaskCount()I", true);
        map.put("java.util.prefs.Preferences.putBoolean(Ljava/lang/String;Z)V", false);
        map.put("java.util.regex.Pattern.caseInsensitiveRangeFor(II)Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.Collections$UnmodifiableCollection$1.hasNext()Z", false);
        map.put("java.util.TimeZone.setID(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.Phaser.getRoot()Ljava/util/concurrent/Phaser;", true);
        map.put("java.util.regex.Pattern$CharPropertyNames$18.isSatisfiedBy(I)Z", false);
        map.put("java.util.IdentityHashMap$EntrySet.<init>(Ljava/util/IdentityHashMap;Ljava/util/IdentityHashMap$1;)V", false);
        map.put("java.util.Collections$EmptyMap.containsKey(Ljava/lang/Object;)Z", true);
        map.put("java.util.TreeSet.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.SubList.rangeCheckForAdd(I)V", false);
        map.put("java.util.AbstractList.lastIndexOf(Ljava/lang/Object;)I", false);
        map.put("java.util.LinkedList.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.Formatter$FormatString.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.getAndSet(I)I", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Values.size()I", false);
        map.put("java.util.concurrent.TimeUnit$3.toNanos(J)J", false);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapIterator.removeAscending()V", false);
        map.put("java.util.Collections$CheckedSortedMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.Formatter$FormatSpecifier.printString(Ljava/lang/Object;Ljava/util/Locale;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.headMap(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;", false);
        map.put("java.util.IdentityHashMap$EntryIterator$Entry.access$800(Ljava/util/IdentityHashMap$EntryIterator$Entry;)I", true);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater.weakCompareAndSet(Ljava/lang/Object;JJ)Z", false);
        map.put("java.util.ServiceLoader.load(Ljava/lang/Class;Ljava/lang/ClassLoader;)Ljava/util/ServiceLoader;", false);
        map.put("java.util.Date.getJulianCalendar()Lsun/util/calendar/BaseCalendar;", false);
        map.put("java.util.Date.setTime(J)V", false);
        map.put("java.util.concurrent.Phaser.badArrive(J)Ljava/lang/String;", false);
        map.put("java.util.LinkedHashMap.addEntry(ILjava/lang/Object;Ljava/lang/Object;I)V", false);
        map.put("java.util.concurrent.BlockingDeque.take()Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipFile.access$200(Ljava/util/zip/ZipFile;)V", false);
        map.put("java.util.regex.UnicodeProp$4.is(I)Z", true);
        map.put("java.util.Deque.pollLast()Ljava/lang/Object;", false);
        map.put("java.util.SimpleTimeZone.getOffset(J)I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.comparator()Ljava/util/Comparator;", true);
        map.put("java.util.zip.ZipCoder.encoder()Ljava/nio/charset/CharsetEncoder;", false);
        map.put("java.util.concurrent.LinkedTransferQueue.drainTo(Ljava/util/Collection;)I", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Segment.tryLock()Z", false);
        map.put("java.util.LinkedList$ListItr.add(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.size()I", true);
        map.put("java.util.jar.JarVerifier$4.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Phaser.reconcileState()J", false);
        map.put("java.util.concurrent.Executors$DelegatedExecutorService.submit(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.concurrent.Phaser.<init>()V", false);
        map.put("java.util.logging.Level.<clinit>()V", false);
        map.put("java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.isShared()Z", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap.isEmpty()Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.tryRelease(I)Z", false);
        map.put("java.util.regex.Pattern$Branch.<init>(Ljava/util/regex/Pattern$Node;Ljava/util/regex/Pattern$Node;Ljava/util/regex/Pattern$Node;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentHashMap.entryAt([Ljava/util/concurrent/ConcurrentHashMap$HashEntry;I)Ljava/util/concurrent/ConcurrentHashMap$HashEntry;", false);
        map.put("java.util.Scanner.useTypeCache()V", false);
        map.put("java.util.zip.ZipEntry.setComment(Ljava/lang/String;)V", false);
        map.put("java.util.regex.Pattern$SliceUS.<init>([I)V", false);
        map.put("java.util.AbstractMap$SimpleEntry.getValue()Ljava/lang/Object;", true);
        map.put("java.util.Collections$UnmodifiableList$1.next()Ljava/lang/Object;", false);
        map.put("java.util.ServiceConfigurationError.printStackTrace()V", false);
        map.put("java.util.WeakHashMap$ValueIterator.<init>(Ljava/util/WeakHashMap;Ljava/util/WeakHashMap$1;)V", false);
        map.put("java.util.concurrent.atomic.AtomicStampedReference$Pair.<init>(Ljava/lang/Object;I)V", false);
        map.put("java.util.logging.LogManager$2.run()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque$DescendingItr.<init>(Ljava/util/concurrent/LinkedBlockingDeque;Ljava/util/concurrent/LinkedBlockingDeque$1;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.getQueue()Ljava/util/concurrent/BlockingQueue;", true);
        map.put("java.util.Collections$SynchronizedRandomAccessList.<init>(Ljava/util/List;Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.Semaphore$NonfairSync.<init>(I)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$NavigableSubMap.navigableKeySet()Ljava/util/NavigableSet;", false);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapKeyIterator.<init>(Ljava/util/TreeMap$NavigableSubMap;Ljava/util/TreeMap$Entry;Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.SubList.access$000(Ljava/util/SubList;)I", true);
        map.put("java.util.Timer.<init>()V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node.predecessor()Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.localHelpJoinTask(Ljava/util/concurrent/ForkJoinTask;)Z", false);
        map.put("java.util.jar.Manifest.make72Safe(Ljava/lang/StringBuffer;)V", false);
        map.put("java.util.Arrays.sort([CII)V", true);
        map.put("java.util.EventObject.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.zip.Inflater.reset(J)V", false);
        map.put("java.util.logging.Logger$LoggerHelper$1.run()Ljava/lang/String;", true);
        map.put("java.util.TreeMap.<init>()V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.getQueuedThreads()Ljava/util/Collection;", false);
        map.put("java.util.Hashtable$EntrySet.size()I", true);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(I)V", false);
        map.put("java.util.ArrayList.batchRemove(Ljava/util/Collection;Z)Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.toString()Ljava/lang/String;", false);
        map.put("java.util.Collections$UnmodifiableMap.clear()V", false);
        map.put("java.util.concurrent.ForkJoinTask$ExceptionNode.get()Ljava/lang/Object;", false);
        map.put("java.util.jar.JarEntry.isDirectory()Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.readerShouldBlock()Z", false);
        map.put("java.util.PriorityQueue.<init>(Ljava/util/PriorityQueue;)V", false);
        map.put("java.util.zip.CheckedInputStream.read([BII)I", false);
        map.put("java.util.zip.ZipFile.access$1000(JJ)V", false);
        map.put("java.util.zip.Adler32.<init>()V", false);
        map.put("java.util.TreeMap$EntrySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.regex.Pattern$SliceI.<init>([I)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(Ljava/util/concurrent/Callable;Ljava/util/concurrent/RunnableScheduledFuture;)Ljava/util/concurrent/RunnableScheduledFuture;", true);
        map.put("java.util.Calendar.set(IIIIII)V", false);
        map.put("java.util.LinkedList$DescendingIterator.<init>(Ljava/util/LinkedList;Ljava/util/LinkedList$1;)V", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.Collections$SingletonSet.<init>(Ljava/lang/Object;)V", false);
        map.put("java.util.Collections$EmptyListIterator.set(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.CancellationException.<init>()V", false);
        map.put("java.util.JumboEnumSet.size()I", true);
        map.put("java.util.Collections$SynchronizedSortedMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.TreeMap.higherEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.ResourceBundle$Control$CandidateListCache.getDefaultList(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;", false);
        map.put("java.util.concurrent.BlockingDeque.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.locks.ReentrantLock$FairSync.acquire(I)V", false);
        map.put("java.util.MissingFormatWidthException.getMessage()Ljava/lang/String;", true);
        map.put("java.util.NavigableMap.lowerKey(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.transferAfterCancelledWait(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)Z", false);
        map.put("java.util.GregorianCalendar.<init>(Ljava/util/TimeZone;)V", false);
        map.put("java.util.IdentityHashMap.init(I)V", false);
        map.put("java.util.PropertyPermission.init(I)V", false);
        map.put("java.util.logging.Logger.doSetParent(Ljava/util/logging/Logger;)V", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.getPoolIndex()I", true);
        map.put("java.util.SortedMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.SimpleTimeZone.setStartRule(III)V", false);
        map.put("java.util.Arrays.binarySearch([DD)I", false);
        map.put("java.util.zip.GZIPOutputStream.<init>(Ljava/io/OutputStream;)V", false);
        map.put("java.util.EnumMap.clone()Ljava/lang/Object;", false);
        map.put("java.util.regex.UnicodeProp$15.is(I)Z", false);
        map.put("java.util.concurrent.Exchanger.await(Ljava/util/concurrent/Exchanger$Node;Ljava/util/concurrent/Exchanger$Slot;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.SynchronousQueue.poll()Ljava/lang/Object;", false);
        map.put("java.util.Date.getCalendarDate()Lsun/util/calendar/BaseCalendar$Date;", false);
        map.put("java.util.ResourceBundle.getString(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.<clinit>()V", false);
        map.put("java.util.Collections$CheckedCollection.badElementMsg(Ljava/lang/Object;)Ljava/lang/String;", false);
        map.put("java.util.regex.Pattern$5.<init>(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;)V", false);
        map.put("java.util.Scanner.hasNextShort()Z", false);
        map.put("java.util.Map$Entry.hashCode()I", false);
        map.put("java.util.Properties.putAll(Ljava/util/Map;)V", false);
        map.put("java.util.concurrent.BlockingDeque.remove()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.TimeUnit$7.toHours(J)J", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.DualPivotQuicksort.doSort([SII)V", true);
        map.put("java.util.Date.setMonth(I)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.clone()Ljava/lang/Object;", false);
        map.put("java.util.UUID.version()I", true);
        map.put("java.util.concurrent.atomic.AtomicStampedReference.set(Ljava/lang/Object;I)V", false);
        map.put("java.util.logging.Logger.getEffectiveResourceBundleName()Ljava/lang/String;", true);
        map.put("java.util.regex.Pattern$Single.isSatisfiedBy(I)Z", true);
        map.put("java.util.concurrent.Executors$DefaultThreadFactory.<clinit>()V", false);
        map.put("java.util.WeakHashMap.isEmpty()Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferStack$SNode.isCancelled()Z", true);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(J)J", false);
        map.put("java.util.IdentityHashMap.closeDeletion(I)V", true);
        map.put("java.util.LinkedList$DescendingIterator.remove()V", false);
        map.put("java.util.Date.getTimezoneOffset()I", false);
        map.put("java.util.LinkedHashMap$Entry.recordAccess(Ljava/util/HashMap;)V", false);
        map.put("java.util.concurrent.PriorityBlockingQueue$Itr.hasNext()Z", true);
        map.put("java.util.jar.JavaUtilJarAccessImpl.jarFileHasClassPathAttribute(Ljava/util/jar/JarFile;)Z", false);
        map.put("java.util.jar.JarInputStream.read([B)I", false);
        map.put("java.util.ResourceBundle$Control.getFallbackLocale(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/Locale;", true);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.releaseShared(J)Z", false);
        map.put("java.util.Vector.removeElementAt(I)V", false);
        map.put("java.util.concurrent.ForkJoinTask.isDone()Z", true);
        map.put("java.util.ResourceBundle$Control.getFormats(Ljava/lang/String;)Ljava/util/List;", false);
        map.put("java.util.Locale$Category.<init>(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.TreeMap$NavigableSubMap.absCeiling(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.logging.LogRecord.getThrown()Ljava/lang/Throwable;", true);
        map.put("java.util.prefs.Base64.byteArrayToBase64([B)Ljava/lang/String;", false);
        map.put("java.util.IdentityHashMap.hashCode()I", false);
        map.put("java.util.ConcurrentModificationException.<init>(Ljava/lang/String;Ljava/lang/Throwable;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.isEmpty()Z", false);
        map.put("java.util.Collections$CheckedCollection.isEmpty()Z", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.ceilingKey(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$EntrySet.<init>(Ljava/util/TreeMap;)V", false);
        map.put("java.util.concurrent.FutureTask.isDone()Z", true);
        map.put("java.util.regex.Pattern$BranchConn.<init>()V", false);
        map.put("java.util.jar.JavaUtilJarAccessImpl.getCodeSource(Ljava/util/jar/JarFile;Ljava/net/URL;Ljava/lang/String;)Ljava/security/CodeSource;", false);
        map.put("java.util.UnknownFormatFlagsException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.Locale.getDisplayCountry()Ljava/lang/String;", false);
        map.put("java.util.JapaneseImperialCalendar.getSetStateFields()I", false);
        map.put("java.util.prefs.Preferences.getDouble(Ljava/lang/String;D)D", false);
        map.put("java.util.TimeZone.getDisplayName(ZI)Ljava/lang/String;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasQueuedThreads()Z", true);
        map.put("java.util.Stack.removeElement(Ljava/lang/Object;)Z", false);
        map.put("java.util.AbstractSequentialList.listIterator()Ljava/util/ListIterator;", false);
        map.put("java.util.LinkedHashMap.transfer([Ljava/util/HashMap$Entry;Z)V", false);
        map.put("java.util.concurrent.FutureTask$Sync.acquireSharedInterruptibly(I)V", false);
        map.put("java.util.regex.Pattern$CharProperty.<init>()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.concurrent.ForkJoinPool.isAtLeastTerminating()Z", true);
        map.put("java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory.make()Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.regex.Pattern$Behind.<init>(Ljava/util/regex/Pattern$Node;II)V", false);
        map.put("java.util.EnumSet.complementOf(Ljava/util/EnumSet;)Ljava/util/EnumSet;", false);
        map.put("java.util.Scanner.nextBigInteger(I)Ljava/math/BigInteger;", false);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegEnumKeyEx(III)[B", false);
        map.put("java.util.HashMap.removeEntryForKey(Ljava/lang/Object;)Ljava/util/HashMap$Entry;", false);
        map.put("java.util.EnumMap.access$1200(Ljava/util/EnumMap;Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.batchRemove(Ljava/util/Collection;Z)Z", false);
        map.put("java.util.regex.Pattern$4.<init>()V", false);
        map.put("java.util.LinkedList.isEmpty()Z", false);
        map.put("java.util.logging.Formatter.getHead(Ljava/util/logging/Handler;)Ljava/lang/String;", true);
        map.put("java.util.ResourceBundle$LoaderReference.<init>(Ljava/lang/ClassLoader;Ljava/lang/ref/ReferenceQueue;Ljava/util/ResourceBundle$CacheKey;)V", false);
        map.put("java.util.BitSet.andNot(Ljava/util/BitSet;)V", false);
        map.put("java.util.Formatter$FormatSpecifier.localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;)Ljava/lang/StringBuilder;", false);
        map.put("java.util.GregorianCalendar.getSetStateFields()I", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.setMap(Ljava/util/concurrent/ConcurrentNavigableMap;)V", false);
        map.put("java.util.HashSet.clear()V", false);
        map.put("java.util.TreeMap$DescendingSubMap.inRange(Ljava/lang/Object;Z)Z", false);
        map.put("java.util.NavigableMap.firstKey()Ljava/lang/Object;", false);
        map.put("java.util.logging.Logger.checkPermission()V", false);
        map.put("java.util.prefs.WindowsPreferences.openKey(II)I", false);
        map.put("java.util.Collection.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.jar.JarFile$2.hasMoreElements()Z", true);
        map.put("java.util.Collections.unmodifiableSet(Ljava/util/Set;)Ljava/util/Set;", false);
        map.put("java.util.concurrent.Exchanger.exchange(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.LinkedList.unlinkLast(Ljava/util/LinkedList$Node;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.readLock()Ljava/util/concurrent/locks/Lock;", true);
        map.put("java.util.Timer.cancel()V", false);
        map.put("java.util.Collections$CheckedList$1.previous()Ljava/lang/Object;", false);
        map.put("java.util.zip.CheckedInputStream.<init>(Ljava/io/InputStream;Ljava/util/zip/Checksum;)V", false);
        map.put("java.util.Hashtable$KeySet.<init>(Ljava/util/Hashtable;)V", false);
        map.put("java.util.prefs.AbstractPreferences$EventDispatchThread.<init>(Ljava/util/prefs/AbstractPreferences$1;)V", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.Formatter$FormatSpecifier.print(BLjava/util/Locale;)V", false);
        map.put("java.util.jar.Attributes$Name.isAlpha(C)Z", true);
        map.put("java.util.AbstractMap$2$1.hasNext()Z", false);
        map.put("java.util.prefs.Preferences.toString()Ljava/lang/String;", false);
        map.put("java.util.ArrayList.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.HashSet.hashCode()I", false);
        map.put("java.util.GregorianCalendar.roll(IZ)V", false);
        map.put("java.util.Collections$EmptySet.<init>(Ljava/util/Collections$1;)V", true);
        map.put("java.util.TreeMap$NavigableSubMap.absLowFence()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.zip.Inflater.init(Z)J", false);
        map.put("java.util.Collections$EmptyList.toArray()[Ljava/lang/Object;", true);
        map.put("java.util.concurrent.BlockingQueue.remainingCapacity()I", false);
        map.put("java.util.ResourceBundle$CacheKey.access$700(Ljava/util/ResourceBundle$CacheKey;)J", true);
        map.put("java.util.jar.Manifest$FastInputStream.close()V", false);
        map.put("java.util.Collections.synchronizedCollection(Ljava/util/Collection;)Ljava/util/Collection;", false);
        map.put("java.util.ServiceConfigurationError.<init>(Ljava/lang/String;Ljava/lang/Throwable;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Index.<init>(Ljava/util/concurrent/ConcurrentSkipListMap$Node;Ljava/util/concurrent/ConcurrentSkipListMap$Index;Ljava/util/concurrent/ConcurrentSkipListMap$Index;)V", false);
        map.put("java.util.logging.FileHandler$InitializationErrorManager.<init>()V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.<init>(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V", false);
        map.put("java.util.zip.Inflater.getBytesRead(J)J", false);
        map.put("java.util.concurrent.FutureTask.runAndReset()Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap$HashIterator.remove()V", false);
        map.put("java.util.Collections$SingletonMap.entrySet()Ljava/util/Set;", false);
        map.put("java.util.Observable.deleteObserver(Ljava/util/Observer;)V", false);
        map.put("java.util.SortedSet.last()Ljava/lang/Object;", false);
        map.put("java.util.GregorianCalendar.getYearOffsetInMillis()J", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter.descend()V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.doSignal(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)V", false);
        map.put("java.util.TreeMap$EntrySet.size()I", true);
        map.put("java.util.concurrent.atomic.AtomicBoolean.weakCompareAndSet(ZZ)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.transferForSignal(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)Z", false);
        map.put("java.util.Arrays.fill([JJ)V", true);
        map.put("java.util.concurrent.Phaser.getRegisteredParties()I", true);
        map.put("java.util.concurrent.Executors$PrivilegedCallable.access$000(Ljava/util/concurrent/Executors$PrivilegedCallable;)Ljava/util/concurrent/Callable;", true);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegDeleteValue(I[B)I", false);
        map.put("java.util.TreeMap$NavigableSubMap$EntrySetView.<init>(Ljava/util/TreeMap$NavigableSubMap;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node.<clinit>()V", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.hasQueuedThreads()Z", false);
        map.put("java.util.regex.ASCII.<init>()V", true);
        map.put("java.util.ArrayDeque$DeqIterator.remove()V", false);
        map.put("java.util.LinkedHashMap$EntryIterator.nextEntry()Ljava/util/LinkedHashMap$Entry;", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.containsValue(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.Semaphore$Sync.hasQueuedThreads()Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.fullGetFirstQueuedThread()Ljava/lang/Thread;", true);
        map.put("java.util.Locale.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.logging.Level.getLocalizedName()Ljava/lang/String;", false);
        map.put("java.util.spi.CurrencyNameProvider.getAvailableLocales()[Ljava/util/Locale;", false);
        map.put("java.util.concurrent.ScheduledExecutorService.schedule(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", false);
        map.put("java.util.TreeMap$AscendingSubMap.absLowest()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.LinkedList.set(ILjava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.ListResourceBundle.handleGetObject(Ljava/lang/String;)Ljava/lang/Object;", false);
        map.put("java.util.Locale$Builder.<init>()V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.resetLock()V", false);
        map.put("java.util.EnumMap$KeySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.IdentityHashMap.containsValue(Ljava/lang/Object;)Z", true);
        map.put("java.util.jar.JarVerifier.beginEntry(Ljava/util/jar/JarEntry;Lsun/security/util/ManifestEntryVerifier;)V", false);
        map.put("java.util.ArrayList$ListItr.previous()Ljava/lang/Object;", false);
        map.put("java.util.ArrayList.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.AbstractMap$SimpleImmutableEntry.setValue(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.HashMap.containsValue(Ljava/lang/Object;)Z", true);
        map.put("java.util.Hashtable.keySet()Ljava/util/Set;", false);
        map.put("java.util.AbstractMap.clone()Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipCoder.getBytes(Ljava/lang/String;)[B", false);
        map.put("java.util.Formatter.format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.getSharedQueuedThreads()Ljava/util/Collection;", false);
        map.put("java.util.LinkedHashMap$LinkedHashIterator.<init>(Ljava/util/LinkedHashMap;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.<init>(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer;)V", false);
        map.put("java.util.concurrent.atomic.AtomicLong.VMSupportsCS8()Z", false);
        map.put("java.util.Formatter$Flags.remove(Ljava/util/Formatter$Flags;)Ljava/util/Formatter$Flags;", false);
        map.put("java.util.GregorianCalendar.yearLength()I", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater.getAndSet(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicReference.<clinit>()V", false);
        map.put("java.util.jar.JarVerifier$VerifierStream.<init>(Ljava/util/jar/Manifest;Ljava/util/jar/JarEntry;Ljava/io/InputStream;Ljava/util/jar/JarVerifier;)V", false);
        map.put("java.util.concurrent.ForkJoinTask.tryAwaitDone(J)V", false);
        map.put("java.util.AbstractMap$SimpleImmutableEntry.<init>(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        map.put("java.util.UnknownFormatFlagsException.getMessage()Ljava/lang/String;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquire(I)Z", false);
        map.put("java.util.Collections$EmptyList.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.<init>(Ljava/util/Set;Ljava/lang/Class;)V", false);
        map.put("java.util.Locale.access$700(Ljava/util/Locale;)Lsun/util/locale/LocaleExtensions;", true);
        map.put("java.util.concurrent.atomic.AtomicLong.doubleValue()D", true);
        map.put("java.util.JapaneseImperialCalendar.roll(IZ)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.peek()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.tryWriteLock()Z", false);
        map.put("java.util.logging.MemoryHandler.close()V", false);
        map.put("java.util.BitSet.<init>(I)V", false);
        map.put("java.util.TreeMap$Values.remove(Ljava/lang/Object;)Z", true);
        map.put("java.util.Collections$EmptyMap.<init>(Ljava/util/Collections$1;)V", false);
        map.put("java.util.concurrent.Phaser.stateToString(J)Ljava/lang/String;", false);
        map.put("java.util.concurrent.atomic.AtomicMarkableReference.weakCompareAndSet(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z", false);
        map.put("java.util.Vector.removeElement(Ljava/lang/Object;)Z", false);
        map.put("java.util.Calendar.internalGet(I)I", true);
        map.put("java.util.concurrent.ThreadPoolExecutor.workerCountOf(I)I", true);
        map.put("java.util.prefs.Preferences$1.<init>()V", true);
        map.put("java.util.TimeZone.getDSTSavings()I", false);
        map.put("java.util.ArrayDeque.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.AbstractQueue.clear()V", false);
        map.put("java.util.Collections.nCopies(ILjava/lang/Object;)Ljava/util/List;", false);
        map.put("java.util.AbstractMap$2.clear()V", false);
        map.put("java.util.LinkedHashMap.<init>(Ljava/util/Map;)V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.shutdownNow()Ljava/util/List;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$DiscardPolicy.rejectedExecution(Ljava/lang/Runnable;Ljava/util/concurrent/ThreadPoolExecutor;)V", true);
        map.put("java.util.zip.Deflater.getBytesRead()J", false);
        map.put("java.util.Calendar.clone()Ljava/lang/Object;", false);
        map.put("java.util.Date.<init>(III)V", false);
        map.put("java.util.Formatter$FormatSpecifier.trailingSign(Ljava/lang/StringBuilder;Z)Ljava/lang/StringBuilder;", false);
        map.put("java.util.TreeMap$KeySet.last()Ljava/lang/Object;", false);
        map.put("java.util.Hashtable.getIterator(I)Ljava/util/Iterator;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$11.isSatisfiedBy(I)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Node.appendMarker(Ljava/util/concurrent/ConcurrentSkipListMap$Node;)Z", false);
        map.put("java.util.PriorityQueue.indexOf(Ljava/lang/Object;)I", true);
        map.put("java.util.Date.normalize()Lsun/util/calendar/BaseCalendar$Date;", false);
        map.put("java.util.zip.ZipFile.open(Ljava/lang/String;IJZ)J", false);
        map.put("java.util.regex.Pattern.printObjectTree(Ljava/util/regex/Pattern$Node;)V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$13.<init>()V", false);
        map.put("java.util.jar.Attributes.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern.split(Ljava/lang/CharSequence;I)[Ljava/lang/String;", false);
        map.put("java.util.logging.FileHandler$1.<init>(Ljava/util/logging/FileHandler;)V", false);
        map.put("java.util.regex.Pattern$LastMatch.<init>()V", false);
        map.put("java.util.jar.JarInputStream.close()V", false);
        map.put("java.util.logging.FileHandler.rotate()V", false);
        map.put("java.util.TreeMap$DescendingSubMap.<init>(Ljava/util/TreeMap;ZLjava/lang/Object;ZZLjava/lang/Object;Z)V", false);
        map.put("java.util.logging.LogRecord.setSequenceNumber(J)V", false);
        map.put("java.util.TreeMap.getHigherEntry(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.concurrent.LinkedTransferQueue.take()Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipFile$2.startsWithLocHeader(Ljava/util/zip/ZipFile;)Z", true);
        map.put("java.util.prefs.AbstractPreferences.putInt(Ljava/lang/String;I)V", false);
        map.put("java.util.jar.JarVerifier$2.<init>(Ljava/util/jar/JarVerifier;Ljava/util/Enumeration;Ljava/util/jar/JarFile;Ljava/util/Map;)V", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.length()I", true);
        map.put("java.util.prefs.WindowsPreferences.removeNodeSpi()V", false);
        map.put("java.util.concurrent.Executors$2.<init>(Ljava/security/PrivilegedExceptionAction;)V", false);
        map.put("java.util.XMLUtils.getLoadingDoc(Ljava/io/InputStream;)Lorg/w3c/dom/Document;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.updateTail()V", false);
        map.put("java.util.Collections$CheckedSortedMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.LinkedHashSet.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.Collections.fill(Ljava/util/List;Ljava/lang/Object;)V", false);
        map.put("java.util.zip.ZipFile.getZipEntry(Ljava/lang/String;J)Ljava/util/zip/ZipEntry;", false);
        map.put("java.util.IllegalFormatWidthException.<init>(I)V", false);
        map.put("java.util.ArrayList$Itr.remove()V", false);
        map.put("java.util.regex.Pattern.createGroup(Z)Ljava/util/regex/Pattern$Node;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.entryIterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$EntrySet.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Calendar.compareTo(Ljava/lang/Object;)I", false);
        map.put("java.util.jar.Manifest.getEntries()Ljava/util/Map;", true);
        map.put("java.util.SubList$1.hasNext()Z", true);
        map.put("java.util.TreeMap.colorOf(Ljava/util/TreeMap$Entry;)Z", true);
        map.put("java.util.regex.Pattern.hasBaseCharacter(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.locks.ReentrantLock.getWaitQueueLength(Ljava/util/concurrent/locks/Condition;)I", false);
        map.put("java.util.zip.ZipOutputStream.writeBytes([BII)V", false);
        map.put("java.util.AbstractMap.values()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V", false);
        map.put("java.util.regex.Pattern$GroupTail.<init>(II)V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$22.isSatisfiedBy(I)Z", true);
        map.put("java.util.logging.XMLFormatter.<init>()V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$16.isSatisfiedBy(I)Z", false);
        map.put("java.util.regex.Pattern.RemoveQEQuoting()V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.doAcquireInterruptibly(J)V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;", false);
        map.put("java.util.logging.ConsoleHandler.publish(Ljava/util/logging/LogRecord;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.subMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.NoSuchElementException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take()Ljava/util/concurrent/RunnableScheduledFuture;", false);
        map.put("java.util.Formatter.format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/util/Formatter;", false);
        map.put("java.util.Formatter$FormatSpecifier.checkDateTime()V", false);
        map.put("java.util.Locale.getCompatibilityExtensions(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lsun/util/locale/LocaleExtensions;", true);
        map.put("java.util.logging.LogManager$2.run()Ljava/lang/Void;", false);
        map.put("java.util.zip.ZipFile.<init>(Ljava/io/File;I)V", false);
        map.put("java.util.Calendar.setMinimalDaysInFirstWeek(I)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.ForkJoinTask.doJoin()I", false);
        map.put("java.util.JapaneseImperialCalendar.getDisplayName(IILjava/util/Locale;)Ljava/lang/String;", true);
        map.put("java.util.concurrent.BlockingDeque.offerLast(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.Collections$EmptyListIterator.previous()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireShared(I)I", false);
        map.put("java.util.concurrent.CyclicBarrier.await()I", false);
        map.put("java.util.AbstractCollection.size()I", false);
        map.put("java.util.Collections$CheckedList.set(ILjava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ScheduledExecutorService.schedule(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", false);
        map.put("java.util.TreeMap.buildFromSorted(IIIILjava/util/Iterator;Ljava/io/ObjectInputStream;Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.JapaneseImperialCalendar.getMinimalDaysInFirstWeek()I", false);
        map.put("java.util.Scanner.useDelimiter(Ljava/lang/String;)Ljava/util/Scanner;", false);
        map.put("java.util.TreeMap.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.zip.InflaterInputStream.close()V", false);
        map.put("java.util.TreeMap$SubMap.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWIterator.remove()V", false);
        map.put("java.util.logging.LogManager$LoggerWeakRef.<init>(Ljava/util/logging/LogManager;Ljava/util/logging/Logger;)V", false);
        map.put("java.util.Arrays.hashCode([J)I", true);
        map.put("java.util.EnumSet.allOf(Ljava/lang/Class;)Ljava/util/EnumSet;", false);
        map.put("java.util.jar.Attributes.keySet()Ljava/util/Set;", false);
        map.put("java.util.concurrent.Phaser.internalAwaitAdvance(ILjava/util/concurrent/Phaser$QNode;)I", false);
        map.put("java.util.ResourceBundle$NoFallbackControl.<init>(Ljava/util/List;)V", false);
        map.put("java.util.Stack.lastIndexOf(Ljava/lang/Object;)I", false);
        map.put("java.util.TreeMap.pollFirstEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.Date.hashCode()I", false);
        map.put("java.util.logging.LogManager$6.<init>(Ljava/util/logging/Logger;Ljava/util/logging/Logger;)V", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.offer(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.HashMap.init()V", true);
        map.put("java.util.NavigableMap.ceilingEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.LinkedHashMap$Entry.getKey()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter.advance()V", false);
        map.put("java.util.Calendar.getAvailableLocales()[Ljava/util/Locale;", false);
        map.put("java.util.concurrent.ForkJoinPool.terminateWaiters()V", false);
        map.put("java.util.prefs.NodeChangeEvent.getParent()Ljava/util/prefs/Preferences;", false);
        map.put("java.util.prefs.AbstractPreferences.keys()[Ljava/lang/String;", false);
        map.put("java.util.concurrent.BlockingQueue.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.HashMap$EntrySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.GregorianCalendar.setFieldsComputed(I)V", false);
        map.put("java.util.Arrays.asList([Ljava/lang/Object;)Ljava/util/List;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWIterator.add(Ljava/lang/Object;)V", false);
        map.put("java.util.prefs.WindowsPreferences.childSpi(Ljava/lang/String;)Ljava/util/prefs/AbstractPreferences;", false);
        map.put("java.util.JapaneseImperialCalendar.getRolledValue(IIII)I", false);
        map.put("java.util.IllegalFormatCodePointException.<init>(I)V", false);
        map.put("java.util.ResourceBundle.getBundle(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;", false);
        map.put("java.util.concurrent.CyclicBarrier.getParties()I", true);
        map.put("java.util.HashMap.hashCode()I", false);
        map.put("java.util.regex.Pattern$CharPropertyNames.defRange(Ljava/lang/String;II)V", false);
        map.put("java.util.Map$Entry.getKey()Ljava/lang/Object;", false);
        map.put("java.util.Date.getMillisOf(Ljava/util/Date;)J", false);
        map.put("java.util.DualPivotQuicksort.sort([DII)V", false);
        map.put("java.util.Collections$UnmodifiableList.lastIndexOf(Ljava/lang/Object;)I", false);
        map.put("java.util.jar.JarVerifier$1.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.unparkSuccessor(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)V", false);
        map.put("java.util.TreeMap$AscendingSubMap.absHigher(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.Vector.insertElementAt(Ljava/lang/Object;I)V", false);
        map.put("java.util.zip.DeflaterInputStream.markSupported()Z", true);
        map.put("java.util.AbstractCollection.hugeCapacity(I)I", false);
        map.put("java.util.zip.Deflater.setDictionary([B)V", false);
    }

    private static void m7() {

        map.put("java.util.concurrent.ExecutorService.invokeAny(Ljava/util/Collection;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.lowestEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.zip.ZipInputStream.readFully([BII)V", false);
        map.put("java.util.spi.LocaleServiceProvider.<init>()V", true);
        map.put("java.util.prefs.AbstractPreferences.<init>(Ljava/util/prefs/AbstractPreferences;Ljava/lang/String;)V", false);
        map.put("java.util.logging.Level.getResourceBundleName()Ljava/lang/String;", true);
        map.put("java.util.Collections$ReverseComparator2.hashCode()I", false);
        map.put("java.util.regex.ASCII.isCntrl(I)Z", true);
        map.put("java.util.concurrent.LinkedBlockingQueue.signalNotFull()V", false);
        map.put("java.util.Locale.getScript()Ljava/lang/String;", true);
        map.put("java.util.Vector.elements()Ljava/util/Enumeration;", false);
        map.put("java.util.zip.ZipFile.access$300(Ljava/util/zip/ZipFile;)I", true);
        map.put("java.util.AbstractQueue.peek()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.Exchanger$Node.get()Ljava/lang/Object;", false);
        map.put("java.util.Hashtable$Entry.setValue(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.WeakHashMap.<init>(I)V", false);
        map.put("java.util.ListResourceBundle.getContents()[[Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipInputStream.ensureOpen()V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.scheduleWithFixedDelay(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", false);
        map.put("java.util.zip.DeflaterInputStream.skip(J)J", false);
        map.put("java.util.jar.Pack200.newInstance(Ljava/lang/String;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.hasQueuedPredecessors()Z", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.getExecuteExistingDelayedTasksAfterShutdownPolicy()Z", true);
        map.put("java.util.Calendar.isFieldSet(II)Z", true);
        map.put("java.util.zip.Deflater.deflateBytes(J[BIII)I", false);
        map.put("java.util.zip.ZipFile.access$400(Ljava/util/zip/ZipFile;)J", true);
        map.put("java.util.ComparableTimSort.reverseRange([Ljava/lang/Object;II)V", true);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.doAcquireSharedInterruptibly(J)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)I", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitingThreads(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$ConditionObject;)Ljava/util/Collection;", false);
        map.put("java.util.InputMismatchException.<init>()V", false);
        map.put("java.util.Collections$UnmodifiableList.set(ILjava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.EnumMap$Values.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.Arrays.hashCode([I)I", true);
        map.put("java.util.concurrent.LinkedTransferQueue.hasWaitingConsumer()Z", true);
        map.put("java.util.SimpleTimeZone.hasSameRules(Ljava/util/TimeZone;)Z", true);
        map.put("java.util.TreeMap$AscendingSubMap.subLowest()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.WeakHashMap$KeyIterator.<init>(Ljava/util/WeakHashMap;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipFile$ZipFileInputStream.size()J", true);
        map.put("java.util.GregorianCalendar.getMinimalDaysInFirstWeek()I", false);
        map.put("java.util.DualPivotQuicksort.sort([JIIZ)V", true);
        map.put("java.util.ArrayList$SubList.add(ILjava/lang/Object;)V", false);
        map.put("java.util.logging.FileHandler.<init>(Ljava/lang/String;Z)V", false);
        map.put("java.util.WeakHashMap.hash(Ljava/lang/Object;)I", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.toString()Ljava/lang/String;", false);
        map.put("java.util.List.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.HashMap.capacity()I", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.lowerKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.NavigableSet.pollFirst()Ljava/lang/Object;", false);
        map.put("java.util.Deque.remove()Ljava/lang/Object;", false);
        map.put("java.util.Vector.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeSet.ceiling(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.logging.MemoryHandler.publish(Ljava/util/logging/LogRecord;)V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.weakCompareAndSet(Ljava/lang/Object;II)Z", false);
        map.put("java.util.Arrays.hashCode([F)I", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.<clinit>()V", false);
        map.put("java.util.regex.Pattern$BmpCharProperty.<init>()V", false);
        map.put("java.util.concurrent.ForkJoinPool.submit(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.prefs.WindowsPreferences.<clinit>()V", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.checkedByteOffset(I)J", true);
        map.put("java.util.ArrayList.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.remove(I)Ljava/lang/Object;", false);
        map.put("java.util.PropertyPermission.newPermissionCollection()Ljava/security/PermissionCollection;", false);
        map.put("java.util.Collections$AsLIFOQueue.isEmpty()Z", false);
        map.put("java.util.TreeMap.lastEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.HashSet.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.WeakHashMap$EntryIterator.<init>(Ljava/util/WeakHashMap;)V", false);
        map.put("java.util.ArrayDeque.pollLast()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$SliceNode.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWIterator.<init>([Ljava/lang/Object;I)V", false);
        map.put("java.util.ResourceBundle$1.<init>()V", false);
        map.put("java.util.BitSet.toString()Ljava/lang/String;", false);
        map.put("java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.remove()V", false);
        map.put("java.util.concurrent.ForkJoinTask.<init>()V", true);
        map.put("java.util.regex.Pattern.compile(Ljava/lang/String;I)Ljava/util/regex/Pattern;", false);
        map.put("java.util.Arrays.fill([FIIF)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue.tryTransfer(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.logging.LogRecord.getThreadID()I", true);
        map.put("java.util.concurrent.ConcurrentHashMap.<clinit>()V", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.enqueue(Ljava/util/concurrent/LinkedBlockingQueue$Node;)V", false);
        map.put("java.util.regex.UnicodeProp$5.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.<init>(Ljava/util/concurrent/locks/ReentrantReadWriteLock;)V", false);
        map.put("java.util.PriorityQueue.heapify()V", false);
        map.put("java.util.concurrent.locks.ReadWriteLock.readLock()Ljava/util/concurrent/locks/Lock;", false);
        map.put("java.util.zip.CheckedOutputStream.write([BII)V", false);
        map.put("java.util.Date.toLocaleString()Ljava/lang/String;", false);
        map.put("java.util.TreeMap$NavigableSubMap$EntrySetView.isEmpty()Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap$KeySet.isEmpty()Z", false);
        map.put("java.util.prefs.AbstractPreferences$NodeRemovedEvent.<init>(Ljava/util/prefs/AbstractPreferences;Ljava/util/prefs/Preferences;Ljava/util/prefs/Preferences;)V", false);
        map.put("java.util.Collections$CheckedMap.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.setHead(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$AbstractItr.nextNode(Ljava/util/concurrent/ConcurrentLinkedDeque$Node;)Ljava/util/concurrent/ConcurrentLinkedDeque$Node;", false);
        map.put("java.util.Formatter$DateTime.isValid(C)Z", true);
        map.put("java.util.Collections$CheckedMap.values()Ljava/util/Collection;", false);
        map.put("java.util.Locale.getInstance(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lsun/util/locale/LocaleExtensions;)Ljava/util/Locale;", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.NavigableMap.navigableKeySet()Ljava/util/NavigableSet;", false);
        map.put("java.util.concurrent.Phaser.<clinit>()V", false);
        map.put("java.util.concurrent.locks.ReentrantLock$NonfairSync.tryAcquire(I)Z", false);
        map.put("java.util.logging.LoggingProxyImpl.log(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;)V", true);
        map.put("java.util.prefs.AbstractPreferences.getFloat(Ljava/lang/String;F)F", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.concurrent.Executors$DelegatedExecutorService.invokeAny(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.DualPivotQuicksort.sort([FII)V", false);
        map.put("java.util.List.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.SynchronousQueue$Transferer.<init>()V", true);
        map.put("java.util.LinkedHashMap$EntryIterator.<init>(Ljava/util/LinkedHashMap;)V", false);
        map.put("java.util.concurrent.ConcurrentHashMap.containsKey(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.LinkedBlockingQueue.toString()Ljava/lang/String;", false);
        map.put("java.util.JapaneseImperialCalendar.getDisplayNamesImpl(IILjava/util/Locale;)Ljava/util/Map;", false);
        map.put("java.util.Properties.list(Ljava/io/PrintStream;)V", false);
        map.put("java.util.ServiceLoader.fail(Ljava/lang/Class;Ljava/net/URL;ILjava/lang/String;)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue$Itr.next()Ljava/lang/Object;", false);
        map.put("java.util.Collections.emptySet()Ljava/util/Set;", true);
        map.put("java.util.concurrent.RejectedExecutionException.getMessage()Ljava/lang/String;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.<init>(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.toString()Ljava/lang/String;", false);
        map.put("java.util.Date.compareTo(Ljava/util/Date;)I", false);
        map.put("java.util.Vector.size()I", true);
        map.put("java.util.regex.Pattern$BackRef.<init>(I)V", false);
        map.put("java.util.EnumSet.access$000()[Ljava/lang/Enum;", true);
        map.put("java.util.jar.Attributes.getValue(Ljava/util/jar/Attributes$Name;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$EntrySet.clear()V", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.helpQuiescePool()V", false);
        map.put("java.util.concurrent.ThreadLocalRandom$1.initialValue()Ljava/lang/Object;", false);
        map.put("java.util.prefs.AbstractPreferences.exportSubtree(Ljava/io/OutputStream;)V", false);
        map.put("java.util.logging.LogRecord.setLevel(Ljava/util/logging/Level;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter()Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;", false);
        map.put("java.util.logging.LogManager$LoggerContext.<init>()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.containsKey(Ljava/lang/Object;)Z", false);
        map.put("java.util.Arrays.hashCode([D)I", false);
        map.put("java.util.HashMap$Entry.getKey()Ljava/lang/Object;", true);
        map.put("java.util.prefs.AbstractPreferences.absolutePath()Ljava/lang/String;", true);
        map.put("java.util.WeakHashMap$ValueIterator.<init>(Ljava/util/WeakHashMap;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.subSet(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;", false);
        map.put("java.util.Collections$UnmodifiableList.readResolve()Ljava/lang/Object;", false);
        map.put("java.util.JapaneseImperialCalendar.monthLength(II)I", true);
        map.put("java.util.logging.LogManager.demandLogger(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Class;)Ljava/util/logging/Logger;", false);
        map.put("java.util.Collections$AsLIFOQueue.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.prefs.WindowsPreferencesFactory.<init>()V", true);
        map.put("java.util.Formatter$FormatSpecifier$BigDecimalLayout.exponent()[C", false);
        map.put("java.util.Deque.getLast()Ljava/lang/Object;", false);
        map.put("java.util.ComparableTimSort.sort([Ljava/lang/Object;II)V", false);
        map.put("java.util.zip.Adler32.updateBytes(I[BII)I", false);
        map.put("java.util.logging.LogManager$LoggerContext.getLoggerNames()Ljava/util/Enumeration;", false);
        map.put("java.util.prefs.WindowsPreferences.<init>(I[B)V", false);
        map.put("java.util.regex.Pattern.rangeFor(II)Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.lastKey()Ljava/lang/Object;", false);
        map.put("java.util.Locale.getInstance(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Locale;", false);
        map.put("java.util.concurrent.locks.LockSupport.<init>()V", true);
        map.put("java.util.Timer.access$100(Ljava/util/Timer;)Ljava/util/TimerThread;", true);
        map.put("java.util.regex.Pattern.unicodeBlockPropertyFor(Ljava/lang/String;)Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater.<init>(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)V", false);
        map.put("java.util.Scanner.integerPattern()Ljava/util/regex/Pattern;", false);
        map.put("java.util.TreeSet.<init>(Ljava/util/SortedSet;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.isShutdown()Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$EntrySet.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.regex.UnicodeProp$7.is(I)Z", false);
        map.put("java.util.Collections$AsLIFOQueue.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.UnknownFormatFlagsException.getFlags()Ljava/lang/String;", true);
        map.put("java.util.zip.ZipEntry.setTime(J)V", false);
        map.put("java.util.concurrent.TimeUnit$2.convert(JLjava/util/concurrent/TimeUnit;)J", false);
        map.put("java.util.TreeMap$AscendingSubMap.subHigher(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.ResourceBundle$RBClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;", false);
        map.put("java.util.Collections$CheckedCollection.<init>(Ljava/util/Collection;Ljava/lang/Class;)V", false);
        map.put("java.util.TreeMap$DescendingSubMap.absLower(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.jar.JarVerifier$VerifierCodeSource.access$000(Ljava/util/jar/JarVerifier$VerifierCodeSource;)[Ljava/security/CodeSigner;", true);
        map.put("java.util.JapaneseImperialCalendar.pinDayOfMonth(Lsun/util/calendar/LocalGregorianCalendar$Date;)V", false);
        map.put("java.util.prefs.XmlSupport.ImportPrefs(Ljava/util/prefs/Preferences;Lorg/w3c/dom/Element;)V", false);
        map.put("java.util.Formatter$FormatSpecifier.width(Ljava/lang/String;)I", false);
        map.put("java.util.prefs.Base64.altBase64ToByteArray(Ljava/lang/String;)[B", false);
        map.put("java.util.Timer.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.ArrayDeque.pop()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater.decrementAndGet(Ljava/lang/Object;)J", false);
        map.put("java.util.Date.getCalendarSystem(I)Lsun/util/calendar/BaseCalendar;", false);
        map.put("java.util.TreeMap.clear()V", false);
        map.put("java.util.Calendar$CalendarAccessControlContext.access$000()Ljava/security/AccessControlContext;", true);
        map.put("java.util.concurrent.ForkJoinPool.tryReleaseWaiter()Z", false);
        map.put("java.util.Queue.remove()Ljava/lang/Object;", false);
        map.put("java.util.Collections$EmptyMap.<init>()V", false);
        map.put("java.util.Arrays.hashCode([B)I", true);
        map.put("java.util.Formatter$FormatSpecifier.print(SLjava/util/Locale;)V", false);
        map.put("java.util.logging.LogRecord.getSequenceNumber()J", true);
        map.put("java.util.concurrent.LinkedBlockingQueue.put(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ForkJoinPool.getRunningThreadCount()I", true);
        map.put("java.util.Collections$EmptyList.<init>(Ljava/util/Collections$1;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.AbstractExecutorService.doInvokeAny(Ljava/util/Collection;ZJ)Ljava/lang/Object;", false);
        map.put("java.util.WeakHashMap$Holder.<clinit>()V", false);
        map.put("java.util.ResourceBundle.getLocale()Ljava/util/Locale;", true);
        map.put("java.util.concurrent.Executors$PrivilegedThreadFactory$1$1.run()Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$KeySet.pollFirst()Ljava/lang/Object;", false);
        map.put("java.util.Collections$SetFromMap.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.descendingIterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.fullGetFirstQueuedThread()Ljava/lang/Thread;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.containsValue(Ljava/lang/Object;)Z", true);
        map.put("java.util.TreeMap.descendingKeySet()Ljava/util/NavigableSet;", false);
        map.put("java.util.TreeMap.lowerEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.logging.StreamHandler.setLevel(Ljava/util/logging/Level;)V", false);
        map.put("java.util.Hashtable$ValueCollection.<init>(Ljava/util/Hashtable;)V", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater.set(Ljava/lang/Object;J)V", false);
        map.put("java.util.HashMap$Entry.<init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Entry;)V", false);
        map.put("java.util.ArrayList$ListItr.previousIndex()I", true);
        map.put("java.util.concurrent.BlockingDeque.removeFirstOccurrence(Ljava/lang/Object;)Z", false);
        map.put("java.util.zip.Inflater.getAdler(J)I", false);
        map.put("java.util.logging.Logger.logrb(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)V", true);
        map.put("java.util.TimeZone.useDaylightTime()Z", false);
        map.put("java.util.concurrent.LinkedTransferQueue.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.Arrays.fill([SS)V", true);
        map.put("java.util.zip.ZipOutputStream.setLevel(I)V", false);
        map.put("java.util.concurrent.Phaser.awaitAdvance(I)I", false);
        map.put("java.util.RegularEnumSet.clear()V", false);
        map.put("java.util.logging.Handler.getErrorManager()Ljava/util/logging/ErrorManager;", false);
        map.put("java.util.concurrent.ForkJoinTask.pollNextLocalTask()Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.RegularEnumSet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.newCondition()Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;", false);
        map.put("java.util.EnumMap$Values.clear()V", false);
        map.put("java.util.Formatter$FormatSpecifier.print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ)V", false);
        map.put("java.util.regex.UnicodeProp.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock$FairSync.tryAcquire(I)Z", false);
        map.put("java.util.Arrays.hashCode([C)I", true);
        map.put("java.util.Calendar.isExternallySet(I)Z", true);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.pollExpired()Ljava/util/concurrent/RunnableScheduledFuture;", false);
        map.put("java.util.concurrent.Callable.call()Ljava/lang/Object;", false);
        map.put("java.util.Formatter$FormatSpecifier.addZeros([CI)[C", false);
        map.put("java.util.AbstractCollection.removeAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.jar.JavaUtilJarAccessImpl.entries2(Ljava/util/jar/JarFile;)Ljava/util/Enumeration;", false);
        map.put("java.util.Arrays.equals([J[J)Z", true);
        map.put("java.util.Calendar.compareTo(Ljava/util/Calendar;)I", false);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegEnumKeyEx1(III)[B", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.dec(I)I", true);
        map.put("java.util.jar.JavaUtilJarAccessImpl.setEagerValidation(Ljava/util/jar/JarFile;Z)V", false);
        map.put("java.util.zip.ZipInputStream.close()V", false);
        map.put("java.util.IllegalFormatWidthException.getMessage()Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.getNear(Ljava/lang/Object;I)Ljava/util/AbstractMap$SimpleImmutableEntry;", false);
        map.put("java.util.concurrent.ExecutionException.<init>(Ljava/lang/Throwable;)V", false);
        map.put("java.util.jar.JarVerifier.entries2(Ljava/util/jar/JarFile;Ljava/util/Enumeration;)Ljava/util/Enumeration;", false);
        map.put("java.util.zip.Deflater.<clinit>()V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.<init>(Ljava/util/concurrent/ScheduledThreadPoolExecutor;Ljava/util/concurrent/Callable;J)V", false);
        map.put("java.util.prefs.AbstractPreferences.removeNode2()V", false);
        map.put("java.util.UUID.node()J", false);
        map.put("java.util.concurrent.CountDownLatch$Sync.releaseShared(I)Z", false);
        map.put("java.util.EnumSet.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.awaitNanos(J)J", false);
        map.put("java.util.jar.JarFile$3.nextElement()Ljava/util/jar/JarFile$JarFileEntry;", false);
        map.put("java.util.concurrent.SynchronousQueue$Transferer.transfer(Ljava/lang/Object;ZJ)Ljava/lang/Object;", false);
        map.put("java.util.SubList.listIterator()Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.ForkJoinPool.execute(Ljava/util/concurrent/ForkJoinTask;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.updateHead()V", false);
        map.put("java.util.regex.Pattern$NotBehindS.<init>(Ljava/util/regex/Pattern$Node;II)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.compareAndSetHead(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)Z", false);
        map.put("java.util.WeakHashMap.resize(I)V", false);
        map.put("java.util.Collection.size()I", false);
        map.put("java.util.Arrays.binarySearch0([IIII)I", true);
        map.put("java.util.SimpleTimeZone.setEndRule(IIII)V", false);
        map.put("java.util.zip.ZipFile$ZipFileInputStream.<init>(Ljava/util/zip/ZipFile;J)V", false);
        map.put("java.util.prefs.WindowsPreferences.sync()V", false);
        map.put("java.util.logging.Logger.getLevel()Ljava/util/logging/Level;", true);
        map.put("java.util.Arrays.fill([BIIB)V", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.<init>([J)V", false);
        map.put("java.util.ResourceBundle$SingleFormatControl.access$900()Ljava/util/ResourceBundle$Control;", true);
        map.put("java.util.FormattableFlags.<init>()V", true);
        map.put("java.util.Date.getCalendarSystem(J)Lsun/util/calendar/BaseCalendar;", false);
        map.put("java.util.regex.Pattern.parsePastLine()I", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.Collections$EmptyEnumeration.<init>()V", true);
        map.put("java.util.ResourceBundle$NoFallbackControl.getFallbackLocale(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/Locale;", false);
        map.put("java.util.regex.Pattern.error(Ljava/lang/String;)Ljava/util/regex/PatternSyntaxException;", false);
        map.put("java.util.ArrayList$ListItr.checkForComodification()V", false);
        map.put("java.util.Locale$Builder.setLocale(Ljava/util/Locale;)Ljava/util/Locale$Builder;", false);
        map.put("java.util.TreeMap.containsValue(Ljava/lang/Object;)Z", true);
        map.put("java.util.AbstractCollection.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.GregorianCalendar.roll(II)V", false);
        map.put("java.util.TreeMap.access$200()Ljava/lang/Object;", true);
        map.put("java.util.EnumMap.containsMapping(Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.JumboEnumSet.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Formatter$Flags.<init>(I)V", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater.set(Ljava/lang/Object;J)V", false);
        map.put("java.util.Collections$EmptyList.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.Collections$SynchronizedCollection.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.getAndDecrement(I)J", false);
        map.put("java.util.Calendar.clear()V", false);
        map.put("java.util.Formatter.<init>(Ljava/io/File;Ljava/lang/String;Ljava/util/Locale;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.IdentityHashMap.unmaskNull(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.Calendar.clear(I)V", false);
        map.put("java.util.WeakHashMap$HashIterator.hasNext()Z", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap$KeySet.<init>(Ljava/util/concurrent/ConcurrentHashMap;)V", false);
        map.put("java.util.SimpleTimeZone.getEnd(Lsun/util/calendar/BaseCalendar;Lsun/util/calendar/BaseCalendar$Date;I)J", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireShared(J)V", false);
        map.put("java.util.LinkedList.offerFirst(Ljava/lang/Object;)Z", false);
        map.put("java.util.regex.Pattern.peek()I", false);
        map.put("java.util.prefs.AbstractPreferences.sync2()V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.submit(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.IdentityHashMap$Values.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.zip.InflaterOutputStream.<init>(Ljava/io/OutputStream;Ljava/util/zip/Inflater;I)V", false);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapIterator.<init>(Ljava/util/TreeMap$NavigableSubMap;Ljava/util/TreeMap$Entry;Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.logging.Logger.getHandlers()[Ljava/util/logging/Handler;", false);
        map.put("java.util.concurrent.LinkedTransferQueue$Node.isUnmatchedRequest()Z", true);
        map.put("java.util.Scanner.hasNextBigDecimal()Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Index.indexesDeletedNode()Z", true);
        map.put("java.util.concurrent.TimeUnit$7.toNanos(J)J", false);
        map.put("java.util.AbstractList.removeRange(II)V", false);
        map.put("java.util.regex.UnicodeProp$12.is(I)Z", true);
        map.put("java.util.IdentityHashMap$EntryIterator.<init>(Ljava/util/IdentityHashMap;)V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.checkedByteOffset(I)J", true);
        map.put("java.util.concurrent.SynchronousQueue$TransferStack.casHead(Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;)Z", false);
        map.put("java.util.concurrent.BlockingDeque.push(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$CloneableProperty.clone()Ljava/util/regex/Pattern$CharPropertyNames$CloneableProperty;", false);
        map.put("java.util.concurrent.ConcurrentHashMap.isEmpty()Z", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferQueue$QNode.casNext(Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;Ljava/util/concurrent/SynchronousQueue$TransferQueue$QNode;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.highestEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.doReleaseShared()V", false);
        map.put("java.util.Currency.getDisplayName()Ljava/lang/String;", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.<init>(IZ)V", false);
        map.put("java.util.zip.ZipInputStream.createZipEntry(Ljava/lang/String;)Ljava/util/zip/ZipEntry;", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.concurrent.FutureTask$Sync.innerRun()V", false);
        map.put("java.util.Locale$LocaleKey.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireQueued(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;J)Z", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take()Ljava/lang/Object;", false);
        map.put("java.util.Collections$SynchronizedCollection.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.jar.Attributes.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.SynchronousQueue.take()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.removeAt(I)V", false);
        map.put("java.util.LinkedList.clone()Ljava/lang/Object;", false);
        map.put("java.util.jar.Pack200$Packer.properties()Ljava/util/SortedMap;", false);
        map.put("java.util.AbstractMap$1$1.<init>(Ljava/util/AbstractMap$1;)V", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.drainTo(Ljava/util/Collection;I)I", false);
        map.put("java.util.AbstractList$Itr.<init>(Ljava/util/AbstractList;Ljava/util/AbstractList$1;)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue.firstOfMode(Z)Ljava/util/concurrent/LinkedTransferQueue$Node;", true);
        map.put("java.util.concurrent.LinkedBlockingDeque$DescendingItr.<init>(Ljava/util/concurrent/LinkedBlockingDeque;)V", false);
        map.put("java.util.TreeMap$AscendingSubMap.inRange(Ljava/lang/Object;Z)Z", false);
        map.put("java.util.ResourceBundle$Control.toBundleName(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.TreeMap.getFirstEntry()Ljava/util/TreeMap$Entry;", true);
        map.put("java.util.jar.Manifest.toLower(I)I", true);
        map.put("java.util.TreeMap$SubMap.firstKey()Ljava/lang/Object;", false);
        map.put("java.util.regex.Matcher.getTextLength()I", false);
        map.put("java.util.SimpleTimeZone.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.Formatter$FormatSpecifier.hexDouble(DI)Ljava/lang/String;", false);
        map.put("java.util.concurrent.PriorityBlockingQueue.size()I", false);
        map.put("java.util.Hashtable.<init>(IF)V", false);
        map.put("java.util.Locale$Builder.clearExtensions()Ljava/util/Locale$Builder;", false);
        map.put("java.util.JumboEnumSet.access$110(Ljava/util/JumboEnumSet;)I", false);
        map.put("java.util.Formatter$FormatSpecifier.localizedMagnitude(Ljava/lang/StringBuilder;JLjava/util/Formatter$Flags;ILjava/util/Locale;)Ljava/lang/StringBuilder;", false);
        map.put("java.util.PriorityQueue$Itr.hasNext()Z", true);
        map.put("java.util.DualPivotQuicksort.sort([J)V", true);
        map.put("java.util.Calendar.isFullyNormalized()Z", true);
        map.put("java.util.Arrays.binarySearch([IIII)I", true);
        map.put("java.util.List.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.WeakHashMap.expungeStaleEntries()V", false);
        map.put("java.util.MissingResourceException.getClassName()Ljava/lang/String;", true);
        map.put("java.util.GregorianCalendar.<init>(IIIIII)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue$Node.<clinit>()V", false);
        map.put("java.util.SimpleTimeZone.decodeEndRule()V", false);
        map.put("java.util.ArrayList.<init>()V", false);
        map.put("java.util.WeakHashMap.containsValue(Ljava/lang/Object;)Z", true);
        map.put("java.util.logging.Logger$1.run()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.hasWaiters(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;)Z", false);
        map.put("java.util.prefs.Preferences.addPreferenceChangeListener(Ljava/util/prefs/PreferenceChangeListener;)V", false);
        map.put("java.util.concurrent.ForkJoinPool.execute(Ljava/lang/Runnable;)V", false);
        map.put("java.util.AbstractMap$2$1.remove()V", false);
        map.put("java.util.zip.GZIPInputStream.readUByte(Ljava/io/InputStream;)I", false);
        map.put("java.util.Collections.checkedList(Ljava/util/List;Ljava/lang/Class;)Ljava/util/List;", false);
        map.put("java.util.prefs.AbstractPreferences$1.run()Ljava/lang/Boolean;", true);
        map.put("java.util.concurrent.atomic.AtomicLongArray.set(IJ)V", false);
        map.put("java.util.regex.Pattern.quote(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.atomic.AtomicLong.weakCompareAndSet(JJ)Z", false);
        map.put("java.util.JapaneseImperialCalendar.getGreatestMinimum(I)I", true);
        map.put("java.util.regex.Pattern$Curly.match0(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.ConcurrentHashMap.<init>(I)V", false);
        map.put("java.util.LinkedHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern.normalize()V", false);
        map.put("java.util.concurrent.Semaphore$Sync.getQueueLength()I", false);
        map.put("java.util.zip.InflaterOutputStream.close()V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.getWaitQueueLength()I", false);
        map.put("java.util.concurrent.TimeUnit$3.x(JJJ)J", false);
        map.put("java.util.BitSet.clear(II)V", false);
        map.put("java.util.AbstractCollection.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Collections$SynchronizedMap.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.TreeMap.headMap(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.logging.ConsoleHandler.flush()V", false);
        map.put("java.util.prefs.AbstractPreferences.removeNode()V", false);
        map.put("java.util.WeakHashMap$Values.clear()V", false);
        map.put("java.util.Collections$SynchronizedList.<init>(Ljava/util/List;Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(Ljava/lang/Thread;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.addAll(ILjava/util/Collection;)Z", false);
        map.put("java.util.BitSet.nextSetBit(I)I", true);
        map.put("java.util.IdentityHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.jar.JarInputStream.<init>(Ljava/io/InputStream;Z)V", false);
        map.put("java.util.Vector.addElement(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.newCondition()Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node.<init>(Ljava/lang/Thread;Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)V", false);
        map.put("java.util.concurrent.ConcurrentHashMap.containsValue(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.FormatFlagsConversionMismatchException.<init>(Ljava/lang/String;C)V", false);
        map.put("java.util.Collections$SynchronizedSortedSet.<init>(Ljava/util/SortedSet;)V", false);
        map.put("java.util.Locale.getExtensionKeys()Ljava/util/Set;", false);
        map.put("java.util.TimeZone$DisplayNames.<clinit>()V", false);
        map.put("java.util.EnumMap$EntryIterator.hasNext()Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$EntryIterator.next()Ljava/util/Map$Entry;", false);
        map.put("java.util.NavigableMap.descendingKeySet()Ljava/util/NavigableSet;", false);
        map.put("java.util.TreeMap$AscendingSubMap.headMap(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.Scanner.nextBigInteger()Ljava/math/BigInteger;", false);
        map.put("java.util.TreeMap.setColor(Ljava/util/TreeMap$Entry;Z)V", false);
        map.put("java.util.ArrayList$SubList$1.nextIndex()I", true);
        map.put("java.util.HashMap.resize(I)V", false);
        map.put("java.util.Collections$UnmodifiableCollection.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.TimeUnit$2.toMillis(J)J", true);
        map.put("java.util.concurrent.CopyOnWriteArraySet.isEmpty()Z", true);
        map.put("java.util.ArrayDeque.descendingIterator()Ljava/util/Iterator;", false);
        map.put("java.util.Arrays$ArrayList.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.finalize()V", false);
        map.put("java.util.BitSet.<init>([J)V", false);
        map.put("java.util.zip.GZIPOutputStream.close()V", false);
        map.put("java.util.jar.JarVerifier$2.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.zip.Deflater.setDictionary(J[BII)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.doGet(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.logging.LogRecord.getSourceMethodName()Ljava/lang/String;", false);
        map.put("java.util.WeakHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipCoder.decoder()Ljava/nio/charset/CharsetDecoder;", false);
        map.put("java.util.TreeMap$AscendingSubMap.absHighest()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.List.lastIndexOf(Ljava/lang/Object;)I", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$4.<init>(Ljava/util/regex/Pattern$CharPropertyNames$CloneableProperty;)V", false);
        map.put("java.util.regex.ASCII.isAlnum(I)Z", true);
        map.put("java.util.concurrent.PriorityBlockingQueue.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.Locale$Category.values()[Ljava/util/Locale$Category;", false);
        map.put("java.util.PriorityQueue.comparator()Ljava/util/Comparator;", true);
        map.put("java.util.LinkedList.removeLastOccurrence(Ljava/lang/Object;)Z", false);
        map.put("java.util.Arrays.deepHashCode([Ljava/lang/Object;)I", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$1.make()Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.DualPivotQuicksort.sort([I)V", true);
        map.put("java.util.JapaneseImperialCalendar.internalGet(I)I", false);
        map.put("java.util.ServiceLoader.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ForkJoinTask$AdaptedRunnable.exec()Z", false);
        map.put("java.util.concurrent.ForkJoinTask.cancelIgnoringExceptions()V", false);
        map.put("java.util.WeakHashMap.clear()V", false);
        map.put("java.util.JapaneseImperialCalendar.setFieldsComputed(I)V", false);
        map.put("java.util.prefs.AbstractPreferences.removeNodeChangeListener(Ljava/util/prefs/NodeChangeListener;)V", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.drainTo(Ljava/util/Collection;I)I", false);
        map.put("java.util.XMLUtils.importProperties(Ljava/util/Properties;Lorg/w3c/dom/Element;)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.drainTo(Ljava/util/Collection;I)I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.comparator()Ljava/util/Comparator;", false);
        map.put("java.util.Collections$SetFromMap.toString()Ljava/lang/String;", false);
        map.put("java.util.zip.ZipFile.getEntry(J[BZ)J", false);
        map.put("java.util.logging.FileHandler$MeteredStream.close()V", true);
        map.put("java.util.UUID.toString()Ljava/lang/String;", false);
        map.put("java.util.Properties.getProperty(Ljava/lang/String;)Ljava/lang/String;", true);
        map.put("java.util.HashMap.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.EnumMap.containsValue(Ljava/lang/Object;)Z", true);
        map.put("java.util.Calendar.createCalendar(Ljava/util/TimeZone;Ljava/util/Locale;)Ljava/util/Calendar;", false);
        map.put("java.util.ResourceBundle$1.handleGetObject(Ljava/lang/String;)Ljava/lang/Object;", true);
        map.put("java.util.Calendar.getMinimalDaysInFirstWeek()I", true);
        map.put("java.util.Locale$Category.valueOf(Ljava/lang/String;)Ljava/util/Locale$Category;", false);
        map.put("java.util.concurrent.ForkJoinPool.nextWorkerName()Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue$Node.casNext(Ljava/util/concurrent/ConcurrentLinkedQueue$Node;Ljava/util/concurrent/ConcurrentLinkedQueue$Node;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.higherKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator.advance()V", false);
        map.put("java.util.ServiceLoader.<init>(Ljava/lang/Class;Ljava/lang/ClassLoader;)V", false);
        map.put("java.util.prefs.AbstractPreferences.put(Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.JapaneseImperialCalendar.computeFields()V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.getTask()Ljava/lang/Runnable;", false);
        map.put("java.util.concurrent.SynchronousQueue.<clinit>()V", false);
        map.put("java.util.Vector.subList(II)Ljava/util/List;", false);
        map.put("java.util.Timer.serialNumber()I", false);
        map.put("java.util.Timer.scheduleAtFixedRate(Ljava/util/TimerTask;Ljava/util/Date;J)V", false);
        map.put("java.util.prefs.XmlSupport.export(Ljava/io/OutputStream;Ljava/util/prefs/Preferences;Z)V", false);
        map.put("java.util.BitSet.length()I", true);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.setHead(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)V", false);
        map.put("java.util.zip.Deflater.deflate([BIII)I", false);
        map.put("java.util.GregorianCalendar.<init>(Ljava/util/TimeZone;Ljava/util/Locale;)V", false);
        map.put("java.util.SubList.<init>(Ljava/util/AbstractList;II)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.size()I", false);
        map.put("java.util.DualPivotQuicksort.sort([F)V", false);
        map.put("java.util.concurrent.Semaphore$FairSync.compareAndSetState(II)Z", false);
        map.put("java.util.logging.LogManager$LoggerWeakRef.dispose()V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.setRejectedExecutionHandler(Ljava/util/concurrent/RejectedExecutionHandler;)V", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.removeLastOccurrence(Ljava/lang/Object;)Z", false);
        map.put("java.util.EnumMap$EntryIterator$Entry.getKey()Ljava/lang/Enum;", true);
        map.put("java.util.GregorianCalendar.isLeapYear(I)Z", false);
        map.put("java.util.BitSet.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.WeakHashMap$Entry.<init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;ILjava/util/WeakHashMap$Entry;)V", false);
        map.put("java.util.Collections$UnmodifiableMap.containsValue(Ljava/lang/Object;)Z", false);
        map.put("java.util.prefs.Preferences.nodeExists(Ljava/lang/String;)Z", false);
        map.put("java.util.concurrent.ExecutionException.<init>(Ljava/lang/String;Ljava/lang/Throwable;)V", false);
        map.put("java.util.regex.Pattern.setDifference(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;)Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$2.make()Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.LinkedHashMap.clear()V", false);
        map.put("java.util.NavigableSet.descendingIterator()Ljava/util/Iterator;", false);
        map.put("java.util.MissingResourceException.getKey()Ljava/lang/String;", true);
        map.put("java.util.concurrent.atomic.AtomicStampedReference.objectFieldOffset(Lsun/misc/Unsafe;Ljava/lang/String;Ljava/lang/Class;)J", false);
        map.put("java.util.concurrent.locks.Condition.signal()V", false);
        map.put("java.util.Collections$CheckedSortedSet.tailSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.prefs.WindowsPreferences.toJavaName([B)Ljava/lang/String;", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.addIfAbsent(Ljava/lang/Object;)Z", false);
        map.put("java.util.IllegalFormatConversionException.getArgumentClass()Ljava/lang/Class;", true);
        map.put("java.util.BitSet.set(II)V", false);
        map.put("java.util.concurrent.atomic.AtomicInteger.getAndIncrement()I", false);
        map.put("java.util.LinkedHashSet.<init>()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.tailMap(Ljava/lang/Object;Z)Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;", false);
        map.put("java.util.TimeZone.setDefault(Ljava/util/TimeZone;)V", false);
        map.put("java.util.DualPivotQuicksort.sort([C)V", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.getDelay(Ljava/util/concurrent/TimeUnit;)J", false);
        map.put("java.util.zip.Adler32.update(II)I", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.ceilingKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.BitSet.set(IIZ)V", false);
        map.put("java.util.Scanner.next(Ljava/util/regex/Pattern;)Ljava/lang/String;", false);
        map.put("java.util.TaskQueue.clear()V", false);
        map.put("java.util.JumboEnumSet.addAll()V", false);
        map.put("java.util.Collections.emptyEnumeration()Ljava/util/Enumeration;", true);
        map.put("java.util.Vector$Itr.hasNext()Z", true);
        map.put("java.util.TreeMap.access$300(Ljava/util/TreeMap;)Ljava/util/Comparator;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.access$600(Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;)Ljava/util/concurrent/ConcurrentSkipListMap;", true);
        map.put("java.util.logging.LoggingProxyImpl.getLevel(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.WeakHashMap.values()Ljava/util/Collection;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(IJ)Z", false);
        map.put("java.util.ArrayList.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.prefs.AbstractPreferences.flushSpi()V", false);
        map.put("java.util.JumboEnumSet.typeCheck(Ljava/lang/Enum;)V", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater$LockedUpdater.get(Ljava/lang/Object;)J", false);
        map.put("java.util.jar.JarVerifier.unsignedEntryNames(Ljava/util/jar/JarFile;)Ljava/util/Enumeration;", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.SubList.get(I)Ljava/lang/Object;", false);
        map.put("java.util.Calendar.hashCode()I", false);
        map.put("java.util.regex.Pattern.charPropertyNodeFor(Ljava/lang/String;)Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.EnumSet.of(Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/util/EnumSet;", false);
        map.put("java.util.concurrent.ForkJoinPool.newTaskFor(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/RunnableFuture;", false);
        map.put("java.util.Formatter.nonNullAppendable(Ljava/lang/Appendable;)Ljava/lang/Appendable;", false);
        map.put("java.util.ArrayList.remove(I)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lockInterruptibly()V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$AbstractItr.next()Ljava/lang/Object;", false);
        map.put("java.util.ResourceBundle.loadBundle(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/ResourceBundle$Control;Z)Ljava/util/ResourceBundle;", false);
        map.put("java.util.prefs.AbstractPreferences.removePreferenceChangeListener(Ljava/util/prefs/PreferenceChangeListener;)V", false);
        map.put("java.util.zip.ZipEntry.setCrc(J)V", false);
        map.put("java.util.NavigableMap.subMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.shutdownNow()Ljava/util/List;", false);
        map.put("java.util.EnumMap.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.Vector.get(I)Ljava/lang/Object;", true);
        map.put("java.util.Arrays.copyOf([DI)[D", false);
        map.put("java.util.regex.Matcher.pattern()Ljava/util/regex/Pattern;", true);
        map.put("java.util.DualPivotQuicksort.sort([D)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ExecutionException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(Ljava/lang/Object;I)I", true);
        map.put("java.util.ArrayList$ListItr.<init>(Ljava/util/ArrayList;I)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.FutureTask.<init>(Ljava/lang/Runnable;Ljava/lang/Object;)V", false);
        map.put("java.util.Stack.clone()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$UnixDollar.<init>(Z)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.remove()V", false);
        map.put("java.util.Collections$SingletonList.<init>(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.Executors.newSingleThreadScheduledExecutor()Ljava/util/concurrent/ScheduledExecutorService;", false);
        map.put("java.util.concurrent.RecursiveAction.compute()V", false);
        map.put("java.util.Arrays.hashCode([Z)I", true);
        map.put("java.util.concurrent.ConcurrentHashMap.segmentForHash(I)Ljava/util/concurrent/ConcurrentHashMap$Segment;", false);
        map.put("java.util.prefs.WindowsPreferences.keysSpi()[Ljava/lang/String;", false);
        map.put("java.util.zip.ZipOutputStream.writeCEN(Ljava/util/zip/ZipOutputStream$XEntry;)V", false);
        map.put("java.util.zip.CRC32.update([BII)V", false);
        map.put("java.util.zip.ZipEntry.setExtra([B)V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.getCompletedTaskCount()J", false);
        map.put("java.util.LinkedList.remove(I)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ExecutionException.<init>()V", false);
        map.put("java.util.GregorianCalendar.getCutoverCalendarSystem()Lsun/util/calendar/BaseCalendar;", false);
        map.put("java.util.Collections.singletonList(Ljava/lang/Object;)Ljava/util/List;", false);
        map.put("java.util.concurrent.LinkedTransferQueue.poll()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.BlockingDeque.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.locks.Lock.tryLock(JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.logging.Handler.getLevel()Ljava/util/logging/Level;", true);
        map.put("java.util.HashSet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.UUID.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentMap.remove(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.Calendar.getDisplayName(IILjava/util/Locale;)Ljava/lang/String;", true);
        map.put("java.util.LinkedHashMap$ValueIterator.<init>(Ljava/util/LinkedHashMap;Ljava/util/LinkedHashMap$1;)V", false);
        map.put("java.util.concurrent.atomic.AtomicMarkableReference$Pair.of(Ljava/lang/Object;Z)Ljava/util/concurrent/atomic/AtomicMarkableReference$Pair;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Values.<init>(Ljava/util/concurrent/ConcurrentNavigableMap;)V", false);
        map.put("java.util.Hashtable.containsKey(Ljava/lang/Object;)Z", true);
        map.put("java.util.Collections.checkedSet(Ljava/util/Set;Ljava/lang/Class;)Ljava/util/Set;", false);
        map.put("java.util.ResourceBundle.checkList(Ljava/util/List;)Z", false);
        map.put("java.util.ListResourceBundle.getKeys()Ljava/util/Enumeration;", false);
        map.put("java.util.zip.Inflater.ensureOpen()V", false);
        map.put("java.util.zip.GZIPOutputStream.write([BII)V", false);
        map.put("java.util.Scanner.cacheResult()V", false);
        map.put("java.util.XMLUtils$Resolver.resolveEntity(Ljava/lang/String;Ljava/lang/String;)Lorg/xml/sax/InputSource;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.<init>()V", true);
        map.put("java.util.logging.Level.toString()Ljava/lang/String;", true);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.zip.ZipFile$ZipFileInflaterInputStream.<init>(Ljava/util/zip/ZipFile;Ljava/util/zip/ZipFile$ZipFileInputStream;Ljava/util/zip/Inflater;I)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.doRemove(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.ComparableTimSort.<clinit>()V", false);
        map.put("java.util.Stack.removeAllElements()V", false);
        map.put("java.util.JapaneseImperialCalendar.internalGetEra()I", false);
        map.put("java.util.SimpleTimeZone.hashCode()I", true);
        map.put("java.util.Collections$EmptyMap.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.JapaneseImperialCalendar.isFieldSet(II)Z", false);
        map.put("java.util.concurrent.locks.ReentrantLock$Sync.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.Collection.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.logging.StreamHandler.close()V", false);
        map.put("java.util.RegularEnumSet.isEmpty()Z", true);
        map.put("java.util.concurrent.ForkJoinTask.join()Ljava/lang/Object;", false);
        map.put("java.util.zip.InflaterOutputStream.<init>(Ljava/io/OutputStream;)V", false);
        map.put("java.util.Properties.loadConvert([CII[C)Ljava/lang/String;", false);
        map.put("java.util.concurrent.TimeUnit$2.x(JJJ)J", false);
        map.put("java.util.TreeMap$NavigableSubMap.inRange(Ljava/lang/Object;Z)Z", false);
        map.put("java.util.concurrent.TimeUnit$1.convert(JLjava/util/concurrent/TimeUnit;)J", false);
        map.put("java.util.Collections$SynchronizedCollection.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.ArrayDeque.removeFirst()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.atomic.AtomicStampedReference$Pair.of(Ljava/lang/Object;I)Ljava/util/concurrent/atomic/AtomicStampedReference$Pair;", false);
        map.put("java.util.zip.Deflater.getBytesRead(J)J", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.getCorePoolSize()I", true);
        map.put("java.util.DualPivotQuicksort.sort([B)V", true);
        map.put("java.util.regex.Matcher.search(I)Z", false);
        map.put("java.util.FormatFlagsConversionMismatchException.getConversion()C", true);
        map.put("java.util.logging.LoggingMXBean.getLoggerLevel(Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.IdentityHashMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.ListResourceBundle.loadLookup()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.findNode(Ljava/lang/Comparable;)Ljava/util/concurrent/ConcurrentSkipListMap$Node;", false);
        map.put("java.util.Collections$ReverseComparator.readResolve()Ljava/lang/Object;", true);
        map.put("java.util.zip.CRC32.<init>()V", true);
        map.put("java.util.prefs.AbstractPreferences.remove(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.toString()Ljava/lang/String;", false);
        map.put("java.util.ArrayList$SubList$1.<init>(Ljava/util/ArrayList$SubList;II)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.doAcquireSharedNanos(JJ)Z", false);
        map.put("java.util.zip.ZipFile$ZipFileInputStream.close()V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubList.indexOf(Ljava/lang/Object;)I", false);
        map.put("java.util.TreeMap$Entry.setValue(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.UUID.<init>(JJ)V", false);
        map.put("java.util.concurrent.TimeUnit.sleep(J)V", false);
        map.put("java.util.Calendar.adjustStamp()V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.addAllAbsent(Ljava/util/Collection;)I", false);
        map.put("java.util.AbstractMap$2$1.next()Ljava/lang/Object;", false);
        map.put("java.util.ArrayDeque.doubleCapacity()V", false);
        map.put("java.util.concurrent.locks.ReentrantLock$NonfairSync.nonfairTryAcquire(I)Z", false);
        map.put("java.util.concurrent.DelayQueue.take()Ljava/util/concurrent/Delayed;", false);
        map.put("java.util.TreeMap$NavigableSubMap.absHighest()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.Objects.requireNonNull(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.AbstractExecutorService.invokeAll(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/util/List;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.setIndex(Ljava/util/concurrent/RunnableScheduledFuture;I)V", false);
        map.put("java.util.regex.Matcher.match(II)Z", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.delayedExecute(Ljava/util/concurrent/RunnableScheduledFuture;)V", false);
        map.put("java.util.concurrent.BlockingQueue.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.zip.ZipEntry.javaToDosTime(J)J", false);
        map.put("java.util.zip.ZipFile$ZipFileInflaterInputStream.fill()V", false);
        map.put("java.util.Collections$AsLIFOQueue.toString()Ljava/lang/String;", false);
        map.put("java.util.concurrent.Phaser.onAdvance(II)Z", true);
        map.put("java.util.regex.Matcher.start(I)I", false);
        map.put("java.util.zip.InflaterOutputStream.write(I)V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.getAndDecrement(I)I", false);
        map.put("java.util.Iterator.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Index.link(Ljava/util/concurrent/ConcurrentSkipListMap$Index;Ljava/util/concurrent/ConcurrentSkipListMap$Index;)Z", false);
        map.put("java.util.Formatter.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/util/Locale;)V", false);
        map.put("java.util.logging.Level.access$000(Ljava/util/logging/Level;)Ljava/lang/String;", true);
        map.put("java.util.logging.StreamHandler.reportError(Ljava/lang/String;Ljava/lang/Exception;I)V", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$20.<init>()V", false);
        map.put("java.util.regex.Pattern$BnM.<init>([I[I[ILjava/util/regex/Pattern$Node;)V", false);
        map.put("java.util.TreeMap$Values.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.TreeSet.pollFirst()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.floorKey(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.ResourceBundle$CacheKeyReference.getCacheKey()Ljava/util/ResourceBundle$CacheKey;", false);
        map.put("java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAdd(Ljava/lang/Object;J)J", false);
        map.put("java.util.TreeMap.tailMap(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.Locale$LocaleNameGetter.access$500()Ljava/util/Locale$LocaleNameGetter;", true);
        map.put("java.util.Collections$SynchronizedMap.containsKey(Ljava/lang/Object;)Z", false);
        map.put("java.util.BitSet.toLongArray()[J", false);
        map.put("java.util.ArrayList.addAll(ILjava/util/Collection;)Z", false);
        map.put("java.util.NavigableSet.lower(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$KeySet.higher(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.jar.JarVerifier.doneWithMeta()V", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.remove(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.atomic.AtomicInteger.floatValue()F", true);
        map.put("java.util.Hashtable$ValueCollection.clear()V", false);
        map.put("java.util.regex.Pattern.toString()Ljava/lang/String;", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.isBeforeEnd(Ljava/util/concurrent/ConcurrentSkipListMap$Node;)Z", false);
        map.put("java.util.concurrent.DelayQueue.poll()Ljava/util/concurrent/Delayed;", false);
        map.put("java.util.Vector.indexOf(Ljava/lang/Object;)I", true);
        map.put("java.util.TreeMap.putAll(Ljava/util/Map;)V", false);
        map.put("java.util.Currency.getSymbol()Ljava/lang/String;", false);
        map.put("java.util.Locale.getDefault()Ljava/util/Locale;", false);
        map.put("java.util.concurrent.ForkJoinTask$AdaptedCallable.setRawResult(Ljava/lang/Object;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.add(ILjava/lang/Object;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.descendingMap()Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.Vector.clone()Ljava/lang/Object;", false);
        map.put("java.util.Collections$CheckedCollection.size()I", false);
        map.put("java.util.PriorityQueue.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.Arrays.hashCode([S)I", true);
        map.put("java.util.AbstractSequentialList.set(ILjava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.regex.Matcher.toMatchResult()Ljava/util/regex/MatchResult;", false);
        map.put("java.util.regex.Matcher.requireEnd()Z", true);
        map.put("java.util.Scanner.toDecoder(Ljava/lang/String;)Ljava/nio/charset/CharsetDecoder;", false);
        map.put("java.util.DualPivotQuicksort.sort([SII)V", true);
        map.put("java.util.JapaneseImperialCalendar.<clinit>()V", false);
        map.put("java.util.concurrent.ArrayBlockingQueue$Itr.next()Ljava/lang/Object;", false);
        map.put("java.util.IdentityHashMap.readObject(Ljava/io/ObjectInputStream;)V", true);
        map.put("java.util.Collections$EmptyList.readResolve()Ljava/lang/Object;", true);
        map.put("java.util.concurrent.TimeUnit.<init>(Ljava/lang/String;ILjava/util/concurrent/TimeUnit$1;)V", false);
        map.put("java.util.EnumMap.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.<init>(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer;)V", false);
        map.put("java.util.regex.Pattern$Ques.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.allowsCoreThreadTimeOut()Z", true);
        map.put("java.util.spi.LocaleNameProvider.getDisplayScript(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;", true);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater.set(Ljava/lang/Object;I)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue$Node.casItem(Ljava/lang/Object;Ljava/lang/Object;)Z", false);
        map.put("java.util.Date.toGMTString()Ljava/lang/String;", false);
        map.put("java.util.regex.Pattern$Prolog.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.Arrays.copyOfRange([SII)[S", false);
        map.put("java.util.regex.Pattern.unicodeScriptPropertyFor(Ljava/lang/String;)Ljava/util/regex/Pattern$CharProperty;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.releaseShared(I)Z", false);
        map.put("java.util.zip.GZIPInputStream.readUInt(Ljava/io/InputStream;)J", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.size()I", false);
        map.put("java.util.EnumSet.noneOf(Ljava/lang/Class;)Ljava/util/EnumSet;", false);
        map.put("java.util.EnumMap$EntryIterator$Entry.<init>(Ljava/util/EnumMap$EntryIterator;ILjava/util/EnumMap$1;)V", false);
        map.put("java.util.Arrays.binarySearch([CC)I", true);
        map.put("java.util.Calendar.computeTime()V", false);
        map.put("java.util.concurrent.TimeUnit$4.toMillis(J)J", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.getQueueSize()I", true);
        map.put("java.util.concurrent.CopyOnWriteArrayList.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.tryAcquireShared(I)I", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.run()V", false);
        map.put("java.util.Collections$CheckedCollection.checkedCopyOf(Ljava/util/Collection;)Ljava/util/Collection;", false);
        map.put("java.util.logging.Logger.findSystemResourceBundle(Ljava/util/Locale;)Ljava/util/ResourceBundle;", false);
        map.put("java.util.concurrent.SynchronousQueue.remainingCapacity()I", true);
        map.put("java.util.ResourceBundle$Control$1.<init>(Ljava/util/ResourceBundle$Control;ZLjava/lang/ClassLoader;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.CompletionService.submit(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.descendingMap()Ljava/util/concurrent/ConcurrentNavigableMap;", false);
        map.put("java.util.MissingResourceException.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.Collections$CheckedCollection.toString()Ljava/lang/String;", false);
        map.put("java.util.TreeMap$NavigableSubMap.lowerEntry(Ljava/lang/Object;)Ljava/util/Map$Entry;", false);
        map.put("java.util.UnknownFormatConversionException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.LinkedList.unlink(Ljava/util/LinkedList$Node;)Ljava/lang/Object;", false);
        map.put("java.util.BitSet.size()I", true);
        map.put("java.util.zip.Adler32.update([B)V", false);
        map.put("java.util.IdentityHashMap$EntryIterator$Entry.<init>(Ljava/util/IdentityHashMap$EntryIterator;I)V", false);
        map.put("java.util.concurrent.Executors.newFixedThreadPool(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;", false);
        map.put("java.util.Calendar.<init>()V", false);
        map.put("java.util.concurrent.BlockingDeque.peek()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.EnumMap.put(Ljava/lang/Enum;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.TreeSet.<init>(Ljava/util/Comparator;)V", false);
        map.put("java.util.Collections.checkedSortedMap(Ljava/util/SortedMap;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/SortedMap;", false);
        map.put("java.util.zip.Adler32.updateByteBuffer(IJII)I", false);
        map.put("java.util.regex.UnicodeProp$4.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.jar.Pack200$Unpacker.addPropertyChangeListener(Ljava/beans/PropertyChangeListener;)V", false);
        map.put("java.util.jar.Attributes.putValue(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeyIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.Formatter.<init>(Ljava/io/OutputStream;Ljava/lang/String;Ljava/util/Locale;)V", false);
        map.put("java.util.AbstractList.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.Scanner.remove()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator.<init>(Ljava/util/concurrent/ConcurrentSkipListMap$SubMap;)V", false);
        map.put("java.util.concurrent.ConcurrentHashMap$Segment.scanAndLock(Ljava/lang/Object;I)V", false);
        map.put("java.util.ArrayList.subList(II)Ljava/util/List;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitUntil(Ljava/util/Date;)Z", false);
        map.put("java.util.prefs.Preferences.systemNodeForPackage(Ljava/lang/Class;)Ljava/util/prefs/Preferences;", false);
        map.put("java.util.concurrent.TimeUnit$2.excessNanos(JJ)I", true);
        map.put("java.util.concurrent.BlockingQueue.isEmpty()Z", false);
        map.put("java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator.<init>(Ljava/util/TreeMap$NavigableSubMap;Ljava/util/TreeMap$Entry;Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.concurrent.Executors.unconfigurableExecutorService(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/ExecutorService;", false);
        map.put("java.util.jar.JarFile$JarFileEntry.getCertificates()[Ljava/security/cert/Certificate;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.hasWaiters(Ljava/util/concurrent/locks/Condition;)Z", false);
        map.put("java.util.concurrent.ForkJoinPool.getFactory()Ljava/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory;", true);
        map.put("java.util.Properties.<clinit>()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.keyIterator()Ljava/util/Iterator;", false);
        map.put("java.util.logging.Logger.updateEffectiveLevel()V", false);
        map.put("java.util.concurrent.Phaser.bulkRegister(I)I", false);
        map.put("java.util.Collections$SynchronizedCollection.<init>(Ljava/util/Collection;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.replace(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.ResourceBundle$RBClassLoader.<clinit>()V", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerArray.toString()Ljava/lang/String;", false);
        map.put("java.util.AbstractMap.keySet()Ljava/util/Set;", false);
        map.put("java.util.Arrays.fill([ZZ)V", true);
        map.put("java.util.Collections$EmptySet.iterator()Ljava/util/Iterator;", true);
        map.put("java.util.concurrent.ExecutorService.isShutdown()Z", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.Vector.capacity()I", true);
        map.put("java.util.AbstractList.set(ILjava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.subMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.PriorityQueue.siftUpUsingComparator(ILjava/lang/Object;)V", false);
        map.put("java.util.concurrent.CompletionService.poll()Ljava/util/concurrent/Future;", false);
        map.put("java.util.concurrent.ForkJoinTask.quietlyJoin()V", false);
        map.put("java.util.TaskQueue.quickRemove(I)V", false);
        map.put("java.util.Observable.addObserver(Ljava/util/Observer;)V", false);
        map.put("java.util.TimeZone.getDisplayName(ZILjava/util/Locale;)Ljava/lang/String;", false);
        map.put("java.util.Stack.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.regex.UnicodeProp.is(I)Z", false);
        map.put("java.util.Arrays.binarySearch0([DIID)I", false);
        map.put("java.util.jar.JarFile.getInputStream(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;", false);
        map.put("java.util.EnumMap.clone()Ljava/util/EnumMap;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.newCondition()Ljava/util/concurrent/locks/Condition;", false);
        map.put("java.util.regex.Pattern$TreeInfo.<init>()V", false);
        map.put("java.util.Calendar.get(I)I", true);
        map.put("java.util.LinkedHashMap$KeyIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$SingleU.<init>(I)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator.add(Ljava/lang/Object;)V", false);
        map.put("java.util.Arrays.binarySearch([DIID)I", false);
        map.put("java.util.logging.Level.getName()Ljava/lang/String;", true);
        map.put("java.util.zip.DataFormatException.<init>()V", false);
        map.put("java.util.TreeMap.floorKey(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.regex.Pattern$Start.<init>(Ljava/util/regex/Pattern$Node;)V", false);
        map.put("java.util.EnumMap$EntryIterator.<init>(Ljava/util/EnumMap;Ljava/util/EnumMap$1;)V", false);
        map.put("java.util.concurrent.LinkedBlockingQueue$Itr.nextNode(Ljava/util/concurrent/LinkedBlockingQueue$Node;)Ljava/util/concurrent/LinkedBlockingQueue$Node;", true);
        map.put("java.util.concurrent.Phaser.isTerminated()Z", true);
        map.put("java.util.logging.LogManager.readConfiguration()V", true);
        map.put("java.util.Timer.schedule(Ljava/util/TimerTask;Ljava/util/Date;)V", false);
        map.put("java.util.Arrays$LegacyMergeSort.<init>()V", true);
        map.put("java.util.concurrent.atomic.AtomicMarkableReference.casPair(Ljava/util/concurrent/atomic/AtomicMarkableReference$Pair;Ljava/util/concurrent/atomic/AtomicMarkableReference$Pair;)Z", false);
        map.put("java.util.ArrayList.rangeCheck(I)V", false);
        map.put("java.util.regex.Pattern$Conditional.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.Hashtable.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.regex.Pattern$CharPropertyNames$18.<init>()V", false);
        map.put("java.util.JumboEnumSet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.Scanner$1.create(Ljava/lang/String;)Ljava/util/regex/Pattern;", false);
        map.put("java.util.regex.PatternSyntaxException.getIndex()I", true);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet$1.<init>(Ljava/util/Collections$CheckedMap$CheckedEntrySet;Ljava/util/Iterator;Ljava/lang/Class;)V", false);
        map.put("java.util.Collections.synchronizedSortedSet(Ljava/util/SortedSet;)Ljava/util/SortedSet;", false);
        map.put("java.util.Scanner$1.create(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.Hashtable$EntrySet.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.Hashtable$KeySet.contains(Ljava/lang/Object;)Z", true);
        map.put("java.util.LinkedList$DescendingIterator.next()Ljava/lang/Object;", false);
        map.put("java.util.ArrayList$ListItr.nextIndex()I", true);
        map.put("java.util.Currency.readLongArray(Ljava/io/DataInputStream;I)[J", false);
        map.put("java.util.EnumMap$ValueIterator.<init>(Ljava/util/EnumMap;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.floor(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.SimpleTimeZone.unpackRules([B)V", false);
        map.put("java.util.PriorityQueue$Itr.next()Ljava/lang/Object;", false);
        map.put("java.util.Deque.offerLast(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap$NavigableSubMap.lastKey()Ljava/lang/Object;", false);
        map.put("java.util.Currency.getInstance(Ljava/lang/String;)Ljava/util/Currency;", false);
        map.put("java.util.zip.ZipEntry.<init>(Ljava/util/zip/ZipEntry;)V", false);
        map.put("java.util.concurrent.LinkedTransferQueue.findAndRemove(Ljava/lang/Object;)Z", false);
        map.put("java.util.Arrays.fill([II)V", true);
        map.put("java.util.Arrays.copyOfRange([JII)[J", false);
        map.put("java.util.concurrent.SynchronousQueue.clear()V", true);
        map.put("java.util.concurrent.ForkJoinWorkerThread.helpJoinTask(Ljava/util/concurrent/ForkJoinTask;)Z", false);
        map.put("java.util.concurrent.TimeUnit$2.toMicros(J)J", true);
        map.put("java.util.Random.seedUniquifier()J", false);
        map.put("java.util.Map$Entry.getValue()Ljava/lang/Object;", false);
        map.put("java.util.zip.Inflater.setDictionary([BII)V", false);
        map.put("java.util.XMLUtils.save(Ljava/util/Properties;Ljava/io/OutputStream;Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.Executors$PrivilegedCallableUsingCurrentClassLoader.access$100(Ljava/util/concurrent/Executors$PrivilegedCallableUsingCurrentClassLoader;)Ljava/lang/ClassLoader;", true);
        map.put("java.util.EnumSet.clone()Ljava/lang/Object;", false);
        map.put("java.util.NavigableMap.ceilingKey(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedQueue.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.ComparableTimSort.countRunAndMakeAscending([Ljava/lang/Object;II)I", false);
        map.put("java.util.WeakHashMap$KeySet.<init>(Ljava/util/WeakHashMap;)V", false);
        map.put("java.util.Observable.notifyObservers()V", false);
        map.put("java.util.AbstractSet.<init>()V", true);
        map.put("java.util.IllegalFormatCodePointException.getMessage()Ljava/lang/String;", false);
        map.put("java.util.ArrayDeque.offerLast(Ljava/lang/Object;)Z", false);
        map.put("java.util.IllformedLocaleException.<init>(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.drainTo(Ljava/util/Collection;)I", false);
        map.put("java.util.concurrent.ForkJoinPool.getUncaughtExceptionHandler()Ljava/lang/Thread$UncaughtExceptionHandler;", true);
        map.put("java.util.logging.LoggingProxyImpl.getLoggerNames()Ljava/util/List;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$DescendingItr.<init>(Ljava/util/concurrent/ConcurrentLinkedDeque;Ljava/util/concurrent/ConcurrentLinkedDeque$1;)V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.<clinit>()V", false);
        map.put("java.util.BitSet.wordIndex(I)I", true);
        map.put("java.util.logging.Logger.isLoggable(Ljava/util/logging/Level;)Z", true);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.<init>(I)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.inBounds(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.Semaphore.toString()Ljava/lang/String;", false);
        map.put("java.util.LinkedHashSet.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.Stack.peek()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ForkJoinTask.invokeAll(Ljava/util/concurrent/ForkJoinTask;Ljava/util/concurrent/ForkJoinTask;)V", false);
        map.put("java.util.concurrent.atomic.AtomicLongArray.<init>(I)V", false);
        map.put("java.util.UUID.compareTo(Ljava/util/UUID;)I", true);
        map.put("java.util.logging.MemoryHandler.setLevel(Ljava/util/logging/Level;)V", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext()Z", false);
        map.put("java.util.concurrent.Executors.callable(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Callable;", false);
        map.put("java.util.jar.JarEntry.<init>(Ljava/util/jar/JarEntry;)V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.tryAcquireNanos(IJ)Z", false);
        map.put("java.util.Formatter.ioException()Ljava/io/IOException;", true);
        map.put("java.util.LinkedHashMap.access$100(Ljava/util/LinkedHashMap;)Ljava/util/LinkedHashMap$Entry;", true);
        map.put("java.util.Locale$Builder.setUnicodeLocaleKeyword(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Locale$Builder;", false);
        map.put("java.util.concurrent.FutureTask$Sync.innerIsDone()Z", true);
        map.put("java.util.concurrent.TimeUnit$5.toDays(J)J", true);
        map.put("java.util.regex.Pattern$UnixDollar.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;", false);
        map.put("java.util.Collections$SetFromMap.size()I", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.size()I", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferStack.shouldSpin(Ljava/util/concurrent/SynchronousQueue$TransferStack$SNode;)Z", true);
        map.put("java.util.ArrayList$SubList.listIterator(I)Ljava/util/ListIterator;", false);
        map.put("java.util.EnumMap.<init>(Ljava/util/EnumMap;)V", false);
        map.put("java.util.Collections$CopiesList.subList(II)Ljava/util/List;", false);
        map.put("java.util.zip.ZipFile.startsWithLocHeader()Z", true);
        map.put("java.util.logging.ConsoleHandler.setFormatter(Ljava/util/logging/Formatter;)V", false);
        map.put("java.util.concurrent.SynchronousQueue.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.concurrent.ExecutorCompletionService.submit(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.regex.Pattern$SliceUS.toLower(I)I", false);
        map.put("java.util.zip.DeflaterOutputStream.<init>(Ljava/io/OutputStream;Ljava/util/zip/Deflater;I)V", false);
        map.put("java.util.regex.Pattern$GroupCurly.study(Ljava/util/regex/Pattern$TreeInfo;)Z", false);
        map.put("java.util.concurrent.CountDownLatch$Sync.<init>(I)V", false);
        map.put("java.util.Deque.peek()Ljava/lang/Object;", false);
        map.put("java.util.Locale.initDefault()V", false);
        map.put("java.util.AbstractList.rangeCheckForAdd(I)V", false);
        map.put("java.util.concurrent.ForkJoinTask.externalAwaitDone()I", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.signalNotEmpty()V", false);
        map.put("java.util.LinkedHashMap$Entry.addBefore(Ljava/util/LinkedHashMap$Entry;)V", false);
        map.put("java.util.zip.ZipCoder.isUTF8()Z", true);
        map.put("java.util.IdentityHashMap$Values.clear()V", false);
        map.put("java.util.zip.DeflaterOutputStream.write([B)V", false);
        map.put("java.util.Random.next(I)I", false);
        map.put("java.util.Collections.checkedMap(Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/Map;", false);
        map.put("java.util.Properties.clone()Ljava/lang/Object;", false);
        map.put("java.util.jar.JarVerifier.getCodeSource(Ljava/net/URL;Ljava/util/jar/JarFile;Ljava/util/jar/JarEntry;)Ljava/security/CodeSource;", false);
        map.put("java.util.concurrent.locks.Condition.await()V", false);
        map.put("java.util.ArrayList$SubList$1.add(Ljava/lang/Object;)V", false);
        map.put("java.util.Vector.lastElement()Ljava/lang/Object;", true);
        map.put("java.util.GregorianCalendar.set(IIIIII)V", false);
        map.put("java.util.TreeMap$DescendingSubMap.absHighFence()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.prefs.AbstractPreferences.childrenNamesSpi()[Ljava/lang/String;", false);
        map.put("java.util.Locale.toLanguageTag()Ljava/lang/String;", false);
        map.put("java.util.regex.Pattern$BmpCharProperty.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.regex.Pattern$Dollar.<init>(Z)V", false);
        map.put("java.util.logging.FileHandler.checkPermission()V", false);
        map.put("java.util.Vector$Itr.next()Ljava/lang/Object;", false);
        map.put("java.util.Stack.<init>()V", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.lockInterruptibly()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListSet.lower(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.ArrayList.addAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.jar.Manifest$FastInputStream.<init>(Ljava/io/InputStream;I)V", false);
        map.put("java.util.Arrays.toString([J)Ljava/lang/String;", false);
        map.put("java.util.AbstractMap.access$000(Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.LinkedTransferQueue.size()I", true);
        map.put("java.util.logging.Logger.exiting(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V", true);
        map.put("java.util.concurrent.ThreadPoolExecutor.getKeepAliveTime(Ljava/util/concurrent/TimeUnit;)J", false);
        map.put("java.util.Collections$SynchronizedList.indexOf(Ljava/lang/Object;)I", false);
        map.put("java.util.regex.ASCII.isPunct(I)Z", true);
        map.put("java.util.concurrent.TimeUnit$7.toMinutes(J)J", false);
        map.put("java.util.prefs.PreferenceChangeEvent.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.concurrent.CopyOnWriteArrayList.subList(II)Ljava/util/List;", false);
        map.put("java.util.ResourceBundle$CacheKey.access$600(Ljava/util/ResourceBundle$CacheKey;)J", true);
        map.put("java.util.NavigableMap.floorKey(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.TimeUnit$6.toMinutes(J)J", false);
        map.put("java.util.concurrent.locks.ReentrantLock$FairSync.setState(I)V", false);
        map.put("java.util.concurrent.ExecutorCompletionService$QueueingFuture.done()V", false);
        map.put("java.util.concurrent.ConcurrentHashMap.segmentAt([Ljava/util/concurrent/ConcurrentHashMap$Segment;I)Ljava/util/concurrent/ConcurrentHashMap$Segment;", false);
        map.put("java.util.concurrent.LinkedTransferQueue.<init>()V", true);
        map.put("java.util.Collections$SynchronizedList.readResolve()Ljava/lang/Object;", false);
        map.put("java.util.Properties.remove(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedTransferQueue$Node.cannotPrecede(Z)Z", true);
        map.put("java.util.IdentityHashMap$KeyIterator.next()Ljava/lang/Object;", true);
        map.put("java.util.TreeMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.Dictionary.keys()Ljava/util/Enumeration;", false);
        map.put("java.util.ListResourceBundle.handleKeySet()Ljava/util/Set;", false);
        map.put("java.util.EnumMap.entryHashCode(I)I", false);
        map.put("java.util.ServiceLoader.reload()V", false);
        map.put("java.util.LinkedList$ListItr.checkForComodification()V", false);
        map.put("java.util.BitSet.set(IZ)V", false);
        map.put("java.util.ArrayList.listIterator(I)Ljava/util/ListIterator;", false);
        map.put("java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.lazySet(Ljava/lang/Object;I)V", false);
        map.put("java.util.TreeMap$KeySet.clear()V", false);
        map.put("java.util.jar.Manifest$FastInputStream.readLine([BII)I", false);
        map.put("java.util.zip.ZipFile.<init>(Ljava/lang/String;Ljava/nio/charset/Charset;)V", false);
        map.put("java.util.Collections$SynchronizedSortedSet.tailSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl.lazySet(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        map.put("java.util.RegularEnumSet.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.regex.ASCII.isAlpha(I)Z", true);
        map.put("java.util.concurrent.CountDownLatch.getCount()J", false);
        map.put("java.util.concurrent.BlockingDeque.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.Executors.newSingleThreadScheduledExecutor(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;", false);
        map.put("java.util.Collections$UnmodifiableMap.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.SimpleTimeZone.packRules()[B", true);
        map.put("java.util.ArrayList$SubList.get(I)Ljava/lang/Object;", true);
        map.put("java.util.SubList.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.prefs.AbstractPreferences.nodeListeners()[Ljava/util/prefs/NodeChangeListener;", true);
        map.put("java.util.Arrays.sort([Ljava/lang/Object;IILjava/util/Comparator;)V", false);
        map.put("java.util.concurrent.ForkJoinTask.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.SubList.outOfBoundsMsg(I)Ljava/lang/String;", false);
        map.put("java.util.concurrent.ForkJoinTask.setRawResult(Ljava/lang/Object;)V", false);
        map.put("java.util.jar.Pack200$Packer.pack(Ljava/util/jar/JarInputStream;Ljava/io/OutputStream;)V", false);
        map.put("java.util.Arrays.binarySearch([Ljava/lang/Object;Ljava/lang/Object;)I", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$19.<init>()V", false);
        map.put("java.util.jar.JarVerifier.nothingToVerify()Z", true);
        map.put("java.util.prefs.WindowsPreferences.stringToByteArray(Ljava/lang/String;)[B", true);
        map.put("java.util.HashMap$EntrySet.clear()V", false);
        map.put("java.util.logging.LogManager.access$1000(Ljava/util/logging/LogManager;Ljava/lang/String;)[Ljava/lang/String;", false);
        map.put("java.util.concurrent.ArrayBlockingQueue.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.GregorianCalendar.isCutoverYear(I)Z", true);
        map.put("java.util.concurrent.LinkedBlockingDeque.offer(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.concurrent.ForkJoinPool.managedBlock(Ljava/util/concurrent/ForkJoinPool$ManagedBlocker;)V", false);
        map.put("java.util.TimeZone.getID()Ljava/lang/String;", true);
        map.put("java.util.BitSet.writeObject(Ljava/io/ObjectOutputStream;)V", false);
        map.put("java.util.regex.Pattern$5.isSatisfiedBy(I)Z", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.unlink(Ljava/util/concurrent/LinkedBlockingDeque$Node;)V", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.acquire(I)V", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.logging.LoggingPermission.<init>(Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.BlockingQueue.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.regex.Matcher.group(I)Ljava/lang/String;", false);
        map.put("java.util.Hashtable.clone()Ljava/lang/Object;", false);
        map.put("java.util.Calendar.setZoneShared(Z)V", false);
        map.put("java.util.prefs.Preferences.removeNode()V", false);
        map.put("java.util.WeakHashMap.getTable()[Ljava/util/WeakHashMap$Entry;", false);
        map.put("java.util.concurrent.ForkJoinWorkerThread.popTask()Ljava/util/concurrent/ForkJoinTask;", false);
        map.put("java.util.jar.JarFile$4.hasMoreElements()Z", false);
        map.put("java.util.Collections$UnmodifiableSet.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.AbstractExecutorService.submit(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.logging.StreamHandler.configure()V", false);
        map.put("java.util.Deque.removeFirstOccurrence(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Index.unlink(Ljava/util/concurrent/ConcurrentSkipListMap$Index;)Z", false);
        map.put("java.util.Locale$Builder.removeUnicodeLocaleAttribute(Ljava/lang/String;)Ljava/util/Locale$Builder;", false);
        map.put("java.util.concurrent.BlockingDeque.addFirst(Ljava/lang/Object;)V", false);
        map.put("java.util.Stack.firstElement()Ljava/lang/Object;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$5.<init>()V", true);
        map.put("java.util.concurrent.ForkJoinPool.cancelSubmissions()V", false);
        map.put("java.util.jar.JarVerifier.update(I[BIILsun/security/util/ManifestEntryVerifier;)V", false);
        map.put("java.util.prefs.WindowsPreferences.WindowsRegCloseKey(I)I", false);
        map.put("java.util.Date.parse(Ljava/lang/String;)J", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferStack.isFulfilling(I)Z", true);
        map.put("java.util.TreeMap$AscendingSubMap.absLower(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.setState(I)V", false);
        map.put("java.util.concurrent.ConcurrentNavigableMap.pollFirstEntry()Ljava/util/Map$Entry;", false);
        map.put("java.util.TimSort.sort([Ljava/lang/Object;IILjava/util/Comparator;)V", false);
        map.put("java.util.regex.UnicodeProp$15.<init>(Ljava/lang/String;I)V", false);
        map.put("java.util.concurrent.Phaser.arriveAndDeregister()I", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.zip.Inflater.initIDs()V", false);
        map.put("java.util.Scanner.hasNextBigInteger()Z", false);
        map.put("java.util.concurrent.SynchronousQueue$TransferStack$SNode.<init>(Ljava/lang/Object;)V", false);
        map.put("java.util.logging.LogManager$LoggerContext.findLogger(Ljava/lang/String;)Ljava/util/logging/Logger;", false);
        map.put("java.util.zip.ZipFile.releaseInflater(Ljava/util/zip/Inflater;)V", false);
        map.put("java.util.Collections$CheckedMap$CheckedEntrySet.containsAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.logging.LogManager$Cleaner.<init>(Ljava/util/logging/LogManager;)V", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque$AbstractItr.startNode()Ljava/util/concurrent/ConcurrentLinkedDeque$Node;", false);
        map.put("java.util.logging.FileHandler$InitializationErrorManager.error(Ljava/lang/String;Ljava/lang/Exception;I)V", false);
        map.put("java.util.LinkedHashMap.<init>(IF)V", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.offer(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.TreeMap.keyIterator()Ljava/util/Iterator;", false);
        map.put("java.util.SortedSet.headSet(Ljava/lang/Object;)Ljava/util/SortedSet;", false);
        map.put("java.util.Hashtable$Entry.getKey()Ljava/lang/Object;", true);
        map.put("java.util.Collection.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.logging.Logger$LoggerHelper.<init>()V", true);
        map.put("java.util.SortedMap.firstKey()Ljava/lang/Object;", false);
        map.put("java.util.Currency$CurrencyNameGetter.getObject(Ljava/lang/Object;Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$DescendingSubMap$DescendingEntrySetView.<init>(Ljava/util/TreeMap$DescendingSubMap;)V", false);
        map.put("java.util.SimpleTimeZone.equals(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.DelayQueue.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.LinkedHashMap.containsKey(Ljava/lang/Object;)Z", false);
        map.put("java.util.jar.JarVerifier$3.nextElement()Ljava/lang/Object;", false);
        map.put("java.util.EnumMap$EntryIterator$Entry.<init>(Ljava/util/EnumMap$EntryIterator;I)V", false);
        map.put("java.util.jar.Attributes.entrySet()Ljava/util/Set;", false);
        map.put("java.util.regex.Pattern$CharPropertyNames$CloneableProperty.<init>(Ljava/util/regex/Pattern$1;)V", false);
        map.put("java.util.logging.LogRecord.setMillis(J)V", false);
        map.put("java.util.concurrent.Executors$DelegatedExecutorService.submit(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;", false);
        map.put("java.util.LinkedList.lastIndexOf(Ljava/lang/Object;)I", true);
        map.put("java.util.concurrent.LinkedBlockingDeque$Node.<init>(Ljava/lang/Object;)V", false);
        map.put("java.util.logging.Level.<init>(Ljava/lang/String;ILjava/lang/String;)V", false);
        map.put("java.util.Vector$Itr.remove()V", false);
        map.put("java.util.concurrent.ExecutorCompletionService.poll()Ljava/util/concurrent/Future;", false);
        map.put("java.util.JapaneseImperialCalendar.getNormalizedCalendar()Ljava/util/JapaneseImperialCalendar;", false);
        map.put("java.util.Calendar$1.run()Ljava/lang/Object;", false);
        map.put("java.util.EnumSet.writeReplace()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.LinkedTransferQueue.cast(Ljava/lang/Object;)Ljava/lang/Object;", true);
        map.put("java.util.HashMap.newValueIterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.addLast(Ljava/lang/Object;)V", false);
        map.put("java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator.remove()V", false);
        map.put("java.util.PropertyPermissionCollection.<clinit>()V", false);
        map.put("java.util.JumboEnumSet.recalculateSize()Z", false);
        map.put("java.util.concurrent.CopyOnWriteArraySet.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy.<init>()V", true);
        map.put("java.util.logging.LogManager.checkPermission()V", false);
        map.put("java.util.logging.LogRecord.getLevel()Ljava/util/logging/Level;", true);
        map.put("java.util.concurrent.locks.ReentrantLock.tryLock(JLjava/util/concurrent/TimeUnit;)Z", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock.getReadLockCount()I", true);
        map.put("java.util.Locale$Builder.setScript(Ljava/lang/String;)Ljava/util/Locale$Builder;", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive()Z", true);
        map.put("java.util.WeakHashMap$Entry.hashCode()I", false);
        map.put("java.util.TreeMap$AscendingSubMap.absCeiling(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.Random.nextInt()I", false);
        map.put("java.util.Collections$SynchronizedCollection.retainAll(Ljava/util/Collection;)Z", false);
        map.put("java.util.Formatter$FormatSpecifier$BigDecimalLayout.layoutChars()[C", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.runStateAtLeast(II)Z", true);
        map.put("java.util.prefs.Preferences$1.run()Ljava/lang/String;", true);
        map.put("java.util.Collections$UnmodifiableMap.containsKey(Ljava/lang/Object;)Z", false);
        map.put("java.util.Locale.<clinit>()V", false);
        map.put("java.util.Scanner.ensureOpen()V", false);
        map.put("java.util.NavigableSet.subSet(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/NavigableSet;", false);
        map.put("java.util.concurrent.ExecutorCompletionService$QueueingFuture.<init>(Ljava/util/concurrent/ExecutorCompletionService;Ljava/util/concurrent/RunnableFuture;)V", false);
        map.put("java.util.AbstractQueue.<init>()V", true);
        map.put("java.util.TreeMap$NavigableSubMap.absFloor(Ljava/lang/Object;)Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.GregorianCalendar.setTime(Ljava/util/Date;)V", false);
        map.put("java.util.AbstractList$ListItr.add(Ljava/lang/Object;)V", false);
        map.put("java.util.regex.Pattern$UnixDot.<init>()V", false);
        map.put("java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)Z", false);
        map.put("java.util.EventObject.getSource()Ljava/lang/Object;", true);
        map.put("java.util.Locale$Builder.setRegion(Ljava/lang/String;)Ljava/util/Locale$Builder;", false);
        map.put("java.util.EnumMap$EntryIterator$Entry.getValue()Ljava/lang/Object;", true);
        map.put("java.util.concurrent.atomic.AtomicStampedReference.casPair(Ljava/util/concurrent/atomic/AtomicStampedReference$Pair;Ljava/util/concurrent/atomic/AtomicStampedReference$Pair;)Z", false);
        map.put("java.util.concurrent.atomic.AtomicBoolean.set(Z)V", false);
        map.put("java.util.logging.LogManager.getProperty(Ljava/lang/String;)Ljava/lang/String;", true);
        map.put("java.util.concurrent.LinkedTransferQueue.transfer(Ljava/lang/Object;)V", false);
        map.put("java.util.regex.Pattern$Block.<init>(Ljava/lang/Character$UnicodeBlock;)V", false);
        map.put("java.util.SimpleTimeZone.<init>(ILjava/lang/String;)V", false);
        map.put("java.util.Deque.offer(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap$NavigableSubMap.tooHigh(Ljava/lang/Object;)Z", false);
        map.put("java.util.prefs.AbstractPreferences.enqueueNodeAddedEvent(Ljava/util/prefs/Preferences;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.tailMap(Ljava/lang/Object;Z)Ljava/util/NavigableMap;", false);
        map.put("java.util.logging.LogManager$1.run()Ljava/lang/Object;", false);
        map.put("java.util.Arrays.copyOf([BI)[B", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$Values.toArray([Ljava/lang/Object;)[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentHashMap$HashIterator.advance()V", false);
        map.put("java.util.TaskQueue.size()I", true);
        map.put("java.util.TreeMap$KeyIterator.nextEntry()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor$Worker.compareAndSetState(II)Z", false);
        map.put("java.util.concurrent.TimeUnit$3.toHours(J)J", true);
        map.put("java.util.concurrent.ThreadPoolExecutor.prestartCoreThread()Z", false);
        map.put("java.util.IdentityHashMap.<init>()V", false);
        map.put("java.util.concurrent.atomic.AtomicReferenceArray.getRaw(J)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ScheduledThreadPoolExecutor.shutdown()V", false);
        map.put("java.util.concurrent.Executors.privilegedCallable(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Callable;", false);
        map.put("java.util.StringTokenizer.<init>(Ljava/lang/String;Ljava/lang/String;)V", false);
        map.put("java.util.TreeMap$DescendingSubMap.descendingMap()Ljava/util/NavigableMap;", false);
        map.put("java.util.concurrent.LinkedBlockingDeque.unlinkFirst()Ljava/lang/Object;", false);
        map.put("java.util.ArrayList$SubList.removeRange(II)V", false);
        map.put("java.util.Random.nextBoolean()Z", false);
        map.put("java.util.BitSet.or(Ljava/util/BitSet;)V", false);
        map.put("java.util.SimpleTimeZone.observesDaylightTime()Z", true);
        map.put("java.util.LinkedHashMap.removeEntryForKey(Ljava/lang/Object;)Ljava/util/HashMap$Entry;", false);
        map.put("java.util.Formatter$FormatSpecifier.print(Ljava/lang/String;)V", false);
        map.put("java.util.concurrent.TimeUnit.toMinutes(J)J", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getState()J", true);
        map.put("java.util.Scanner.revertState(Z)Z", false);
        map.put("java.util.NavigableMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.concurrent.ExecutorService.invokeAny(Ljava/util/Collection;JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;", false);
        map.put("java.util.TreeMap$NavigableSubMap$SubMapKeyIterator.nextEntry()Ljava/util/TreeMap$Entry;", false);
        map.put("java.util.concurrent.ConcurrentHashMap$EntrySet.<init>(Ljava/util/concurrent/ConcurrentHashMap;)V", false);
        map.put("java.util.zip.Deflater.<init>(I)V", false);
        map.put("java.util.prefs.PreferencesFactory.userRoot()Ljava/util/prefs/Preferences;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.clearIndexToFirst()V", false);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject.unlinkCancelledWaiters()V", false);
        map.put("java.util.concurrent.CountDownLatch.<init>(I)V", false);
        map.put("java.util.regex.Pattern$LastNode.<init>()V", false);
        map.put("java.util.BitSet.get(II)Ljava/util/BitSet;", false);
        map.put("java.util.zip.Adler32.access$000(Ljava/util/zip/Adler32;Ljava/nio/ByteBuffer;)V", false);
        map.put("java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next()Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ConcurrentLinkedDeque.descendingIterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ExecutorService.invokeAll(Ljava/util/Collection;)Ljava/util/List;", false);
        map.put("java.util.IdentityHashMap.containsKey(Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.locks.AbstractQueuedLongSynchronizer.cancelAcquire(Ljava/util/concurrent/locks/AbstractQueuedLongSynchronizer$Node;)V", false);
        map.put("java.util.Scanner.skip(Ljava/util/regex/Pattern;)Ljava/util/Scanner;", false);
        map.put("java.util.Collections$CheckedCollection.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ThreadPoolExecutor.beforeExecute(Ljava/lang/Thread;Ljava/lang/Runnable;)V", true);
        map.put("java.util.IdentityHashMap.access$200(Ljava/util/IdentityHashMap;)I", true);
        map.put("java.util.zip.ZipInputStream.readEnd(Ljava/util/zip/ZipEntry;)V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;", false);
        map.put("java.util.Calendar.getInstance(Ljava/util/Locale;)Ljava/util/Calendar;", false);
        map.put("java.util.concurrent.locks.Condition.awaitNanos(J)J", false);
        map.put("java.util.SortedMap.values()Ljava/util/Collection;", false);
        map.put("java.util.GregorianCalendar.getCurrentFixedDate()J", false);
        map.put("java.util.concurrent.locks.ReentrantReadWriteLock$Sync.acquireSharedInterruptibly(I)V", false);
        map.put("java.util.concurrent.LinkedBlockingQueue.unlink(Ljava/util/concurrent/LinkedBlockingQueue$Node;Ljava/util/concurrent/LinkedBlockingQueue$Node;)V", false);
        map.put("java.util.jar.Pack200$Unpacker.removePropertyChangeListener(Ljava/beans/PropertyChangeListener;)V", false);
        map.put("java.util.logging.XMLFormatter.appendISO8601(Ljava/lang/StringBuffer;J)V", false);
        map.put("java.util.EnumMap$EntryIterator.remove()V", false);
        map.put("java.util.IdentityHashMap.access$1500(Ljava/util/IdentityHashMap;Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.Vector.iterator()Ljava/util/Iterator;", false);
        map.put("java.util.concurrent.ForkJoinTask$AdaptedRunnable.<init>(Ljava/lang/Runnable;Ljava/lang/Object;)V", false);
        map.put("java.util.regex.Pattern$Caret.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z", false);
        map.put("java.util.Arrays.deepEquals0(Ljava/lang/Object;Ljava/lang/Object;)Z", true);
        map.put("java.util.concurrent.Semaphore$Sync.acquireShared(I)V", false);
        map.put("java.util.HashSet.toArray()[Ljava/lang/Object;", false);
        map.put("java.util.concurrent.locks.ReentrantLock$FairSync.hasQueuedPredecessors()Z", false);
        map.put("java.util.Map$Entry.equals(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap.successor(Ljava/util/TreeMap$Entry;)Ljava/util/TreeMap$Entry;", true);
        map.put("java.util.concurrent.ConcurrentHashMap.readObject(Ljava/io/ObjectInputStream;)V", false);
        map.put("java.util.concurrent.ForkJoinPool.getStealCount()J", true);
        map.put("java.util.concurrent.ConcurrentSkipListMap$SubMap.get(Ljava/lang/Object;)Ljava/lang/Object;", false);
        map.put("java.util.prefs.XmlSupport.<init>()V", true);
        map.put("java.util.Collections$CopiesList.<init>(ILjava/lang/Object;)V", false);
        map.put("java.util.zip.Inflater.getAdler()I", false);
        map.put("java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetWaitStatus(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;II)Z", false);
        map.put("java.util.Scanner.hasNextBigInteger(I)Z", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.tailSet(Ljava/lang/Object;Z)Ljava/util/NavigableSet;", false);
        map.put("java.util.SubList.addAll(ILjava/util/Collection;)Z", false);
        map.put("java.util.jar.JarFile.getJarEntry(Ljava/lang/String;)Ljava/util/jar/JarEntry;", false);
        map.put("java.util.JapaneseImperialCalendar.add(II)V", false);
        map.put("java.util.Formatter$FormatSpecifier.width()I", true);
        map.put("java.util.Collections$UnmodifiableSortedMap.lastKey()Ljava/lang/Object;", false);
        map.put("java.util.JumboEnumSet$EnumSetIterator.<init>(Ljava/util/JumboEnumSet;)V", false);
        map.put("java.util.zip.Checksum.reset()V", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap.compare(Ljava/lang/Object;Ljava/lang/Object;)I", false);
        map.put("java.util.jar.JarFile$2.nextElement()Ljava/lang/String;", false);
        map.put("java.util.JapaneseImperialCalendar.setLenient(Z)V", false);
        map.put("java.util.TreeSet.add(Ljava/lang/Object;)Z", false);
        map.put("java.util.TreeMap.rotateLeft(Ljava/util/TreeMap$Entry;)V", false);
        map.put("java.util.Collections.min(Ljava/util/Collection;)Ljava/lang/Object;", false);
        map.put("java.util.concurrent.ForkJoinPool.scan(Ljava/util/concurrent/ForkJoinWorkerThread;I)Z", false);
        map.put("java.util.logging.Logger$1.run()Ljava/util/ResourceBundle;", false);
        map.put("java.util.TimeZone.setDefaultInAppContext(Ljava/util/TimeZone;)V", false);
        map.put("java.util.Hashtable$KeySet.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.concurrent.LinkedTransferQueue.remove(Ljava/lang/Object;)Z", false);
        map.put("java.util.ArrayList$SubList.subList(II)Ljava/util/List;", false);
        map.put("java.util.concurrent.ConcurrentSkipListMap$KeySet.contains(Ljava/lang/Object;)Z", false);
        map.put("java.util.SimpleTimeZone.inDaylightTime(Ljava/util/Date;)Z", false);
        map.put("java.util.logging.FileHandler.access$100(Ljava/util/logging/FileHandler;)V", false);
    }


}
